#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""(Sub-)parser mapping concepts and content from *.nxs.mtex files on NXem."""

"""
README.md
*.nxs.mtex is a specific HDF5-based data processing report format for users of
the MTex/Matlab texture toolbox to export results from MTex to other software.

The format uses several concepts from the NXem appdef.
Instances of *.nxs.mtex files thus contain several but not necessarily
all pieces of information which the NXem application definition demands
as required.

Therefore, pynxtools can be used to append these missing pieces of information.

Currently implemented I/O support for this format:
The current implementation of *.nxs.mtex sub-parser in the em reader
is implemented such that an existent *.nxs.mtex file is copied and
this copy annotated with the missing pieces of information.

The nxs_mtex sub-parser is the only sub-parser of the em parser
with this copying-the-input-file design. For all other file formats
the em parser uses the template to instantiate the complete file
including all numerical data eventually generated by one or several
of the sub-parsers.
"""

import re
import h5py

from ase.data import chemical_symbols

from pynxtools.dataconverter.readers.em.examples.ebsd_database \
    import FreeTextToUniquePhase, UniquePhaseToAtomTypes, ProjectIdToCitation


class NxEmNxsMTexSubParser():
    """Map content from *.nxs.mtex files on an instance of NXem.

    """
    def __init__(self):
        pass

    def parse(self, template: dict, entry_id: int = 1) -> dict:
        """Pass because for *.nxs.mtex all data are already in the copy of the output."""
        return template

    def example_ebsd_database_set_atom_types(self,
                                             template: dict,
                                             entry_id: int = 1,
                                             input_file_name: str = "") -> dict:
        """Add phase name surplus other data to the copy of the *.nxs.mtex instance."""
        # for each phase map elements
        atom_types = set()
        if input_file_name == "":
            template[f"/ENTRY[entry{entry_id}]/sample/atom_types"] = ""
            return template
        h5r = h5py.File(input_file_name, "r")
        trg = f"/entry{entry_id}/roi1/ebsd/indexing"
        if trg in h5r:
            for node_name in h5r[trg].keys():
                if re.match("phase[0-9]+", node_name) is not None:
                    if f"{trg}/{node_name}/phase_name" in h5r:
                        obj = h5r[f"{trg}/{node_name}/phase_name"][()].decode('utf-8')
                        free_text_phase_name = obj.rstrip(" ").lstrip(" ")
                        if free_text_phase_name in FreeTextToUniquePhase.keys():
                            unique_phase_name \
                                = FreeTextToUniquePhase[free_text_phase_name]
                            if unique_phase_name in UniquePhaseToAtomTypes.keys():
                                curr_atom_types \
                                    = UniquePhaseToAtomTypes[unique_phase_name]
                                symbols = curr_atom_types.split(";")
                                for symbol in symbols:
                                    if symbol in chemical_symbols[1::]:
                                        atom_types.add(symbol)
        h5r.close()

        if len(atom_types) > 0:
            template[f"/ENTRY[entry{entry_id}]/sample/atom_types"] \
                = ", ".join(list(atom_types))
        else:
            template[f"/ENTRY[entry{entry_id}]/sample/atom_types"] = ""
        return template

    def example_ebsd_database_set_citations(self,
                                            template: dict,
                                            entry_id: int = 1,
                                            input_file_name: str = "") -> dict:
        """Add doi for location and paper of orig. work in the *.nxs.mtex instance."""
        # TODO::add list of all projects
        proj_id_key = input_file_name
        if proj_id_key in ProjectIdToCitation.keys():
            # data citation
            cite_id = 1
            if "data" in ProjectIdToCitation[proj_id_key].keys():
                template[f"/ENTRY[entry{entry_id}]/CITE[cite{cite_id}]/url"] \
                    = ProjectIdToCitation[proj_id_key]["data"]
                template[f"/ENTRY[entry{entry_id}]/CITE[cite{cite_id}]/description"] \
                    = "Link to the actual data repository from where these data were collected."
                cite_id += 1
            if "paper" in ProjectIdToCitation[proj_id_key].keys():
                template[f"/ENTRY[entry{entry_id}]/CITE[cite{cite_id}]/url"] \
                    = ProjectIdToCitation[proj_id_key]["paper"]
                template[f"/ENTRY[entry{entry_id}]/CITE[cite{cite_id}]/description"] \
                    = "Link to (the or a) paper which is evidently associated with these data."
        return template
