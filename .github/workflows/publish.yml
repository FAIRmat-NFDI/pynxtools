name: Upload Python Package

on:
  release:
    types: [published]

env:
  python-version: 3.11

jobs:
  setup:
    name: Checkout and Install
    runs-on: ubuntu-latest
    outputs:
      git_tag_version: ${{ steps.git_tag_version.outputs.version }}
      citation_version: ${{ steps.citation_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.python-version }}
      - name: Git tag version
        id: git_tag_version
        run: |
          GIT_TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$GIT_TAG_VERSION" >> "$GITHUB_OUTPUT"
      - name: Citation version
        id: citation_version
        run: |
          CITATION_VERSION=$(grep '^version:' CITATION.cff | cut -d' ' -f2)
          echo "version=$CITATION_VERSION" >> "$GITHUB_OUTPUT"

  test:
    name: Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.python-version }}
      - name: Install latest nomad release
        run: |
          uv pip install nomad-lab[infrastructure]
      - name: Install pynx
        run: |
          uv pip install -e ".[dev]"
      - name: Test with pytest
        run: pytest tests/

  compare-versions:
    name: Compare Versions
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Fail if versions mismatch
        run: |
          if [ "${{ needs.setup.outputs.git_tag_version }}" != "${{ needs.setup.outputs.citation_version }}" ]; then
            echo "Version mismatch: Git tag is ${{ needs.setup.outputs.git_tag_version }}, CITATION.cff is ${{ needs.setup.outputs.citation_version }}"
            exit 1
          fi

  build:
    name: Build Package
    needs: [compare-versions, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.python-version }}
      - run: uv pip install build
      - run: |
          git reset --hard HEAD
          python -m build
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/

  deploy:
    name: Upload to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pynxtools
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}
      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1