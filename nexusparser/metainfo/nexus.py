import numpy as np            # pylint: disable=unused-import
import typing                 # pylint: disable=unused-import
from nomad.metainfo import (  # pylint: disable=unused-import
    MSection, MCategory, Category, Package, Quantity, Section, SubSection, SectionProxy,
    Reference, MEnum)
#from nomad.metainfo.legacy import LegacyDefinition
#from nomad.datamodel.metainfo.nxobject import NXobject




m_package = Package(
    name='NEXUS',
    description='None')

class NXobject(MSection):
    pass

class NXtranslation(NXobject):
    pass

class NXorientation(NXobject):
    pass

class NXcsg(NXobject):
    pass

class NX_FLOAT(NXobject):
    pass

class NX_BINARY(NXobject):
    pass

class NX_BOOLEAN(NXobject):
    pass

class NX_CHAR(NXobject):
    pass

class NX_DATE_TIME(NXobject):
    pass

class NX_INT(NXobject):
    pass

class NX_NUMBER(NXobject):
    pass

class NX_POSINT(NXobject):
    pass

class NX_UINT(NXobject):
    pass


class NXcollection(NXobject):
    '''
        An unvalidated set of terms, such as the description of a beam line.
        Use :ref:`NXcollection` to gather together any set of terms.                 The
        original suggestion is to use this as a container                  class for the
        description of a beamline.                                  For NeXus validation,
        :ref:`NXcollection` will always generate                  a warning since it is
        always an optional group.                   Anything (groups, fields, or
        attributes) placed in                 an :ref:`NXcollection` group will not be
        validated.
        https://manual.nexusformat.org/classes/base_classes/NXcollection.html#nxcollection
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXcollection',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_ignoreExtraGroups='true',
        nxp_ignoreExtraFields='true',
        nxp_ignoreExtraAttributes='true',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollection.html#nxcollection',
        nxp_optional='True',
        )

class NXslit(NXobject):
    '''
        A simple slit.                                  For more complex geometries,
        :ref:`NXaperture` should be used.
        https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXslit',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit',
        nxp_optional='True',
        )
    class nxf_depends_on(NXobject):
        '''
            Points to the path of the last element in the geometry chain that places
            this object in space.                          When followed through that
            chain is supposed to end at an element depending                         on
            "." i.e. the origin of the coordinate system.                         If
            desired the location of the slit can also be described relative to
            an NXbeam, which will allow a simple description of a non-centred slit.
            https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-depends-on-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_depends_on = SubSection(sub_section=nxf_depends_on.m_def,repeats=True,
        nxp_name='depends_on',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-depends-on-field',
        nxp_optional='True',
        )
    class nxf_x_gap(NXobject):
        '''
            Size of the gap opening in the first dimension of the local
            coordinate system.
            https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-x-gap-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_x_gap = SubSection(sub_section=nxf_x_gap.m_def,repeats=True,
        nxp_name='x_gap',
        nxp_type='NX_NUMBER',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-x-gap-field',
        nxp_optional='True',
        )
    class nxf_y_gap(NXobject):
        '''
            Size of the gap opening in the second dimension of the local
            coordinate system.
            https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-y-gap-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_y_gap = SubSection(sub_section=nxf_y_gap.m_def,repeats=True,
        nxp_name='y_gap',
        nxp_type='NX_NUMBER',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-y-gap-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-default-attribute',
        nxp_optional='True',
        )

class NXevent_data(NXobject):
    '''
        NXevent_data is a special group for storing data from neutron     detectors in
        event mode.  In this mode, the detector electronics     emits a stream of
        detectorID, timestamp pairs. With detectorID     describing the detector element
        in which the neutron was detected     and timestamp the timestamp at which the
        neutron event was     detected. In NeXus detectorID maps to event_id,
        event_time_offset     to the timestamp.

        As this kind of data is common at pulsed neutron     sources, the timestamp is
        almost always relative to the start of a     neutron pulse. Thus the pulse
        timestamp is recorded too together     with an index in the event_id,
        event_time_offset pair at which data for     that pulse starts. At reactor source
        the same pulsed data effect     may be achieved through the use of choppers or in
        stroboscopic     measurement setups.

        In order to make random access to timestamped data     faster there is an optional
        array pair of     cue_timestamp_zero and cue_index. The cue_timestamp_zero will
        contain courser timestamps then in the time array, say     every five minutes. The
        cue_index will then contain the     index into the event_id,event_time_offset pair
        of arrays for that     courser cue_timestamp_zero.
        https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXevent_data',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data',
        nxp_optional='True',
        )
    class nxf_event_time_offset(NXobject):
        '''
            A list of timestamps for each event as it comes in.
            https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-offset-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_event_time_offset = SubSection(sub_section=nxf_event_time_offset.m_def,repeats=True,
        nxp_name='event_time_offset',
        nxp_type='NX_NUMBER',
        nxp_units='NX_TIME_OF_FLIGHT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-offset-field',
        nxp_optional='True',
        )
    class nxf_event_id(NXobject):
        '''
            There will be extra information in the NXdetector to convert
            event_id to detector_number.
            https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-id-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_event_id = SubSection(sub_section=nxf_event_id.m_def,repeats=True,
        nxp_name='event_id',
        nxp_type='NX_INT',
        nxp_units='NX_DIMENSIONLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-id-field',
        nxp_optional='True',
        )
    class nxf_event_time_zero(NXobject):
        '''
            The time that each pulse started with respect to the offset
            https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-zero-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_offset(NXobject):
            '''
ISO8601
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-zero-offset-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxa_offset = SubSection(sub_section=nxa_offset.m_def,repeats=True,
            nxp_name='offset',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-zero-offset-attribute',
            nxp_optional='True',
            )
    nxf_event_time_zero = SubSection(sub_section=nxf_event_time_zero.m_def,repeats=True,
        nxp_name='event_time_zero',
        nxp_type='NX_NUMBER',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-zero-field',
        nxp_optional='True',
        )
    class nxf_event_index(NXobject):
        '''
            The index into the event_time_offset, event_id pair for             the pulse
            occurring at the matching entry in event_time_zero.
            https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-index-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_event_index = SubSection(sub_section=nxf_event_index.m_def,repeats=True,
        nxp_name='event_index',
        nxp_type='NX_INT',
        nxp_units='NX_DIMENSIONLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-index-field',
        nxp_optional='True',
        )
    class nxf_pulse_height(NXobject):
        '''
            If voltages from the ends of the detector are read out this
            is where they go. This list is for all events with information
            to attach to a particular pulse height. The information to
            attach to a particular pulse is located in events_per_pulse.
            https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-pulse-height-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_pulse_height = SubSection(sub_section=nxf_pulse_height.m_def,repeats=True,
        nxp_name='pulse_height',
        nxp_type='NX_FLOAT',
        nxp_units='NX_DIMENSIONLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-pulse-height-field',
        nxp_optional='True',
        )
    class nxf_cue_timestamp_zero(NXobject):
        '''
            Timestamps matching the corresponding cue_index into the             event_id,
            event_time_offset pair.
            https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-timestamp-zero-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        class nxa_start(NXobject):
            '''
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-timestamp-zero-start-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxa_start = SubSection(sub_section=nxa_start.m_def,repeats=True,
            nxp_name='start',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-timestamp-zero-start-attribute',
            nxp_optional='True',
            )
    nxf_cue_timestamp_zero = SubSection(sub_section=nxf_cue_timestamp_zero.m_def,repeats=True,
        nxp_name='cue_timestamp_zero',
        nxp_type='NX_DATE_TIME',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-timestamp-zero-field',
        nxp_optional='True',
        )
    class nxf_cue_index(NXobject):
        '''
            Index into the event_id, event_time_offset pair matching the corresponding
            cue_timestamp.
            https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-index-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_cue_index = SubSection(sub_section=nxf_cue_index.m_def,repeats=True,
        nxp_name='cue_index',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-index-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-default-attribute',
        nxp_optional='True',
        )

class NXpositioner(NXobject):
    '''
        A generic positioner such as a motor or piezo-electric transducer.
        https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXpositioner',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_category='base',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner',
        nxp_optional='True',
        )
    class nxf_name(NXobject):
        '''
symbolic or mnemonic name (one word)
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
        nxp_name='name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-name-field',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
description of positioner
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-description-field',
        nxp_optional='True',
        )
    class nxf_value(NXobject):
        '''
best known value of positioner - need [n] as may be scanned
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
        nxp_name='value',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-value-field',
        nxp_optional='True',
        )
    class nxf_raw_value(NXobject):
        '''
raw value of positioner - need [n] as may be scanned
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-raw-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_raw_value = SubSection(sub_section=nxf_raw_value.m_def,repeats=True,
        nxp_name='raw_value',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-raw-value-field',
        nxp_optional='True',
        )
    class nxf_target_value(NXobject):
        '''
targeted (commanded) value of positioner - need [n] as may be scanned
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-target-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_target_value = SubSection(sub_section=nxf_target_value.m_def,repeats=True,
        nxp_name='target_value',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-target-value-field',
        nxp_optional='True',
        )
    class nxf_tolerance(NXobject):
        '''
maximum allowable difference between target_value and value
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-tolerance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_tolerance = SubSection(sub_section=nxf_tolerance.m_def,repeats=True,
        nxp_name='tolerance',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-tolerance-field',
        nxp_optional='True',
        )
    class nxf_soft_limit_min(NXobject):
        '''
minimum allowed limit to set value
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-soft-limit-min-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_soft_limit_min = SubSection(sub_section=nxf_soft_limit_min.m_def,repeats=True,
        nxp_name='soft_limit_min',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-soft-limit-min-field',
        nxp_optional='True',
        )
    class nxf_soft_limit_max(NXobject):
        '''
maximum allowed limit to set value
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-soft-limit-max-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_soft_limit_max = SubSection(sub_section=nxf_soft_limit_max.m_def,repeats=True,
        nxp_name='soft_limit_max',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-soft-limit-max-field',
        nxp_optional='True',
        )
    class nxf_velocity(NXobject):
        '''
velocity of the positioner (distance moved per unit time)
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-velocity-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_velocity = SubSection(sub_section=nxf_velocity.m_def,repeats=True,
        nxp_name='velocity',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-velocity-field',
        nxp_optional='True',
        )
    class nxf_acceleration_time(NXobject):
        '''
time to ramp the velocity up to full speed
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-acceleration-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_acceleration_time = SubSection(sub_section=nxf_acceleration_time.m_def,repeats=True,
        nxp_name='acceleration_time',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-acceleration-time-field',
        nxp_optional='True',
        )
    class nxf_controller_record(NXobject):
        '''
Hardware device record, e.g. EPICS process variable, taco/tango ...
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-controller-record-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_controller_record = SubSection(sub_section=nxf_controller_record.m_def,repeats=True,
        nxp_name='controller_record',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-controller-record-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-default-attribute',
        nxp_optional='True',
        )

class NXtransformations(NXobject):
    '''
        Collection of axis-based translations and rotations to describe a geometry.
        May also contain axes that do not move and therefore do not have a transformation
        type specified, but are useful in understanding coordinate frames within which
        transformations are done, or in documenting important directions, such as the
        direction of gravity.

        A nested sequence of transformations lists the translation and rotation steps
        needed to describe the position and orientation of any movable or fixed device.

        There will be one or more transformations (axes) defined by one or more fields
        for each transformation.  The all-caps name ``AXISNAME`` designates the
        particular axis generating a transformation (e.g. a rotation axis or a translation
        axis or a general axis).   The attribute ``units="NX_TRANSFORMATION"`` designates
        the                 units will be appropriate to the ``transformation_type``
        attribute:

        * ``NX_LENGTH`` for ``translation``                 * ``NX_ANGLE`` for
        ``rotation``                 * ``NX_UNITLESS`` for axes for which no
        transformation type is specified

        This class will usually contain all axes of a sample stage or goniometer or
        a detector.  The NeXus default McSTAS coordinate frame is assumed, but additional
        useful coordinate axes may be defined by using axes for which no transformation
        type has been specified.

        The entry point (``depends_on``) will be outside of this class and point to a
        field in here. Following the chain may also require following ``depends_on``
        links to transformations outside, for example to a common base table.  If
        a relative path is given, it is relative to the group enclosing the ``depends_on``
        specification.

        For a chain of three transformations, where :math:`T_1` depends on :math:`T_2`
        and that in turn depends on :math:`T_3`, the final transformation :math:`T_f` is

        .. math:: T_f = T_3 T_2 T_1

        In explicit terms, the transformations are a subset of affine transformations
        expressed as 4x4 matrices that act on homogeneous coordinates,
        :math:`w=(x,y,z,1)^T`.

        For rotation and translation,

        .. math:: T_r &= \\begin{pmatrix} R & o \\\\ 0_3 & 1 \\end{pmatrix} \\\\ T_t &=
        \\begin{pmatrix} I_3  & t + o \\\\ 0_3 & 1 \\end{pmatrix}

        where :math:`R` is the usual 3x3 rotation matrix, :math:`o` is an offset vector,
        :math:`0_3` is a row of 3 zeros, :math:`I_3` is the 3x3 identity matrix and
        :math:`t` is the translation vector.

        :math:`o` is given by the ``offset`` attribute, :math:`t` is given by the
        ``vector``                 attribute multiplied by the field value, and :math:`R`
        is defined as a rotation                 about an axis in the direction of
        ``vector``, of angle of the field value.

        NOTE                                  One possible use of ``NXtransformations`` is
        to define the motors and                 transformations for a diffractometer
        (goniometer).  Such use is mentioned                 in the ``NXinstrument`` base
        class.  Use one ``NXtransformations`` group                  for each
        diffractometer and name the group appropriate to the device.
        Collecting the motors of a sample table or xyz-stage in an NXtransformation
        group is equally possible.
        https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXtransformations',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_ignoreExtraGroups='true',
        nxp_ignoreExtraFields='true',
        nxp_ignoreExtraAttributes='true',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations',
        nxp_optional='True',
        )
    class nxf_AXISNAME(NXobject):
        '''
            Units need to be appropriate for translation or rotation

            The name of this field is not forced.  The user is free to use any name
            that does not cause confusion.  When using more than one ``AXISNAME`` field,
            make sure that each field name is unique in the same group, as required
            by HDF5.

            The values given should be the start points of exposures for the corresponding
            frames.  The end points should be given in ``AXISNAME_end``.
            https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_transformation_type(NXobject):
            '''
                The transformation_type may be ``translation``, in which case the
                values are linear displacements along the axis, ``rotation``,
                in which case the values are angular rotations around the axis.

                If this attribute is omitted, this is an axis for which there
                is no motion to be specifies, such as the direction of gravity,
                or the direction to the source, or a basis vector of a
                coordinate frame.                           Possible values:
                ['translation','rotation']

                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-transformation-type-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_transformation_type = SubSection(sub_section=nxa_transformation_type.m_def,repeats=True,
            nxp_name='transformation_type',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-transformation-type-attribute',
            nxp_optional='True',
            enumeration=['translation','rotation'],
            )
        class nxa_vector(NXobject):
            '''
                Three values that define the axis for this transformation.
                The axis should be normalized to unit length, making it
                dimensionless.  For ``rotation`` axes, the direction should be
                chosen for a right-handed rotation with increasing angle.
                For ``translation`` axes the direction should be chosen for
                increasing displacement. For general axes, an appropriate direction
                should be chosen.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-vector-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_vector = SubSection(sub_section=nxa_vector.m_def,repeats=True,
            nxp_name='vector',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-vector-attribute',
            nxp_required='True',
            )
        class nxa_offset(NXobject):
            '''
                A fixed offset applied before the transformation (three vector
                components).                                 This is not intended to be a
                substitute for a fixed ``translation`` axis but, for example,
                as the mechanical offset from mounting the axis to its dependency.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-offset-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_offset = SubSection(sub_section=nxa_offset.m_def,repeats=True,
            nxp_name='offset',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-offset-attribute',
            nxp_optional='True',
            )
        class nxa_offset_units(NXobject):
            '''
                Units of the offset.  Values should be consistent with NX_LENGTH.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-offset-units-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_offset_units = SubSection(sub_section=nxa_offset_units.m_def,repeats=True,
            nxp_name='offset_units',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-offset-units-attribute',
            nxp_optional='True',
            )
        class nxa_depends_on(NXobject):
            '''
                Points to the path to a field defining the axis on which this
                depends or the string ".".
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-depends-on-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_depends_on = SubSection(sub_section=nxa_depends_on.m_def,repeats=True,
            nxp_name='depends_on',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-depends-on-attribute',
            nxp_optional='True',
            )
    nxf_AXISNAME = SubSection(sub_section=nxf_AXISNAME.m_def,repeats=True,
        nxp_name='AXISNAME',
        nxp_nameType='any',
        nxp_units='NX_TRANSFORMATION',
        nxp_type='NX_NUMBER',
        nxp_maxOccurs='unbounded',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-field',
        nxp_optional='True',
        )
    class nxf_AXISNAME_end(NXobject):
        '''
            ``AXISNAME_end`` is a placeholder for a name constructed from the actual
            name of an axis to which ``_end`` has been appended.

            The values in this field are the end points of the motions that start
            at the corresponding positions given in the ``AXISNAME`` field.
            https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-end-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_AXISNAME_end = SubSection(sub_section=nxf_AXISNAME_end.m_def,repeats=True,
        nxp_name='AXISNAME_end',
        nxp_units='NX_TRANSFORMATION',
        nxp_nameType='any',
        nxp_type='NX_NUMBER',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-end-field',
        nxp_optional='True',
        )
    class nxf_AXISNAME_increment_set(NXobject):
        '''
            ``AXISNAME_increment_set`` is a placeholder for a name constructed from the
            actual                         name of an axis to which ``_increment_set`` has
            been appended.

            The value of this optional field is the intended average range through which
            the corresponding axis moves during the exposure of a frame.  Ideally, the
            value of this field added to each value of ``AXISNAME`` would agree with the
            corresponding values of ``AXISNAME_end``, but there is a possibility of
            significant                         differences.  Use of ``AXISNAME_end`` is
            recommended.
            https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-increment-set-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_AXISNAME_increment_set = SubSection(sub_section=nxf_AXISNAME_increment_set.m_def,repeats=True,
        nxp_name='AXISNAME_increment_set',
        nxp_units='NX_TRANSFORMATION',
        nxp_nameType='any',
        nxp_type='NX_NUMBER',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-increment-set-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-default-attribute',
        nxp_optional='True',
        )

class NXflipper(NXobject):
    '''
A spin flipper.
        https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXflipper',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
            Possible values:    ['coil','current-sheet']

            https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-type-field',
        nxp_optional='True',
        enumeration=['coil','current-sheet'],
        )
    class nxf_flip_turns(NXobject):
        '''
Linear density of turns (such as number of turns/cm) in flipping field coils
            https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-flip-turns-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_flip_turns = SubSection(sub_section=nxf_flip_turns.m_def,repeats=True,
        nxp_name='flip_turns',
        nxp_type='NX_FLOAT',
        nxp_units='NX_PER_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-flip-turns-field',
        nxp_optional='True',
        )
    class nxf_comp_turns(NXobject):
        '''
Linear density of turns (such as number of turns/cm) in compensating field
            coils
            https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-comp-turns-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_comp_turns = SubSection(sub_section=nxf_comp_turns.m_def,repeats=True,
        nxp_name='comp_turns',
        nxp_type='NX_FLOAT',
        nxp_units='NX_PER_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-comp-turns-field',
        nxp_optional='True',
        )
    class nxf_guide_turns(NXobject):
        '''
Linear density of turns (such as number of turns/cm) in guide field coils
            https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-guide-turns-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_guide_turns = SubSection(sub_section=nxf_guide_turns.m_def,repeats=True,
        nxp_name='guide_turns',
        nxp_type='NX_FLOAT',
        nxp_units='NX_PER_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-guide-turns-field',
        nxp_optional='True',
        )
    class nxf_flip_current(NXobject):
        '''
Flipping field coil current in "on" state"
            https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-flip-current-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_flip_current = SubSection(sub_section=nxf_flip_current.m_def,repeats=True,
        nxp_name='flip_current',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-flip-current-field',
        nxp_optional='True',
        )
    class nxf_comp_current(NXobject):
        '''
Compensating field coil current in "on" state"
            https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-comp-current-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_comp_current = SubSection(sub_section=nxf_comp_current.m_def,repeats=True,
        nxp_name='comp_current',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-comp-current-field',
        nxp_optional='True',
        )
    class nxf_guide_current(NXobject):
        '''
Guide field coil current in "on" state"
            https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-guide-current-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_guide_current = SubSection(sub_section=nxf_guide_current.m_def,repeats=True,
        nxp_name='guide_current',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-guide-current-field',
        nxp_optional='True',
        )
    class nxf_thickness(NXobject):
        '''
thickness along path of neutron travel
            https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_thickness = SubSection(sub_section=nxf_thickness.m_def,repeats=True,
        nxp_name='thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-thickness-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-default-attribute',
        nxp_optional='True',
        )

class NXcylindrical_geometry(NXobject):
    '''
        Geometry description for cylindrical shapes.     This class can be used in place
        of ``NXoff_geometry`` when an exact     representation for cylinders is preferred.
        For example, for Helium-tube, neutron detectors.     It can be used to describe
        the shape of any beamline component, including detectors.     In the case of
        detectors it can be used to define the shape of a single pixel, or,     if the
        pixel shapes are non-uniform, to describe the shape of the whole detector.
        https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXcylindrical_geometry',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry',
        nxp_optional='True',
        )
    class nxf_vertices(NXobject):
        '''
            List of x,y,z coordinates for vertices.       The origin of the coordinates is
            the position of the parent component, for       example the NXdetector which
            the geometry describes.       If the shape describes a single pixel for a
            detector with uniform pixel shape       then the origin is the position of
            each pixel as described by the       ``x/y/z_pixel_offset`` datasets in
            ``NXdetector``.
            https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-vertices-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_vertices = SubSection(sub_section=nxf_vertices.m_def,repeats=True,
        nxp_name='vertices',
        nxp_type='NX_NUMBER',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-vertices-field',
        nxp_optional='True',
        )
    class nxf_cylinders(NXobject):
        '''
            List of indices of vertices in the ``vertices`` dataset to form each cylinder.
            Each cylinder is described by three vertices A, B, C.       First vertex A
            lies on the cylinder axis and circular face, second point B       on edge of
            the same face as A, and third point C at the other face and on axis.
            https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-cylinders-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_cylinders = SubSection(sub_section=nxf_cylinders.m_def,repeats=True,
        nxp_name='cylinders',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-cylinders-field',
        nxp_optional='True',
        )
    class nxf_detector_number(NXobject):
        '''
Maps cylinders in ``cylinder``, by index, with a detector id.
            https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-detector-number-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_detector_number = SubSection(sub_section=nxf_detector_number.m_def,repeats=True,
        nxp_name='detector_number',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-detector-number-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-default-attribute',
        nxp_optional='True',
        )

class NXattenuator(NXobject):
    '''
        A device that reduces the intensity of a beam by attenuation.

        If uncertain whether to use :ref:`NXfilter` (band-pass filter)         or
        :ref:`NXattenuator` (reduces beam intensity), then choose
        :ref:`NXattenuator`.
        https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXattenuator',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_category='base',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator',
        nxp_optional='True',
        )
    class nxf_distance(NXobject):
        '''
Distance from sample
            https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
        nxp_name='distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-distance-field',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
Type or composition of attenuator, e.g. polythene
            https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-type-field',
        nxp_optional='True',
        )
    class nxf_thickness(NXobject):
        '''
Thickness of attenuator along beam direction
            https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_thickness = SubSection(sub_section=nxf_thickness.m_def,repeats=True,
        nxp_name='thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-thickness-field',
        nxp_optional='True',
        )
    class nxf_scattering_cross_section(NXobject):
        '''
Scattering cross section (coherent+incoherent)
            https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-scattering-cross-section-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_scattering_cross_section = SubSection(sub_section=nxf_scattering_cross_section.m_def,repeats=True,
        nxp_name='scattering_cross_section',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CROSS_SECTION',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-scattering-cross-section-field',
        nxp_optional='True',
        )
    class nxf_absorption_cross_section(NXobject):
        '''
Absorption cross section
            https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-absorption-cross-section-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_absorption_cross_section = SubSection(sub_section=nxf_absorption_cross_section.m_def,repeats=True,
        nxp_name='absorption_cross_section',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CROSS_SECTION',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-absorption-cross-section-field',
        nxp_optional='True',
        )
    class nxf_attenuator_transmission(NXobject):
        '''
            The nominal amount of the beam that gets through             (transmitted
            intensity)/(incident intensity)
            https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-attenuator-transmission-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_attenuator_transmission = SubSection(sub_section=nxf_attenuator_transmission.m_def,repeats=True,
        nxp_name='attenuator_transmission',
        nxp_type='NX_FLOAT',
        nxp_units='NX_DIMENSIONLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-attenuator-transmission-field',
        nxp_optional='True',
        )
    class nxf_status(NXobject):
        '''
In or out or moving of the beam  Possible values:    ['in','out','moving']

            https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-status-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_time(NXobject):
            '''
time stamp for this observation
                https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-status-time-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxa_time = SubSection(sub_section=nxa_time.m_def,repeats=True,
            nxp_name='time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-status-time-attribute',
            nxp_optional='True',
            )
    nxf_status = SubSection(sub_section=nxf_status.m_def,repeats=True,
        nxp_name='status',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-status-field',
        nxp_optional='True',
        enumeration=['in','out','moving'],
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-default-attribute',
        nxp_optional='True',
        )

class NXdata(NXobject):
    '''
        :ref:`NXdata` describes the plottable data and related dimension scales.
        .. index:: plotting                                  It is mandatory  that there
        is at least one :ref:`NXdata` group                  in each :ref:`NXentry` group.
        Note that the ``variable`` and ``data``                  can be defined with
        different names.                   The ``signal`` and ``axes`` attributes of the
        ``data`` group define which items                  are plottable data and which
        are *dimension scales*, respectively.
        :ref:`NXdata` is used to implement one of the basic motivations in NeXus,
        to provide a default plot for the data of this :ref:`NXentry`.  The actual data
        might be stored in another group and (hard) linked to the :ref:`NXdata` group.

        * Each :ref:`NXdata` group will define only one data set
        containing plottable data, dimension scales, and                    possibly
        associated standard deviations.                   Other data sets may be present
        in the group.                 * The plottable data may be of arbitrary rank up to
        a maximum                   of ``NX_MAXRANK=32``.                 * The plottable
        data will be named as the value of                    the group ``signal``
        attribute, such as::                                        data:NXdata
        @signal = "counts"                       @axes = "mr"
        @mr_indices = 0                       counts: float[100]  --> the default
        dependent data                       mr: float[100]  --> the default independent
        data                                      The field named in the ``signal``
        attribute **must** exist, either                   directly as a dataset or
        defined through a link.                                  * The group ``axes``
        attribute will name the                   *dimension scale* associated with the
        plottable data.

        If available, the standard deviations of the data are to be                 stored
        in a data set of the same rank and dimensions, with the name ``errors``.

        * For each data dimension, there should be a one-dimensional array
        of the same length.                 * These one-dimensional arrays are the
        *dimension scales* of the                   data,  *i.e*. the values of the
        independent variables at which the data                   is measured, such as
        scattering angle or energy transfer.                                  .. index::
        link                 .. index:: axes (attribute)
        The preferred method to associate each data dimension with                 its
        respective dimension scale is to specify the field name                 of each
        dimension scale in the group ``axes`` attribute as a string list.
        Here is an example for a 2-D data set *data* plotted                  against
        *time*, and *pressure*.  (An additional *temperature* data set                  is
        provided and could be selected as an alternate for the *pressure* axis.)::

        data_2d:NXdata                     @signal="data"
        @axes=["time", "pressure"]                     @pressure_indices=1
        @temperature_indices=1                     @time_indices=0
        data: float[1000,20]                     pressure: float[20]
        temperature: float[20]                     time: float[1000]

        .. rubric:: Old methods to identify the plottable data
        There are two older methods of associating                  each data dimension to
        its respective dimension scale.                 Both are now out of date and
        should not be used when writing new data files.                 However, client
        software should expect to see data files                 written with any of these
        methods.                                    * One method uses the ``axes``
        attribute to specify the names of each *dimension scale*.
        * The oldest method uses the ``axis`` attribute on each
        *dimension scale* to identify                     with an integer the axis whose
        value is the number of the dimension.

        .. index: !plot; axis label                    plot, axis units
        units                    dimension scale

        Each axis of the plot may be labeled with information from the
        dimension scale for that axis.  The optional ``@long_name`` attribute
        is provided as the axis label default.  If ``@long_name`` is not
        defined, then use the name of the dimension scale.  A ``@units`` attribute,
        if available, may be added to the axis label for further description.
        See the section :ref:`Design-Units` for more information.

        .. index: !plot; axis title

        The optional ``title`` field, if available, provides a suggested
        title for the plot.  If no ``title`` field is found in the :ref:`NXdata`
        group, look for a ``title`` field in the parent :ref:`NXentry` group,
        with a fallback to displaying the path to the :ref:`NXdata` group.

        NeXus is about how to find and annotate the data to be plotted
        but not to describe how the data is to be plotted.
        (https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute)
        https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXdata',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_category='base',
        nxp_ignoreExtraFields='true',
        nxp_ignoreExtraAttributes='true',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata',
        nxp_optional='True',
        )
    class nxf_VARIABLE(NXobject):
        '''
            Dimension scale defining an axis of the data.                         Client
            is responsible for defining the dimensions of the data.
            The name of this field may be changed to fit the circumstances.
            Standard NeXus client tools will use the attributes to determine
            how to use this field.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_long_name(NXobject):
            '''
Axis label
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-long-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_long_name = SubSection(sub_section=nxa_long_name.m_def,repeats=True,
            nxp_name='long_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-long-name-attribute',
            nxp_optional='True',
            )
        class nxa_distribution(NXobject):
            '''
                ``0|false``: single value,                                  ``1|true``:
                multiple values
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-distribution-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxa_distribution = SubSection(sub_section=nxa_distribution.m_def,repeats=True,
            nxp_name='distribution',
            nxp_type='NX_BOOLEAN',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-distribution-attribute',
            nxp_optional='True',
            )
        class nxa_first_good(NXobject):
            '''
Index of first good value
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-first-good-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxa_first_good = SubSection(sub_section=nxa_first_good.m_def,repeats=True,
            nxp_name='first_good',
            nxp_type='NX_INT',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-first-good-attribute',
            nxp_optional='True',
            )
        class nxa_last_good(NXobject):
            '''
Index of last good value
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-last-good-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxa_last_good = SubSection(sub_section=nxa_last_good.m_def,repeats=True,
            nxp_name='last_good',
            nxp_type='NX_INT',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-last-good-attribute',
            nxp_optional='True',
            )
        class nxa_axis(NXobject):
            '''
                Index (positive integer) identifying this specific set of numbers.
                N.B. The ``axis`` attribute is the old way of designating a link.
                Do not use the ``axes`` attribute with the ``axis`` attribute.
                The ``axes`` *group* attribute is now preferred.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-axis-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxa_axis = SubSection(sub_section=nxa_axis.m_def,repeats=True,
            nxp_name='axis',
            nxp_type='NX_POSINT',
            deprecated=''' DEPRECATED:
            Use the group ``axes`` attribute   (NIAC2014)
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-axis-attribute',
            nxp_optional='True',
            )
    nxf_VARIABLE = SubSection(sub_section=nxf_VARIABLE.m_def,repeats=True,
        nxp_name='VARIABLE',
        nxp_type='NX_NUMBER',
        nxp_nameType='any',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-field',
        nxp_optional='True',
        )
    class nxf_VARIABLE_errors(NXobject):
        '''
            "Errors" (actually *uncertainties*) associated with axis ``VARIABLE``.
            Client is responsible for defining the dimensions of the data.
            The name of this field may be changed to fit the circumstances
            but is matched with the *VARIABLE* field with ``_errors`` appended.
            This pattern of using ``VARIABLE_errors`` can be used
            throughout a NeXus data file to associate uncertainties
            with a dataset named ``VARIABLE``.  This pattern also
            applies to other relationships such as ``VARIABLE_resolutions``
            to connect additional data with a certain dataset.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_VARIABLE_errors = SubSection(sub_section=nxf_VARIABLE_errors.m_def,repeats=True,
        nxp_name='VARIABLE_errors',
        nxp_type='NX_NUMBER',
        nxp_nameType='any',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-errors-field',
        nxp_optional='True',
        )
    class nxf_DATA(NXobject):
        '''
            .. index:: plotting                                          This field
            contains the data values to be used as the                          NeXus
            *plottable data*.                         Client is responsible for defining
            the dimensions of the data.                         The name of this field may
            be changed to fit the circumstances.                         Standard NeXus
            client tools will use the attributes to determine                         how
            to use this field.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_signal(NXobject):
            '''
                .. index:: plotting                                          Plottable
                (independent) axis, indicate index number.
                Only one field in a :ref:`NXdata` group may have the
                ``signal=1`` attribute.                                 Do not use the
                ``signal`` attribute with the ``axis`` attribute.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-signal-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
            nxp_name='signal',
            nxp_type='NX_POSINT',
            deprecated=''' DEPRECATED:
            Use the group ``signal`` attribute   (NIAC2014)
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-signal-attribute',
            nxp_optional='True',
            )
        class nxa_axes(NXobject):
            '''
                Defines the names of the dimension scales
                (independent axes) for this data set                                 as a
                colon-delimited array.                                 NOTE: The ``axes``
                attribute is the preferred                                 method of
                designating a link.                                 Do not use the
                ``axes`` attribute with the ``axis`` attribute.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-axes-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_axes = SubSection(sub_section=nxa_axes.m_def,repeats=True,
            nxp_name='axes',
            deprecated=''' DEPRECATED:
            Use the group ``axes`` attribute   (NIAC2014)
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-axes-attribute',
            nxp_optional='True',
            )
        class nxa_long_name(NXobject):
            '''
data label
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-long-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_long_name = SubSection(sub_section=nxa_long_name.m_def,repeats=True,
            nxp_name='long_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-long-name-attribute',
            nxp_optional='True',
            )
    nxf_DATA = SubSection(sub_section=nxf_DATA.m_def,repeats=True,
        nxp_name='DATA',
        nxp_type='NX_NUMBER',
        nxp_nameType='any',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-field',
        nxp_optional='True',
        )
    class nxf_errors(NXobject):
        '''
            Standard deviations of data values -                          the data array
            is identified by the group attribute ``signal``.                          The
            ``errors`` array must have the same dimensions as ``data``.
            Client is responsible for defining the dimensions of the data.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_errors = SubSection(sub_section=nxf_errors.m_def,repeats=True,
        nxp_name='errors',
        nxp_type='NX_NUMBER',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-errors-field',
        nxp_optional='True',
        )
    class nxf_scaling_factor(NXobject):
        '''
            The elements in data are usually float values really. For
            efficiency reasons these are usually stored as integers
            after scaling with a scale factor. This value is the scale
            factor. It is required to get the actual physical value,
            when necessary.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-scaling-factor-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_scaling_factor = SubSection(sub_section=nxf_scaling_factor.m_def,repeats=True,
        nxp_name='scaling_factor',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-scaling-factor-field',
        nxp_optional='True',
        )
    class nxf_offset(NXobject):
        '''
            An optional offset to apply to the values in data.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-offset-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_offset = SubSection(sub_section=nxf_offset.m_def,repeats=True,
        nxp_name='offset',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-offset-field',
        nxp_optional='True',
        )
    class nxf_title(NXobject):
        '''
            Title for the plot.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-title-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
        nxp_name='title',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-title-field',
        nxp_optional='True',
        )
    class nxf_x(NXobject):
        '''
            This is an array holding the values to use for the x-axis of
            data.  The units must be appropriate for the measurement.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_x = SubSection(sub_section=nxf_x.m_def,repeats=True,
        nxp_name='x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-x-field',
        nxp_optional='True',
        )
    class nxf_y(NXobject):
        '''
            This is an array holding the values to use for the y-axis of
            data.  The units must be appropriate for the measurement.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_y = SubSection(sub_section=nxf_y.m_def,repeats=True,
        nxp_name='y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-y-field',
        nxp_optional='True',
        )
    class nxf_z(NXobject):
        '''
            This is an array holding the values to use for the z-axis of
            data.  The units must be appropriate for the measurement.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-z-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_z = SubSection(sub_section=nxf_z.m_def,repeats=True,
        nxp_name='z',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-z-field',
        nxp_optional='True',
        )
    class nxa_auxiliary_signals(NXobject):
        '''
            .. index:: plotting                                                  Array of
            strings holding the names of additional signals to                         be
            plotted with the default signal (specified by the
            ``signal`` attribute).  Each auxiliary signal needs to be of
            the same shape as the default signal.
            ..  NIAC2018:
            https://www.nexusformat.org/NIAC2018Minutes.html
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-auxiliary-signals-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_auxiliary_signals = SubSection(sub_section=nxa_auxiliary_signals.m_def,repeats=True,
        nxp_name='auxiliary_signals',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-auxiliary-signals-attribute',
        nxp_optional='True',
        )
    class nxa_signal(NXobject):
        '''
            .. index:: plotting                                                  Declares
            which dataset is the default.                          The value is the name
            of the dataset to be plotted.                         A field of this name
            *must* exist (either as dataset                          or as a link to a
            dataset).                                                  It is recommended
            (as of NIAC2014) to use this attribute                         rather than
            adding a signal attribute to the dataset.                         See
            https://www.nexusformat.org/2014_How_to_find_default_data.html
            for a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-signal-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
        nxp_name='signal',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-signal-attribute',
        nxp_optional='True',
        )
    class nxa_axes(NXobject):
        '''
            .. index:: plotting                                                  String
            array that defines the independent data fields used in
            the default plot for all of the dimensions of the *signal* field
            (the *signal* field is the field in this group that is named by
            the ``signal`` attribute of this group).                          One entry is
            provided for every dimension in the *signal* field.
            The field(s) named as values (known as "axes") of this attribute
            *must* exist. An axis slice is specified using a field named
            ``AXISNAME_indices`` as described below (where the text shown here
            as ``AXISNAME`` is to be replaced by the actual field name).
            When no default axis is available for a particular dimension
            of the plottable data, use a "." in that position.
            Such as::
            @axes=["time", ".", "."]
            Since there are three items in the list, the the *signal* field
            must must be a three-dimensional array (rank=3).  The first dimension
            is described by the values of a one-dimensional array named ``time``
            while the other two dimensions have no fields to be used as dimension scales.
            See examples provided on the NeXus wiki:
            https://www.nexusformat.org/2014_axes_and_uncertainties.html
            If there are no axes at all (such as with a stack of images),
            the axes attribute can be omitted.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-axes-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_axes = SubSection(sub_section=nxa_axes.m_def,repeats=True,
        nxp_name='axes',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-axes-attribute',
        nxp_optional='True',
        )
    class nxa_AXISNAME_indices(NXobject):
        '''
            Each ``AXISNAME_indices`` attribute indicates the dependency
            relationship of the ``AXISNAME`` field (where ``AXISNAME``
            is the name of a field that exists in this ``NXdata`` group)
            with one or more dimensions of the plottable data.
            Integer array that defines the indices of the *signal* field
            (that field will be a multidimensional array)                         which
            need to be used in the *AXISNAME* dataset in                          order to
            reference the corresponding axis value.
            The first index of an array is ``0`` (zero).
            Here, *AXISNAME* is to be replaced by the name of each
            field described in the ``axes`` attribute.                           An
            example with 2-D data, :math:`d(t,P)`, will illustrate::
            data_2d:NXdata                                 @signal="data"
            @axes=["time", "pressure"]                                 @time_indices=0
            @pressure_indices=1                                 data: float[1000,20]
            time: float[1000]                                 pressure: float[20]
            This attribute is to be provided in all situations.
            However, if the indices attributes are missing                          (such
            as for data files written before this specification),
            file readers are encouraged to make their best efforts
            to plot the data.                                Thus the implementation of
            the                          ``AXISNAME_indices`` attribute is based on the
            model of                          "strict writer, liberal reader".
            .. note::  Attributes potentially containing multiple values
            (axes and _indices) are to be written as string or integer arrays,
            to avoid string parsing in reading applications.
            https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-axisname-indices-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_AXISNAME_indices = SubSection(sub_section=nxa_AXISNAME_indices.m_def,repeats=True,
        nxp_name='AXISNAME_indices',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-axisname-indices-attribute',
        nxp_optional='True',
        )

class NXshape(NXobject):
    '''
        legacy class - (used by :ref:`NXgeometry`) - the shape and size of a component.
        This is the description of the general shape and size of a
        component, which may be made up of ``numobj`` separate                  elements -
        it is used by the :ref:`NXgeometry` class
        https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXshape',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape',
        nxp_optional='True',
        )
    class nxf_shape(NXobject):
        '''
general shape of a component  Possible values:
            ['nxflat','nxcylinder','nxbox','nxsphere','nxcone','nxelliptical','nxtoroidal','nxparabolic','nxpolynomial']

            https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-shape-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_shape = SubSection(sub_section=nxf_shape.m_def,repeats=True,
        nxp_name='shape',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-shape-field',
        nxp_optional='True',
        enumeration=['nxflat','nxcylinder','nxbox','nxsphere','nxcone','nxelliptical','nxtoroidal','nxparabolic','nxpolynomial'],
        )
    class nxf_size(NXobject):
        '''
            physical extent of the object along its local axes (after NXorientation)
            with the center of mass at the local origin (after NXtranslation).
            The meaning and location of these axes will vary according to the value
            of the "shape" variable.                          ``nshapepar`` defines how
            many parameters:

            - For "nxcylinder" type the parameters are (diameter,height) and a three value
            orientation vector of the cylinder.                          - For the "nxbox"
            type the parameters are (length,width,height).                          - For
            the "nxsphere" type the parameters are (diameter).                         -
            For nxcone cone half aperture                         - For nxelliptical,
            semi-major axis, semi-minor-axis, angle of major axis and pole
            - For nxtoroidal, major radius, minor radius                         - For
            nxparabolic, parabolic parameter a                         - For nxpolynomial,
            an array of polynom coefficients, the dimension of the array
            encodes the degree of the polynom
            https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-size-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_size = SubSection(sub_section=nxf_size.m_def,repeats=True,
        nxp_name='size',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-size-field',
        nxp_optional='True',
        )
    class nxf_direction(NXobject):
        '''
            Possible values:    ['concave','convex']

            https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-direction-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_direction = SubSection(sub_section=nxf_direction.m_def,repeats=True,
        nxp_name='direction',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-direction-field',
        nxp_optional='True',
        enumeration=['concave','convex'],
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-default-attribute',
        nxp_optional='True',
        )

class NXlog(NXobject):
    '''
        Information recorded as a function of time.

        Description of information that is recorded against                 time. There
        are two common use cases for this:

        - When logging data such as temperature during a run                 - When data
        is taken in streaming mode data acquisition,                   i.e. just
        timestamp, value pairs are stored and                   correlated later in data
        reduction with other data,

        In both cases, NXlog contains                 the logged or streamed  values and
        the times at which they were measured as elapsed time since a starting
        time recorded in ISO8601 format. The time units are                 specified in
        the units attribute. An optional scaling attribute                 can be used to
        accomodate non standard clocks.

        This method of storing logged data helps to distinguish                 instances
        in which a variable is a dimension scale of the data, in which case it is stored
        in an :ref:`NXdata` group, and instances in which it is logged during the
        run, when it should be stored in an :ref:`NXlog` group.

        In order to make random access to timestamped data faster there is an optional
        array pair of                 ``cue_timestamp_zero`` and ``cue_index``. The
        ``cue_timestamp_zero`` will                 contain coarser timestamps than in the
        time array, say                 every five minutes. The ``cue_index`` will then
        contain the                 index into the time,value pair of arrays for that
        coarser ``cue_timestamp_zero``.

        https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXlog',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_category='base',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog',
        nxp_optional='True',
        )
    class nxf_time(NXobject):
        '''
            Time of logged entry. The times are relative to the "start" attribute
            and in the units specified in the "units"                         attribute.
            Please note that absolute                         timestamps under unix are
            relative to ``1970-01-01T00:00:00.0Z``.

            The scaling_factor, when present, has to be applied to the time values in
            order                         to arrive at the units specified in the units
            attribute. The scaling_factor allows                         for arbitrary
            time units such as ticks of some hardware clock.
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_start(NXobject):
            '''
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-start-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxa_start = SubSection(sub_section=nxa_start.m_def,repeats=True,
            nxp_name='start',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-start-attribute',
            nxp_optional='True',
            )
        class nxa_scaling_factor(NXobject):
            '''
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-scaling-factor-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_scaling_factor = SubSection(sub_section=nxa_scaling_factor.m_def,repeats=True,
            nxp_name='scaling_factor',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-scaling-factor-attribute',
            nxp_optional='True',
            )
    nxf_time = SubSection(sub_section=nxf_time.m_def,repeats=True,
        nxp_name='time',
        nxp_type='NX_NUMBER',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-field',
        nxp_optional='True',
        )
    class nxf_value(NXobject):
        '''
            Array of logged value, such as temperature. If this is             a single
            value the dimensionality is             nEntries. However, NXlog can also be
            used to store             multi dimensional time stamped data such as images.
            In             this example the dimensionality of values would be
            value[nEntries,xdim,ydim].
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
        nxp_name='value',
        nxp_units='NX_ANY',
        nxp_type='NX_NUMBER',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-value-field',
        nxp_optional='True',
        )
    class nxf_raw_value(NXobject):
        '''
Array of raw information, such as thermocouple voltage
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-raw-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_raw_value = SubSection(sub_section=nxf_raw_value.m_def,repeats=True,
        nxp_name='raw_value',
        nxp_units='NX_ANY',
        nxp_type='NX_NUMBER',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-raw-value-field',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
Description of logged value
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-description-field',
        nxp_optional='True',
        )
    class nxf_average_value(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_average_value = SubSection(sub_section=nxf_average_value.m_def,repeats=True,
        nxp_name='average_value',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-field',
        nxp_optional='True',
        )
    class nxf_average_value_error(NXobject):
        '''
estimated uncertainty (often used: standard deviation) of average_value
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-error-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_average_value_error = SubSection(sub_section=nxf_average_value_error.m_def,repeats=True,
        nxp_name='average_value_error',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        deprecated=''' DEPRECATED:
        see: https://github.com/nexusformat/definitions/issues/639
        ''',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-error-field',
        nxp_optional='True',
        )
    class nxf_average_value_errors(NXobject):
        '''
estimated uncertainty (often used: standard deviation) of average_value
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_average_value_errors = SubSection(sub_section=nxf_average_value_errors.m_def,repeats=True,
        nxp_name='average_value_errors',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-errors-field',
        nxp_optional='True',
        )
    class nxf_minimum_value(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-minimum-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_minimum_value = SubSection(sub_section=nxf_minimum_value.m_def,repeats=True,
        nxp_name='minimum_value',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-minimum-value-field',
        nxp_optional='True',
        )
    class nxf_maximum_value(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-maximum-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_maximum_value = SubSection(sub_section=nxf_maximum_value.m_def,repeats=True,
        nxp_name='maximum_value',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-maximum-value-field',
        nxp_optional='True',
        )
    class nxf_duration(NXobject):
        '''
Total time log was taken
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-duration-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
        nxp_name='duration',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-duration-field',
        nxp_optional='True',
        )
    class nxf_cue_timestamp_zero(NXobject):
        '''
            Timestamps matching the corresponding cue_index into the             time,
            value pair.
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_start(NXobject):
            '''
If missing start is assumed to be the same as for "time".
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-start-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxa_start = SubSection(sub_section=nxa_start.m_def,repeats=True,
            nxp_name='start',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-start-attribute',
            nxp_optional='True',
            )
        class nxa_scaling_factor(NXobject):
            '''
If missing start is assumed to be the same as for "time".
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-scaling-factor-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_scaling_factor = SubSection(sub_section=nxa_scaling_factor.m_def,repeats=True,
            nxp_name='scaling_factor',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-scaling-factor-attribute',
            nxp_optional='True',
            )
    nxf_cue_timestamp_zero = SubSection(sub_section=nxf_cue_timestamp_zero.m_def,repeats=True,
        nxp_name='cue_timestamp_zero',
        nxp_type='NX_NUMBER',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-field',
        nxp_optional='True',
        )
    class nxf_cue_index(NXobject):
        '''
            Index into the time, value pair matching the corresponding
            cue_timestamp_zero.
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-index-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_cue_index = SubSection(sub_section=nxf_cue_index.m_def,repeats=True,
        nxp_name='cue_index',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-index-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-default-attribute',
        nxp_optional='True',
        )

class NXpolarizer(NXobject):
    '''
        A spin polarizer.
        https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXpolarizer',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
one of these values: "crystal", "supermirror", "3He"
            https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-type-field',
        nxp_optional='True',
        )
    class nxf_composition(NXobject):
        '''
description of the composition of the polarizing material
            https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-composition-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_composition = SubSection(sub_section=nxf_composition.m_def,repeats=True,
        nxp_name='composition',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-composition-field',
        nxp_optional='True',
        )
    class nxf_reflection(NXobject):
        '''
[hkl] values of nominal reflection
            https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-reflection-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_reflection = SubSection(sub_section=nxf_reflection.m_def,repeats=True,
        nxp_name='reflection',
        nxp_type='NX_INT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-reflection-field',
        nxp_optional='True',
        )
    class nxf_efficiency(NXobject):
        '''
polarizing efficiency
            https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-efficiency-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_efficiency = SubSection(sub_section=nxf_efficiency.m_def,repeats=True,
        nxp_name='efficiency',
        nxp_type='NX_FLOAT',
        nxp_units='NX_DIMENSIONLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-efficiency-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-default-attribute',
        nxp_optional='True',
        )

class NXreflections(NXobject):
    '''
Reflection data from diffraction experiments
        https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_type='group',
        nxp_name='NXreflections',
        nxp_category='base',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections',
        nxp_optional='True',
        )
    class nxf_experiments(NXobject):
        '''
The experiments from which the reflection data derives
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-experiments-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_experiments = SubSection(sub_section=nxf_experiments.m_def,repeats=True,
        nxp_name='experiments',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-experiments-field',
        nxp_required='True',
        )
    class nxf_h(NXobject):
        '''
The h component of the miller index
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-h-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-h-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-h-description-attribute',
            nxp_optional='True',
            )
    nxf_h = SubSection(sub_section=nxf_h.m_def,repeats=True,
        nxp_name='h',
        nxp_type='NX_NUMBER',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-h-field',
        nxp_required='True',
        )
    class nxf_k(NXobject):
        '''
The k component of the miller index
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-k-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-k-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-k-description-attribute',
            nxp_optional='True',
            )
    nxf_k = SubSection(sub_section=nxf_k.m_def,repeats=True,
        nxp_name='k',
        nxp_type='NX_NUMBER',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-k-field',
        nxp_required='True',
        )
    class nxf_l(NXobject):
        '''
The l component of the miller index
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-l-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-l-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-l-description-attribute',
            nxp_optional='True',
            )
    nxf_l = SubSection(sub_section=nxf_l.m_def,repeats=True,
        nxp_name='l',
        nxp_type='NX_NUMBER',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-l-field',
        nxp_required='True',
        )
    class nxf_id(NXobject):
        '''
            The id of the experiment which resulted in the reflection. If the value
            is greater than 0, the experiments must link to a multi-experiment NXmx
            group
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-id-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-id-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-id-description-attribute',
            nxp_optional='True',
            )
    nxf_id = SubSection(sub_section=nxf_id.m_def,repeats=True,
        nxp_name='id',
        nxp_type='NX_INT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-id-field',
        nxp_required='True',
        )
    class nxf_reflection_id(NXobject):
        '''
            The id of the reflection. Multiple partials from the same reflection
            should all have the same id
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-reflection-id-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-reflection-id-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-reflection-id-description-attribute',
            nxp_optional='True',
            )
    nxf_reflection_id = SubSection(sub_section=nxf_reflection_id.m_def,repeats=True,
        nxp_name='reflection_id',
        nxp_type='NX_INT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-reflection-id-field',
        nxp_required='True',
        )
    class nxf_entering(NXobject):
        '''
Is the reflection entering or exiting the Ewald sphere
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-entering-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-entering-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-entering-description-attribute',
            nxp_optional='True',
            )
    nxf_entering = SubSection(sub_section=nxf_entering.m_def,repeats=True,
        nxp_name='entering',
        nxp_type='NX_BOOLEAN',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-entering-field',
        nxp_required='True',
        )
    class nxf_det_module(NXobject):
        '''
The detector module on which the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-det-module-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-det-module-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-det-module-description-attribute',
            nxp_optional='True',
            )
    nxf_det_module = SubSection(sub_section=nxf_det_module.m_def,repeats=True,
        nxp_name='det_module',
        nxp_type='NX_INT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-det-module-field',
        nxp_required='True',
        )
    class nxf_flags(NXobject):
        '''
            Status flags describing the reflection.               This is a bit mask. The
            bits in the mask follow the convention        used by DIALS, and have the
            following names:              ===   ==========================================
            bit   name       ===   ==========================================       0
            ``predicted``       1     ``observed``       2     ``indexed``       3
            ``used_in_refinement``       4     ``strong``       5     ``reference_spot``
            6     ``dont_integrate``       7     ``integrated_sum``       8
            ``integrated_prf``       9     ``integrated``       10    ``overloaded``
            11    ``overlapped``       12    ``overlapped_fg``       13
            ``in_powder_ring``       14    ``foreground_includes_bad_pixels``       15
            ``background_includes_bad_pixels``       16    ``includes_bad_pixels``
            17    ``bad_shoebox``       18    ``bad_spot``       19
            ``used_in_modelling``       20    ``centroid_outlier``       21
            ``failed_during_background_modelling``       22    ``failed_during_summation``
            23    ``failed_during_profile_fitting``       24    ``bad_reference``
            ===   ==========================================
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-flags-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-flags-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-flags-description-attribute',
            nxp_optional='True',
            )
    nxf_flags = SubSection(sub_section=nxf_flags.m_def,repeats=True,
        nxp_name='flags',
        nxp_type='NX_INT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-flags-field',
        nxp_required='True',
        )
    class nxf_d(NXobject):
        '''
The resolution of the reflection
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-d-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-d-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-d-description-attribute',
            nxp_optional='True',
            )
    nxf_d = SubSection(sub_section=nxf_d.m_def,repeats=True,
        nxp_name='d',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-d-field',
        nxp_required='True',
        )
    class nxf_partiality(NXobject):
        '''
            The partiality of the reflection.        Dividing by this number will inflate
            the measured        intensity to the full reflection equivalent.
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-partiality-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-partiality-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-partiality-description-attribute',
            nxp_optional='True',
            )
    nxf_partiality = SubSection(sub_section=nxf_partiality.m_def,repeats=True,
        nxp_name='partiality',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-partiality-field',
        nxp_required='True',
        )
    class nxf_predicted_frame(NXobject):
        '''
            The frame on which the bragg peak of the reflection is predicted
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-frame-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-frame-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-frame-description-attribute',
            nxp_optional='True',
            )
    nxf_predicted_frame = SubSection(sub_section=nxf_predicted_frame.m_def,repeats=True,
        nxp_name='predicted_frame',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-frame-field',
        nxp_required='True',
        )
    class nxf_predicted_x(NXobject):
        '''
            The x position at which the bragg peak of the reflection       is predicted
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-x-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-x-description-attribute',
            nxp_optional='True',
            )
    nxf_predicted_x = SubSection(sub_section=nxf_predicted_x.m_def,repeats=True,
        nxp_name='predicted_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-x-field',
        nxp_required='True',
        )
    class nxf_predicted_y(NXobject):
        '''
            The y position at which the bragg peak of the reflection       is predicted
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-y-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-y-description-attribute',
            nxp_optional='True',
            )
    nxf_predicted_y = SubSection(sub_section=nxf_predicted_y.m_def,repeats=True,
        nxp_name='predicted_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-y-field',
        nxp_required='True',
        )
    class nxf_predicted_phi(NXobject):
        '''
            The phi angle at which the bragg peak of the reflection is predicted
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-phi-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-phi-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-phi-description-attribute',
            nxp_optional='True',
            )
    nxf_predicted_phi = SubSection(sub_section=nxf_predicted_phi.m_def,repeats=True,
        nxp_name='predicted_phi',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-phi-field',
        nxp_required='True',
        )
    class nxf_predicted_px_x(NXobject):
        '''
            The x pixel position at which the bragg peak of the reflection is
            predicted
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-x-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-x-description-attribute',
            nxp_optional='True',
            )
    nxf_predicted_px_x = SubSection(sub_section=nxf_predicted_px_x.m_def,repeats=True,
        nxp_name='predicted_px_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-x-field',
        nxp_required='True',
        )
    class nxf_predicted_px_y(NXobject):
        '''
            The y pixel position at which the bragg peak of the reflection is
            predicted
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-y-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-y-description-attribute',
            nxp_optional='True',
            )
    nxf_predicted_px_y = SubSection(sub_section=nxf_predicted_px_y.m_def,repeats=True,
        nxp_name='predicted_px_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-y-field',
        nxp_required='True',
        )
    class nxf_observed_frame(NXobject):
        '''
            The estimate of the frame at which the central impact of the       reflection
            was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_frame = SubSection(sub_section=nxf_observed_frame.m_def,repeats=True,
        nxp_name='observed_frame',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-field',
        nxp_required='True',
        )
    class nxf_observed_frame_var(NXobject):
        '''
            The variance on the estimate of the frame at which the central       impact of
            the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-var-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-var-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-var-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_frame_var = SubSection(sub_section=nxf_observed_frame_var.m_def,repeats=True,
        nxp_name='observed_frame_var',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-var-field',
        nxp_required='True',
        )
    class nxf_observed_frame_errors(NXobject):
        '''
            The standard deviation of the estimate of the frame at which the central
            impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-errors-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-errors-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_frame_errors = SubSection(sub_section=nxf_observed_frame_errors.m_def,repeats=True,
        nxp_name='observed_frame_errors',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-errors-field',
        nxp_required='True',
        )
    class nxf_observed_px_x(NXobject):
        '''
            The estimate of the pixel x position at which the central impact of       the
            reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_px_x = SubSection(sub_section=nxf_observed_px_x.m_def,repeats=True,
        nxp_name='observed_px_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-field',
        nxp_required='True',
        )
    class nxf_observed_px_x_var(NXobject):
        '''
            The variance on the estimate of the pixel x position at which the
            central impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-var-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-var-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-var-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_px_x_var = SubSection(sub_section=nxf_observed_px_x_var.m_def,repeats=True,
        nxp_name='observed_px_x_var',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-var-field',
        nxp_required='True',
        )
    class nxf_observed_px_x_errors(NXobject):
        '''
            The standard deviation of the estimate of the pixel x position at which the
            central impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-errors-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-errors-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_px_x_errors = SubSection(sub_section=nxf_observed_px_x_errors.m_def,repeats=True,
        nxp_name='observed_px_x_errors',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-errors-field',
        nxp_required='True',
        )
    class nxf_observed_px_y(NXobject):
        '''
            The estimate of the pixel y position at which the central impact of       the
            reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_px_y = SubSection(sub_section=nxf_observed_px_y.m_def,repeats=True,
        nxp_name='observed_px_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-field',
        nxp_required='True',
        )
    class nxf_observed_px_y_var(NXobject):
        '''
            The variance on the estimate of the pixel y position at which the
            central impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-var-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-var-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-var-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_px_y_var = SubSection(sub_section=nxf_observed_px_y_var.m_def,repeats=True,
        nxp_name='observed_px_y_var',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-var-field',
        nxp_required='True',
        )
    class nxf_observed_px_y_errors(NXobject):
        '''
            The standard deviation of the estimate of the pixel y position at which the
            central impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-errors-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-errors-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_px_y_errors = SubSection(sub_section=nxf_observed_px_y_errors.m_def,repeats=True,
        nxp_name='observed_px_y_errors',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-errors-field',
        nxp_required='True',
        )
    class nxf_observed_phi(NXobject):
        '''
            The estimate of the phi angle at which the central impact of the
            reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_phi = SubSection(sub_section=nxf_observed_phi.m_def,repeats=True,
        nxp_name='observed_phi',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-field',
        nxp_required='True',
        )
    class nxf_observed_phi_var(NXobject):
        '''
            The variance on the estimate of the phi angle at which the central
            impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-var-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-var-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-var-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_phi_var = SubSection(sub_section=nxf_observed_phi_var.m_def,repeats=True,
        nxp_name='observed_phi_var',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-var-field',
        nxp_required='True',
        )
    class nxf_observed_phi_errors(NXobject):
        '''
            The standard deviation of the estimate of the phi angle at which the central
            impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-errors-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-errors-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_phi_errors = SubSection(sub_section=nxf_observed_phi_errors.m_def,repeats=True,
        nxp_name='observed_phi_errors',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-errors-field',
        nxp_required='True',
        )
    class nxf_observed_x(NXobject):
        '''
            The estimate of the x position at which the central       impact of the
            reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_x = SubSection(sub_section=nxf_observed_x.m_def,repeats=True,
        nxp_name='observed_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-field',
        nxp_required='True',
        )
    class nxf_observed_x_var(NXobject):
        '''
            The variance on the estimate of the x position at which       the central
            impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-var-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-var-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-var-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_x_var = SubSection(sub_section=nxf_observed_x_var.m_def,repeats=True,
        nxp_name='observed_x_var',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-var-field',
        nxp_required='True',
        )
    class nxf_observed_x_errors(NXobject):
        '''
            The standard deviation of the estimate of the x position at which       the
            central impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-errors-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-errors-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_x_errors = SubSection(sub_section=nxf_observed_x_errors.m_def,repeats=True,
        nxp_name='observed_x_errors',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-errors-field',
        nxp_required='True',
        )
    class nxf_observed_y(NXobject):
        '''
            The estimate of the y position at which the central       impact of the
            reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_y = SubSection(sub_section=nxf_observed_y.m_def,repeats=True,
        nxp_name='observed_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-field',
        nxp_required='True',
        )
    class nxf_observed_y_var(NXobject):
        '''
            The variance on the estimate of the y position at which       the central
            impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-var-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-var-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-var-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_y_var = SubSection(sub_section=nxf_observed_y_var.m_def,repeats=True,
        nxp_name='observed_y_var',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-var-field',
        nxp_required='True',
        )
    class nxf_observed_y_errors(NXobject):
        '''
            The standard deviation of the estimate of the y position at which       the
            central impact of the reflection was recorded
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-errors-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-errors-description-attribute',
            nxp_optional='True',
            )
    nxf_observed_y_errors = SubSection(sub_section=nxf_observed_y_errors.m_def,repeats=True,
        nxp_name='observed_y_errors',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-errors-field',
        nxp_required='True',
        )
    class nxf_bounding_box(NXobject):
        '''
            The bounding box around the recorded recorded reflection.        Should be an
            integer array of length 6, where the 6 values        are pixel positions or
            frame numbers, as follows:              =====  ===========================
            index  meaning       =====  ===========================       0      The lower
            pixel x position       1      The upper pixel x position       2      The
            lower pixel y position       3      The upper pixel y position       4
            The lower frame number       5      The upper frame number       =====
            ===========================
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-bounding-box-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-bounding-box-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-bounding-box-description-attribute',
            nxp_optional='True',
            )
    nxf_bounding_box = SubSection(sub_section=nxf_bounding_box.m_def,repeats=True,
        nxp_name='bounding_box',
        nxp_type='NX_INT',
        nxp_units='NX_UNITLESS',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-bounding-box-field',
        nxp_required='True',
        )
    class nxf_background_mean(NXobject):
        '''
            The mean background under the reflection peak
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-background-mean-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-background-mean-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-background-mean-description-attribute',
            nxp_optional='True',
            )
    nxf_background_mean = SubSection(sub_section=nxf_background_mean.m_def,repeats=True,
        nxp_name='background_mean',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-background-mean-field',
        nxp_required='True',
        )
    class nxf_int_prf(NXobject):
        '''
            The estimate of the reflection intensity by profile fitting
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-description-attribute',
            nxp_optional='True',
            )
    nxf_int_prf = SubSection(sub_section=nxf_int_prf.m_def,repeats=True,
        nxp_name='int_prf',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-field',
        nxp_optional='True',
        )
    class nxf_int_prf_var(NXobject):
        '''
            The variance on the estimate of the reflection intensity by profile
            fitting
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-var-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-var-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-var-description-attribute',
            nxp_optional='True',
            )
    nxf_int_prf_var = SubSection(sub_section=nxf_int_prf_var.m_def,repeats=True,
        nxp_name='int_prf_var',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-var-field',
        nxp_optional='True',
        )
    class nxf_int_prf_errors(NXobject):
        '''
            The standard deviation of the estimate of the reflection intensity by profile
            fitting
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-errors-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-errors-description-attribute',
            nxp_optional='True',
            )
    nxf_int_prf_errors = SubSection(sub_section=nxf_int_prf_errors.m_def,repeats=True,
        nxp_name='int_prf_errors',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-errors-field',
        nxp_optional='True',
        )
    class nxf_int_sum(NXobject):
        '''
The estimate of the reflection intensity by summation
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-description-attribute',
            nxp_optional='True',
            )
    nxf_int_sum = SubSection(sub_section=nxf_int_sum.m_def,repeats=True,
        nxp_name='int_sum',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-field',
        nxp_required='True',
        )
    class nxf_int_sum_var(NXobject):
        '''
            The variance on the estimate of the reflection intensity by       summation
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-var-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-var-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-var-description-attribute',
            nxp_optional='True',
            )
    nxf_int_sum_var = SubSection(sub_section=nxf_int_sum_var.m_def,repeats=True,
        nxp_name='int_sum_var',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-var-field',
        nxp_required='True',
        )
    class nxf_int_sum_errors(NXobject):
        '''
            The standard deviation of the estimate of the reflection intensity by
            summation
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-errors-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-errors-description-attribute',
            nxp_optional='True',
            )
    nxf_int_sum_errors = SubSection(sub_section=nxf_int_sum_errors.m_def,repeats=True,
        nxp_name='int_sum_errors',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-errors-field',
        nxp_required='True',
        )
    class nxf_lp(NXobject):
        '''
            The LP correction factor to be applied to the reflection intensities
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-lp-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-lp-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-lp-description-attribute',
            nxp_optional='True',
            )
    nxf_lp = SubSection(sub_section=nxf_lp.m_def,repeats=True,
        nxp_name='lp',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-lp-field',
        nxp_required='True',
        )
    class nxf_prf_cc(NXobject):
        '''
            The correlation of the reflection profile with the reference profile
            used in profile fitting
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-prf-cc-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-prf-cc-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-prf-cc-description-attribute',
            nxp_optional='True',
            )
    nxf_prf_cc = SubSection(sub_section=nxf_prf_cc.m_def,repeats=True,
        nxp_name='prf_cc',
        nxp_type='NX_FLOAT',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-prf-cc-field',
        nxp_optional='True',
        )
    class nxf_overlaps(NXobject):
        '''
            An adjacency list specifying the spatial overlaps of reflections. The
            adjacency list is specified using an array data type where the elements
            of the array are the indices of the adjacent overlapped reflection
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-overlaps-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-overlaps-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-overlaps-description-attribute',
            nxp_optional='True',
            )
    nxf_overlaps = SubSection(sub_section=nxf_overlaps.m_def,repeats=True,
        nxp_name='overlaps',
        nxp_type='NX_INT',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-overlaps-field',
        nxp_optional='True',
        )
    class nxf_polar_angle(NXobject):
        '''
            Polar angle of reflection centroid, following the NeXus simple (spherical
            polar) coordinate system
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-polar-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-polar-angle-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-polar-angle-description-attribute',
            nxp_optional='True',
            )
    nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
        nxp_name='polar_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-polar-angle-field',
        nxp_optional='True',
        )
    class nxf_azimuthal_angle(NXobject):
        '''
            Azimuthal angle of reflection centroid, following the NeXus simple (spherical
            polar) coordinate system
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-azimuthal-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
        nxp_name='azimuthal_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-azimuthal-angle-field',
        nxp_optional='True',
        )
    class nxa_description(NXobject):
        '''
Describes the dataset
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-description-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-description-attribute',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-default-attribute',
        nxp_optional='True',
        )

class NXfresnel_zone_plate(NXobject):
    '''
A fresnel zone plate
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXfresnel_zone_plate',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_category='base',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate',
        nxp_optional='True',
        )
    class nxg_TRANSFORMATIONS(NXobject):
        '''
"Engineering" position of the fresnel zone plate
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-transformations-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
    nxg_TRANSFORMATIONS = SubSection(sub_section=nxg_TRANSFORMATIONS.m_def,repeats=True,
        nxp_type='NXtransformations',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-transformations-group',
        nxp_optional='True',
        )
    class nxf_focus_parameters(NXobject):
        '''
            list of polynomial coefficients describing the focal length of the zone plate,
            in increasing powers of photon energy,         that describes the focal length
            of the zone plate (in microns) at an X-ray photon energy (in electron volts).
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-focus-parameters-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_focus_parameters = SubSection(sub_section=nxf_focus_parameters.m_def,repeats=True,
        nxp_name='focus_parameters',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-focus-parameters-field',
        nxp_optional='True',
        )
    class nxf_outer_diameter(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-outer-diameter-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_outer_diameter = SubSection(sub_section=nxf_outer_diameter.m_def,repeats=True,
        nxp_name='outer_diameter',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-outer-diameter-field',
        nxp_optional='True',
        )
    class nxf_outermost_zone_width(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-outermost-zone-width-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_outermost_zone_width = SubSection(sub_section=nxf_outermost_zone_width.m_def,repeats=True,
        nxp_name='outermost_zone_width',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-outermost-zone-width-field',
        nxp_optional='True',
        )
    class nxf_central_stop_diameter(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-diameter-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_central_stop_diameter = SubSection(sub_section=nxf_central_stop_diameter.m_def,repeats=True,
        nxp_name='central_stop_diameter',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-diameter-field',
        nxp_optional='True',
        )
    class nxf_fabrication(NXobject):
        '''
how the zone plate was manufactured  Possible values:
            ['etched','plated','zone doubled','other']

            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-fabrication-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_fabrication = SubSection(sub_section=nxf_fabrication.m_def,repeats=True,
        nxp_name='fabrication',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-fabrication-field',
        nxp_optional='True',
        enumeration=['etched','plated','zone doubled','other'],
        )
    class nxf_zone_height(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-height-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_zone_height = SubSection(sub_section=nxf_zone_height.m_def,repeats=True,
        nxp_name='zone_height',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-height-field',
        nxp_optional='True',
        )
    class nxf_zone_material(NXobject):
        '''
Material of the zones themselves
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_zone_material = SubSection(sub_section=nxf_zone_material.m_def,repeats=True,
        nxp_name='zone_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-material-field',
        nxp_optional='True',
        )
    class nxf_zone_support_material(NXobject):
        '''
Material present between the zones. This is usually only present for the "zone
            doubled" fabrication process
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-support-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_zone_support_material = SubSection(sub_section=nxf_zone_support_material.m_def,repeats=True,
        nxp_name='zone_support_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-support-material-field',
        nxp_optional='True',
        )
    class nxf_central_stop_material(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_central_stop_material = SubSection(sub_section=nxf_central_stop_material.m_def,repeats=True,
        nxp_name='central_stop_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-material-field',
        nxp_optional='True',
        )
    class nxf_central_stop_thickness(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_central_stop_thickness = SubSection(sub_section=nxf_central_stop_thickness.m_def,repeats=True,
        nxp_name='central_stop_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-thickness-field',
        nxp_optional='True',
        )
    class nxf_mask_thickness(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-mask-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_mask_thickness = SubSection(sub_section=nxf_mask_thickness.m_def,repeats=True,
        nxp_name='mask_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-mask-thickness-field',
        nxp_optional='True',
        )
    class nxf_mask_material(NXobject):
        '''
If no mask is present, set mask_thickness to 0 and omit the mask_material
            field
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-mask-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_mask_material = SubSection(sub_section=nxf_mask_material.m_def,repeats=True,
        nxp_name='mask_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-mask-material-field',
        nxp_optional='True',
        )
    class nxf_support_membrane_material(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-support-membrane-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_support_membrane_material = SubSection(sub_section=nxf_support_membrane_material.m_def,repeats=True,
        nxp_name='support_membrane_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-support-membrane-material-field',
        nxp_optional='True',
        )
    class nxf_support_membrane_thickness(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-support-membrane-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_support_membrane_thickness = SubSection(sub_section=nxf_support_membrane_thickness.m_def,repeats=True,
        nxp_name='support_membrane_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-support-membrane-thickness-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-default-attribute',
        nxp_optional='True',
        )

class NXparameters(NXobject):
    '''
Container for parameters, usually used in processing or analysis.
        https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXparameters',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters',
        nxp_optional='True',
        )
    class nxf_term(NXobject):
        '''
A parameter (also known as a term) that is used in or results from processing.
            https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-term-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_units(NXobject):
            '''
                https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-term-units-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
            nxp_name='units',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-term-units-attribute',
            nxp_optional='True',
            )
    nxf_term = SubSection(sub_section=nxf_term.m_def,repeats=True,
        nxp_name='term',
        nxp_minOccurs='0',
        nxp_maxOccurs='unbounded',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-term-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-default-attribute',
        nxp_optional='True',
        )

class NXdetector_module(NXobject):
    '''
        Geometry and logical description of a detector module. When used, child group to
        NXdetector.                                  Many detectors consist of multiple
        smaller modules. Sometimes it is important to know the exact position of such
        modules.                 This is the purpose of this group. It is a child group to
        NXdetector.

        Note, the pixel size is given as values in the array fast_pixel_direction and
        slow_pixel_direction.
        https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXdetector_module',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module',
        nxp_optional='True',
        )
    class nxf_data_origin(NXobject):
        '''
            A dimension-2 or dimension-3 field which gives the indices
            of the origin of the hyperslab of data for this module in the
            main area detector image in the parent NXdetector module.

            The data_origin is 0-based.

            The frame number dimension (np) is omitted.  Thus the
            data_origin field for a dimension-2 dataset with indices (np, i, j)
            will be an array with indices (i, j), and for a dimension-3
            dataset with indices (np, i, j, k) will be an array with indices
            (i, j, k).

            The :ref:`order <Design-ArrayStorageOrder>` of indices (i, j or i, j, k) is
            slow to fast.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-data-origin-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_data_origin = SubSection(sub_section=nxf_data_origin.m_def,repeats=True,
        nxp_name='data_origin',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-data-origin-field',
        nxp_optional='True',
        )
    class nxf_data_size(NXobject):
        '''
            Two or three values for the size of the module in pixels in
            each direction. Dimensionality and order of indices is the
            same as for data_origin.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-data-size-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_data_size = SubSection(sub_section=nxf_data_size.m_def,repeats=True,
        nxp_name='data_size',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-data-size-field',
        nxp_optional='True',
        )
    class nxf_module_offset(NXobject):
        '''
            Offset of the module in regards to the origin of the detector in an
            arbitrary direction.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_transformation_type(NXobject):
            '''
                Obligatory value:    ['translation']

                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-transformation-type-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_transformation_type = SubSection(sub_section=nxa_transformation_type.m_def,repeats=True,
            nxp_name='transformation_type',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-transformation-type-attribute',
            nxp_optional='True',
            enumeration=['translation'],
            )
        class nxa_vector(NXobject):
            '''
                Three values that define the axis for this transformation
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-vector-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_vector = SubSection(sub_section=nxa_vector.m_def,repeats=True,
            nxp_name='vector',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-vector-attribute',
            nxp_optional='True',
            )
        class nxa_offset(NXobject):
            '''
                A fixed offset applied before the transformation (three vector
                components).
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-offset-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_offset = SubSection(sub_section=nxa_offset.m_def,repeats=True,
            nxp_name='offset',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-offset-attribute',
            nxp_optional='True',
            )
        class nxa_offset_units(NXobject):
            '''
                Units of the offset.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-offset-units-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_offset_units = SubSection(sub_section=nxa_offset_units.m_def,repeats=True,
            nxp_name='offset_units',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-offset-units-attribute',
            nxp_optional='True',
            )
        class nxa_depends_on(NXobject):
            '''
                Points to the path of the next element in the geometry chain.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-depends-on-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_depends_on = SubSection(sub_section=nxa_depends_on.m_def,repeats=True,
            nxp_name='depends_on',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-depends-on-attribute',
            nxp_optional='True',
            )
    nxf_module_offset = SubSection(sub_section=nxf_module_offset.m_def,repeats=True,
        nxp_name='module_offset',
        nxp_units='NX_LENGTH',
        nxp_type='NX_NUMBER',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-field',
        nxp_optional='True',
        )
    class nxf_fast_pixel_direction(NXobject):
        '''
            Values along the direction of :ref:`fastest varying
            <Design-ArrayStorageOrder>`  :index:`pixel direction<dimension; fastest
            varying>`. Each value in this                        array is the size of a
            pixel in the units specified. Alternatively, if only one
            value is given, all pixels in this direction have the same value. The
            direction                        itself is given through the vector attribute.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_transformation_type(NXobject):
            '''
                Obligatory value:    ['translation']

                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-transformation-type-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_transformation_type = SubSection(sub_section=nxa_transformation_type.m_def,repeats=True,
            nxp_name='transformation_type',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-transformation-type-attribute',
            nxp_optional='True',
            enumeration=['translation'],
            )
        class nxa_vector(NXobject):
            '''
                Three values that define the axis for this transformation
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-vector-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_vector = SubSection(sub_section=nxa_vector.m_def,repeats=True,
            nxp_name='vector',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-vector-attribute',
            nxp_optional='True',
            )
        class nxa_offset(NXobject):
            '''
                A fixed offset applied before the transformation (three vector
                components).
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-offset-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_offset = SubSection(sub_section=nxa_offset.m_def,repeats=True,
            nxp_name='offset',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-offset-attribute',
            nxp_optional='True',
            )
        class nxa_offset_units(NXobject):
            '''
                Units of the offset.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-offset-units-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_offset_units = SubSection(sub_section=nxa_offset_units.m_def,repeats=True,
            nxp_name='offset_units',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-offset-units-attribute',
            nxp_optional='True',
            )
        class nxa_depends_on(NXobject):
            '''
                Points to the path of the next element in the geometry chain.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-depends-on-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_depends_on = SubSection(sub_section=nxa_depends_on.m_def,repeats=True,
            nxp_name='depends_on',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-depends-on-attribute',
            nxp_optional='True',
            )
    nxf_fast_pixel_direction = SubSection(sub_section=nxf_fast_pixel_direction.m_def,repeats=True,
        nxp_name='fast_pixel_direction',
        nxp_units='NX_LENGTH',
        nxp_type='NX_NUMBER',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-field',
        nxp_optional='True',
        )
    class nxf_slow_pixel_direction(NXobject):
        '''
            Values along the direction of :ref:`slowest varying<Design-ArrayStorageOrder>`
            :index:`pixel direction<dimension; slowest varying>`. Each value in this
            array is the size of a pixel in the units specified. Alternatively, if only
            one       value is given, all pixels in this direction have the same value.
            The direction       itself is given through the vector attribute.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_transformation_type(NXobject):
            '''
                Obligatory value:    ['translation']

                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-transformation-type-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_transformation_type = SubSection(sub_section=nxa_transformation_type.m_def,repeats=True,
            nxp_name='transformation_type',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-transformation-type-attribute',
            nxp_optional='True',
            enumeration=['translation'],
            )
        class nxa_vector(NXobject):
            '''
                Three values that define the axis for this transformation
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-vector-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_vector = SubSection(sub_section=nxa_vector.m_def,repeats=True,
            nxp_name='vector',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-vector-attribute',
            nxp_optional='True',
            )
        class nxa_offset(NXobject):
            '''
                A fixed offset applied before the transformation (three vector
                components).
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-offset-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_offset = SubSection(sub_section=nxa_offset.m_def,repeats=True,
            nxp_name='offset',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-offset-attribute',
            nxp_optional='True',
            )
        class nxa_offset_units(NXobject):
            '''
                Units of the offset.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-offset-units-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_offset_units = SubSection(sub_section=nxa_offset_units.m_def,repeats=True,
            nxp_name='offset_units',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-offset-units-attribute',
            nxp_optional='True',
            )
        class nxa_depends_on(NXobject):
            '''
                Points to the path of the next element in the geometry chain.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-depends-on-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_depends_on = SubSection(sub_section=nxa_depends_on.m_def,repeats=True,
            nxp_name='depends_on',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-depends-on-attribute',
            nxp_optional='True',
            )
    nxf_slow_pixel_direction = SubSection(sub_section=nxf_slow_pixel_direction.m_def,repeats=True,
        nxp_name='slow_pixel_direction',
        nxp_type='NX_NUMBER',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-default-attribute',
        nxp_optional='True',
        )

class NXoff_geometry(NXobject):
    '''
        Geometry (shape) description.     The format closely matches the Object File
        Format (OFF) which can be output     by most CAD software.     It can be used to
        describe the shape of any beamline component, including detectors.     In the case
        of detectors it can be used to define the shape of a single pixel, or,     if the
        pixel shapes are non-uniform, to describe the shape of the whole detector.
        https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXoff_geometry',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry',
        nxp_optional='True',
        )
    class nxf_vertices(NXobject):
        '''
            List of x,y,z coordinates for vertices.       The origin of the coordinates is
            the position of the parent component, for       example the NXdetector which
            the geometry describes.       If the shape describes a single pixel for a
            detector with uniform pixel       shape then the origin is the position of
            each pixel as described by the       ``x/y/z_pixel_offset`` datasets in
            ``NXdetector``.
            https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-vertices-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_vertices = SubSection(sub_section=nxf_vertices.m_def,repeats=True,
        nxp_name='vertices',
        nxp_type='NX_NUMBER',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-vertices-field',
        nxp_optional='True',
        )
    class nxf_winding_order(NXobject):
        '''
            List of indices of vertices in the ``vertices`` dataset to form each face,
            right-hand rule for face normal.
            https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-winding-order-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_winding_order = SubSection(sub_section=nxf_winding_order.m_def,repeats=True,
        nxp_name='winding_order',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-winding-order-field',
        nxp_optional='True',
        )
    class nxf_faces(NXobject):
        '''
The start index in ``winding_order`` for each face.
            https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-faces-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_faces = SubSection(sub_section=nxf_faces.m_def,repeats=True,
        nxp_name='faces',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-faces-field',
        nxp_optional='True',
        )
    class nxf_detector_faces(NXobject):
        '''
            List of pairs of index in the "faces" dataset and detector id. Face IDs in
            the first column, and corresponding detector IDs in the second column.
            This dataset should only be used only if the ``NXoff_geometry`` group is
            describing a detector.       Note, the face indices must be in ascending order
            but need not be       consecutive as not every face in faces need be a
            detecting surface or       boundary of detecting volume.       Can use
            multiple entries with the same detector id to define detector volumes.
            https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-detector-faces-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_detector_faces = SubSection(sub_section=nxf_detector_faces.m_def,repeats=True,
        nxp_name='detector_faces',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-detector-faces-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-default-attribute',
        nxp_optional='True',
        )

class NXpdb(NXobject):
    '''
        A NeXus transliteration of a PDB file, to be validated only as a PDB
        rather than in NeXus.

        Use :ref:`NXpdb` to incorporate the information in an arbitrary
        PDB into a NeXus file.

        The main suggestion is to use this as a container                 class for a PDB
        entry to describe a sample in NXsample,                 but it may be more
        appropriate to place this higher in the                 hierarchy, say in NXentry.

        The structure has to follow the structure of a PDB                 with each PDB
        data block mapped to a NeXus group of class NXpdb,                 using a
        lowercase version of the data block name as the name                 of the NeXus
        group, each PDB category in that data block                 mapped to a NeXus
        group of class NXpdb and with each PDB column                 mapped to a NeXus
        field.  Each column in a looped PDB category                 should always be
        presented as a 1-dimensional array.  The columns                  in an unlooped
        PDB category should be presented as scalar values.                   If a PDB
        category specifies particular units for columns, the same                  units
        should beused for the corresponding fields.

        A PDB entry is unambigous when all information is carried as text.
        All text data should be presented as quoted strings, with the quote
        marks except for the null values "." or "?"

        For clarity in NXpdb form, numeric data may be presented using the
        numeric types specified in the mmCIF dictionary.  In that case,                 if
        a PDB null value, "." or "?", is contained in a numeric column, the
        IEEE nan should be used for "?" and the IEEE inf should be used for ".".

        An arbitrary DDL2 CIF file can be represented in NeXus using NXpdb.
        However, if save frames are required, an NXpdb_class  attribute with the
        value "CBF_cbfsf" is required for each NeXus group representing a save
        frame.  NXpdb attributes are not required for other CIF components,
        but may be used to provide internal documentation.

        The nesting of NXpdb groups and datasets that correspond to a CIF with
        two categories and one saveframe, including the NXpdb_class attribues is::

        (datablock1):NXpdb                            @NXpdb_class:CBF_cbfdb
        (category1):NXpdb                              @NXpdb_class:CBF_cbfcat
        (column_name1):[...]                               (column_name2):[...]
        (column_name3):[...]                               ...
        (category2):NXpdb                               @NXpdb_class:CBF_cbfcat
        (column_name4):[...]                               (column_name5):[...]
        (column_name6):[...]                               ...
        (saveframe1):NXpdb                               @NXpdb_class:CBF_cbfsf
        (category3):NXpdb                                 @NXpdb_class:CBF_cbfcat
        (column_name7):[...]                                 (column_name8):[...]
        (column_name9):[...]                                  ...
        ...                            ...

        For example, a PDB entry that begins::

        data_1YVA                         #                          _entry.id   1YVA
        #                         _audit_conform.dict_name       mmcif_pdbx.dic
        _audit_conform.dict_version    5.279
        _audit_conform.dict_location
        http://mmcif.pdb.org/dictionaries/ascii/mmcif_pdbx.dic                         #
        loop_                         _database_2.database_id
        _database_2.database_code                         PDB   1YVA
        RCSB  RCSB031959                         WWPDB D_1000031959
        #

        would produce::                                  sample:NXsample
        1yva:NXpdb                              entry:NXpdb
        id:"1YVA"                              audit_conform:NXpdb
        dict_name:"mmcif_pdbx.dic"                                  dict_version:"5.279"
        dict_location:"http://mmcif.pdb.org/dictionaries/ascii/mmcif_pdbx.dic"
        database_2:NXpdb
        database_id:["PDB","RCSB","WWPDB"]
        database_code:["1YVA","RCSB031959","D_1000031959"]

        another example is the following excerpt from pdb entry 9ins, giving the sequences
        of the two chains::

        loop_                         _entity_poly.entity_id
        _entity_poly.nstd_linkage                         _entity_poly.nstd_monomer
        _entity_poly.pdbx_seq_one_letter_code
        _entity_poly.pdbx_seq_one_letter_code_can
        _entity_poly.type                         1 no no GIVEQCCTSICSLYQLENYCN
        GIVEQCCTSICSLYQLENYCN polypeptide(L)                         2 no no
        FVNQHLCGSHLVEALYLVCGERGFFYTPKA FVNQHLCGSHLVEALYLVCGERGFFYTPKA
        polypeptide(L)

        which converts to::

        entity_poly:NXpdb                           @NXpdb_class:CBF_cbfcat
        entity_id:["1", "2"]                           nstd_linkage:["no", "no"]
        nstd_monomer:["no", "no"]
        pdbx_seq_one_letter_code:["GIVEQCCTSICSLYQLENYCN","FVNQHLCGSHLVEALYLVCGERGFFYTPKA"]
        pdbx_seq_one_letter_code_can:["GIVEQCCTSICSLYQLENYCN","FVNQHLCGSHLVEALYLVCGERGFFYTPKA"]
        type:["polypeptide(L)", "polypeptide(L)"]

        https://manual.nexusformat.org/classes/base_classes/NXpdb.html#nxpdb .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXpdb',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_ignoreExtraGroups='true',
        nxp_ignoreExtraFields='true',
        nxp_ignoreExtraAttributes='true',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpdb.html#nxpdb',
        nxp_optional='True',
        )

class NXbeam(NXobject):
    '''
        Properties of the neutron or X-ray beam at a given location.                   It
        will be referenced         by beamline component groups within the
        :ref:`NXinstrument` group or by the :ref:`NXsample` group. Note         that
        variables such as the incident energy could be scalar values or arrays. This group
        is         especially valuable in storing the results of instrument simulations in
        which it is useful         to specify the beam profile, time distribution etc. at
        each beamline component. Otherwise,         its most likely use is in the
        :ref:`NXsample` group in which it defines the results of the neutron
        scattering by the sample, e.g., energy transfer, polarizations.
        https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXbeam',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam',
        nxp_optional='True',
        )
    class nxg_DATA(NXobject):
        '''
            Distribution of beam with respect to relevant variable e.g. wavelength. This
            is mainly             useful for simulations which need to store plottable
            information at each beamline             component.
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-data-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-data-group',
        nxp_optional='True',
        )
    class nxf_distance(NXobject):
        '''
Distance from sample
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
        nxp_name='distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-distance-field',
        nxp_optional='True',
        )
    class nxf_incident_energy(NXobject):
        '''
Energy on entering beamline component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-energy-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_incident_energy = SubSection(sub_section=nxf_incident_energy.m_def,repeats=True,
        nxp_name='incident_energy',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-energy-field',
        nxp_optional='True',
        )
    class nxf_final_energy(NXobject):
        '''
Energy on leaving beamline component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-energy-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_final_energy = SubSection(sub_section=nxf_final_energy.m_def,repeats=True,
        nxp_name='final_energy',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-energy-field',
        nxp_optional='True',
        )
    class nxf_energy_transfer(NXobject):
        '''
Energy change caused by beamline component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-energy-transfer-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_energy_transfer = SubSection(sub_section=nxf_energy_transfer.m_def,repeats=True,
        nxp_name='energy_transfer',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-energy-transfer-field',
        nxp_optional='True',
        )
    class nxf_incident_wavelength(NXobject):
        '''
Wavelength on entering beamline component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-wavelength-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_incident_wavelength = SubSection(sub_section=nxf_incident_wavelength.m_def,repeats=True,
        nxp_name='incident_wavelength',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-wavelength-field',
        nxp_optional='True',
        )
    class nxf_incident_wavelength_spread(NXobject):
        '''
Wavelength spread FWHM on entering component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-wavelength-spread-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_incident_wavelength_spread = SubSection(sub_section=nxf_incident_wavelength_spread.m_def,repeats=True,
        nxp_name='incident_wavelength_spread',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-wavelength-spread-field',
        nxp_optional='True',
        )
    class nxf_incident_beam_divergence(NXobject):
        '''
Divergence of beam entering this component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-beam-divergence-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_incident_beam_divergence = SubSection(sub_section=nxf_incident_beam_divergence.m_def,repeats=True,
        nxp_name='incident_beam_divergence',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-beam-divergence-field',
        nxp_optional='True',
        )
    class nxf_extent(NXobject):
        '''
Size of the beam entering this component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-extent-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_extent = SubSection(sub_section=nxf_extent.m_def,repeats=True,
        nxp_name='extent',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-extent-field',
        nxp_optional='True',
        )
    class nxf_final_wavelength(NXobject):
        '''
Wavelength on leaving beamline component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-wavelength-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_final_wavelength = SubSection(sub_section=nxf_final_wavelength.m_def,repeats=True,
        nxp_name='final_wavelength',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-wavelength-field',
        nxp_optional='True',
        )
    class nxf_incident_polarization(NXobject):
        '''
Polarization vector on entering beamline component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-polarization-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_incident_polarization = SubSection(sub_section=nxf_incident_polarization.m_def,repeats=True,
        nxp_name='incident_polarization',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-polarization-field',
        nxp_optional='True',
        )
    class nxf_final_polarization(NXobject):
        '''
Polarization vector on leaving beamline component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-polarization-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_final_polarization = SubSection(sub_section=nxf_final_polarization.m_def,repeats=True,
        nxp_name='final_polarization',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-polarization-field',
        nxp_optional='True',
        )
    class nxf_final_wavelength_spread(NXobject):
        '''
Wavelength spread FWHM of beam leaving this component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-wavelength-spread-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_final_wavelength_spread = SubSection(sub_section=nxf_final_wavelength_spread.m_def,repeats=True,
        nxp_name='final_wavelength_spread',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-wavelength-spread-field',
        nxp_optional='True',
        )
    class nxf_final_beam_divergence(NXobject):
        '''
Divergence FWHM of beam leaving this component
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-beam-divergence-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_final_beam_divergence = SubSection(sub_section=nxf_final_beam_divergence.m_def,repeats=True,
        nxp_name='final_beam_divergence',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-beam-divergence-field',
        nxp_optional='True',
        )
    class nxf_flux(NXobject):
        '''
flux incident on beam plane area
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-flux-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_flux = SubSection(sub_section=nxf_flux.m_def,repeats=True,
        nxp_name='flux',
        nxp_type='NX_FLOAT',
        nxp_units='NX_FLUX',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-flux-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-default-attribute',
        nxp_optional='True',
        )

class NXgrating(NXobject):
    '''
A diffraction grating, as could be used in a soft X-ray monochromator
        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXgrating',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_category='base',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating',
        nxp_optional='True',
        )
    class nxg_shape(NXobject):
        '''
A NXshape group describing the shape of the mirror
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-shape-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
        nxp_type='NXshape',
        nxp_name='shape',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-shape-group',
        nxp_optional='True',
        )
    class nxg_figure_data(NXobject):
        '''
Numerical description of the surface figure of the mirror.
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-figure-data-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_figure_data = SubSection(sub_section=nxg_figure_data.m_def,repeats=True,
        nxp_name='figure_data',
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-figure-data-group',
        nxp_optional='True',
        )
    class nxg_TRANSFORMATIONS(NXobject):
        '''
"Engineering" position of the grating
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-transformations-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
    nxg_TRANSFORMATIONS = SubSection(sub_section=nxg_TRANSFORMATIONS.m_def,repeats=True,
        nxp_type='NXtransformations',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-transformations-group',
        nxp_optional='True',
        )
    class nxf_angles(NXobject):
        '''
Blaze or trapezoidal angles, with the angle of the upstream facing edge listed
            first. Blazed gratings can be identified by the low value of the first-listed
            angle.
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-angles-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_angles = SubSection(sub_section=nxf_angles.m_def,repeats=True,
        nxp_name='angles',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-angles-field',
        nxp_optional='True',
        )
    class nxf_period(NXobject):
        '''
List of polynomial coefficients describing the spatial separation of
            lines/grooves as a function of position along the grating, in increasing
            powers of position. Gratings which do not have variable line spacing will only
            have a single coefficient (constant).
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-period-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_period = SubSection(sub_section=nxf_period.m_def,repeats=True,
        nxp_name='period',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-period-field',
        nxp_optional='True',
        )
    class nxf_duty_cycle(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-duty-cycle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_duty_cycle = SubSection(sub_section=nxf_duty_cycle.m_def,repeats=True,
        nxp_name='duty_cycle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-duty-cycle-field',
        nxp_optional='True',
        )
    class nxf_depth(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-depth-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_depth = SubSection(sub_section=nxf_depth.m_def,repeats=True,
        nxp_name='depth',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-depth-field',
        nxp_optional='True',
        )
    class nxf_diffraction_order(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-diffraction-order-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_diffraction_order = SubSection(sub_section=nxf_diffraction_order.m_def,repeats=True,
        nxp_name='diffraction_order',
        nxp_type='NX_INT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-diffraction-order-field',
        nxp_optional='True',
        )
    class nxf_deflection_angle(NXobject):
        '''
Angle between the incident beam and the utilised outgoing beam.
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-deflection-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_deflection_angle = SubSection(sub_section=nxf_deflection_angle.m_def,repeats=True,
        nxp_name='deflection_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-deflection-angle-field',
        nxp_optional='True',
        )
    class nxf_interior_atmosphere(NXobject):
        '''
            Possible values:    ['vacuum','helium','argon']

            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-interior-atmosphere-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_interior_atmosphere = SubSection(sub_section=nxf_interior_atmosphere.m_def,repeats=True,
        nxp_name='interior_atmosphere',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-interior-atmosphere-field',
        nxp_optional='True',
        enumeration=['vacuum','helium','argon'],
        )
    class nxf_substrate_material(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_substrate_material = SubSection(sub_section=nxf_substrate_material.m_def,repeats=True,
        nxp_name='substrate_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-material-field',
        nxp_optional='True',
        )
    class nxf_substrate_density(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_density = SubSection(sub_section=nxf_substrate_density.m_def,repeats=True,
        nxp_name='substrate_density',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-density-field',
        nxp_optional='True',
        )
    class nxf_substrate_thickness(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_thickness = SubSection(sub_section=nxf_substrate_thickness.m_def,repeats=True,
        nxp_name='substrate_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-thickness-field',
        nxp_optional='True',
        )
    class nxf_coating_material(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-coating-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_coating_material = SubSection(sub_section=nxf_coating_material.m_def,repeats=True,
        nxp_name='coating_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-coating-material-field',
        nxp_optional='True',
        )
    class nxf_substrate_roughness(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-roughness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_roughness = SubSection(sub_section=nxf_substrate_roughness.m_def,repeats=True,
        nxp_name='substrate_roughness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-roughness-field',
        nxp_optional='True',
        )
    class nxf_coating_roughness(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-coating-roughness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_coating_roughness = SubSection(sub_section=nxf_coating_roughness.m_def,repeats=True,
        nxp_name='coating_roughness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-coating-roughness-field',
        nxp_optional='True',
        )
    class nxf_layer_thickness(NXobject):
        '''
An array describing the thickness of each layer
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-layer-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_layer_thickness = SubSection(sub_section=nxf_layer_thickness.m_def,repeats=True,
        nxp_name='layer_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-layer-thickness-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-default-attribute',
        nxp_optional='True',
        )

class NXuser(NXobject):
    '''
        Contact information for a user.                                    The format
        allows more                  than one user with the same affiliation and contact
        information,                  but a second :ref:`NXuser` group should be used if
        they have different                  affiliations, etc.
        https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXuser',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser',
        nxp_optional='True',
        )
    class nxf_name(NXobject):
        '''
Name of user responsible for this entry
            https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
        nxp_name='name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-name-field',
        nxp_optional='True',
        )
    class nxf_role(NXobject):
        '''
            Role of user responsible for this entry.                         Suggested
            roles are "local_contact",                          "principal_investigator",
            and "proposer"
            https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-role-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_role = SubSection(sub_section=nxf_role.m_def,repeats=True,
        nxp_name='role',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-role-field',
        nxp_optional='True',
        )
    class nxf_affiliation(NXobject):
        '''
Affiliation of user
            https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-affiliation-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_affiliation = SubSection(sub_section=nxf_affiliation.m_def,repeats=True,
        nxp_name='affiliation',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-affiliation-field',
        nxp_optional='True',
        )
    class nxf_address(NXobject):
        '''
Address of user
            https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-address-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_address = SubSection(sub_section=nxf_address.m_def,repeats=True,
        nxp_name='address',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-address-field',
        nxp_optional='True',
        )
    class nxf_telephone_number(NXobject):
        '''
Telephone number of user
            https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-telephone-number-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_telephone_number = SubSection(sub_section=nxf_telephone_number.m_def,repeats=True,
        nxp_name='telephone_number',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-telephone-number-field',
        nxp_optional='True',
        )
    class nxf_fax_number(NXobject):
        '''
Fax number of user
            https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-fax-number-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_fax_number = SubSection(sub_section=nxf_fax_number.m_def,repeats=True,
        nxp_name='fax_number',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-fax-number-field',
        nxp_optional='True',
        )
    class nxf_email(NXobject):
        '''
Email of user
            https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-email-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_email = SubSection(sub_section=nxf_email.m_def,repeats=True,
        nxp_name='email',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-email-field',
        nxp_optional='True',
        )
    class nxf_facility_user_id(NXobject):
        '''
            facility based unique identifier for this person                          e.g.
            their identification code on the facility
            address/contact database
            https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-facility-user-id-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_facility_user_id = SubSection(sub_section=nxf_facility_user_id.m_def,repeats=True,
        nxp_name='facility_user_id',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-facility-user-id-field',
        nxp_optional='True',
        )
    class nxf_ORCID(NXobject):
        '''
            an author code, Open Researcher and Contributor ID,
            defined by https://orcid.org and expressed as a URI
            https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-orcid-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_ORCID = SubSection(sub_section=nxf_ORCID.m_def,repeats=True,
        nxp_name='ORCID',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-orcid-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-default-attribute',
        nxp_optional='True',
        )

class NXcite(NXobject):
    '''
        A literature reference                                  Definition to include
        references for example for detectors,                 manuals, instruments,
        acquisition or analysis software used.                                  The idea
        would be to include this in the relevant NeXus object:
        :ref:`NXdetector` for detectors, :ref:`NXinstrument` for instruments, etc.
        https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_type='group',
        nxp_name='NXcite',
        nxp_category='base',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
            This should describe the reason for including this reference.
            For example: The dataset in this group was normalised using the method
            which is described in detail in this reference.
            https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-description-field',
        nxp_optional='True',
        )
    class nxf_url(NXobject):
        '''
URL referencing the document or data.
            https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-url-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_url = SubSection(sub_section=nxf_url.m_def,repeats=True,
        nxp_name='url',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-url-field',
        nxp_optional='True',
        )
    class nxf_doi(NXobject):
        '''
DOI referencing the document or data.
            https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-doi-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_doi = SubSection(sub_section=nxf_doi.m_def,repeats=True,
        nxp_name='doi',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-doi-field',
        nxp_optional='True',
        )
    class nxf_endnote(NXobject):
        '''
Bibliographic reference data in EndNote format.
            https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-endnote-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_endnote = SubSection(sub_section=nxf_endnote.m_def,repeats=True,
        nxp_name='endnote',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-endnote-field',
        nxp_optional='True',
        )
    class nxf_bibtex(NXobject):
        '''
Bibliographic reference data in BibTeX format.
            https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-bibtex-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_bibtex = SubSection(sub_section=nxf_bibtex.m_def,repeats=True,
        nxp_name='bibtex',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-bibtex-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-default-attribute',
        nxp_optional='True',
        )

class NXsample_component(NXobject):
    '''
        One group like this per component can be recorded For a sample consisting of
        multiple components.
        https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXsample_component',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component',
        nxp_optional='True',
        )
    class nxg_transmission(NXobject):
        '''
As a function of Wavelength
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-transmission-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_transmission = SubSection(sub_section=nxg_transmission.m_def,repeats=True,
        nxp_name='transmission',
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-transmission-group',
        nxp_optional='True',
        )
    class nxf_name(NXobject):
        '''
Descriptive name of sample component
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
        nxp_name='name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-name-field',
        nxp_optional='True',
        )
    class nxf_chemical_formula(NXobject):
        '''
            The chemical formula specified using CIF conventions.
            Abbreviated version of CIF standard:
            * Only recognized element symbols may be used.                         * Each
            element symbol is followed by a 'count' number. A count of '1' may be omitted.
            * A space or parenthesis must separate each cluster of (element symbol +
            count).                         * Where a group of elements is enclosed in
            parentheses, the multiplier for the                            group must
            follow the closing parentheses. That is, all element and group
            multipliers are assumed to be printed as subscripted numbers.
            * Unless the elements are ordered in a manner that corresponds to their
            chemical                            structure, the order of the elements
            within any group or moiety depends on                            whether or
            not carbon is present.                         * If carbon is present, the
            order should be:                                                     - C, then
            H, then the other elements in alphabetical order of their symbol.
            - If carbon is not present, the elements are listed purely in alphabetic order
            of their symbol.                                                     * This is
            the *Hill* system used by Chemical Abstracts.
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-chemical-formula-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_chemical_formula = SubSection(sub_section=nxf_chemical_formula.m_def,repeats=True,
        nxp_name='chemical_formula',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-chemical-formula-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_abc(NXobject):
        '''
Crystallography unit cell parameters a, b, and c
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-abc-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_abc = SubSection(sub_section=nxf_unit_cell_abc.m_def,repeats=True,
        nxp_name='unit_cell_abc',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-abc-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_alphabetagamma(NXobject):
        '''
Crystallography unit cell parameters alpha, beta, and gamma
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-alphabetagamma-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_alphabetagamma = SubSection(sub_section=nxf_unit_cell_alphabetagamma.m_def,repeats=True,
        nxp_name='unit_cell_alphabetagamma',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-alphabetagamma-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_volume(NXobject):
        '''
Volume of the unit cell
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-volume-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_volume = SubSection(sub_section=nxf_unit_cell_volume.m_def,repeats=True,
        nxp_name='unit_cell_volume',
        nxp_type='NX_FLOAT',
        nxp_units='NX_VOLUME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-volume-field',
        nxp_optional='True',
        )
    class nxf_sample_orientation(NXobject):
        '''
This will follow the Busing and Levy convention from Acta.Crysta v22, p457
            (1967)
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-sample-orientation-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_sample_orientation = SubSection(sub_section=nxf_sample_orientation.m_def,repeats=True,
        nxp_name='sample_orientation',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-sample-orientation-field',
        nxp_optional='True',
        )
    class nxf_orientation_matrix(NXobject):
        '''
            Orientation matrix of single crystal sample component.
            This will follow the Busing and Levy convention from Acta.Crysta v22, p457
            (1967)
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-orientation-matrix-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_orientation_matrix = SubSection(sub_section=nxf_orientation_matrix.m_def,repeats=True,
        nxp_name='orientation_matrix',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-orientation-matrix-field',
        nxp_optional='True',
        )
    class nxf_mass(NXobject):
        '''
Mass of sample component
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-mass-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_mass = SubSection(sub_section=nxf_mass.m_def,repeats=True,
        nxp_name='mass',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-mass-field',
        nxp_optional='True',
        )
    class nxf_density(NXobject):
        '''
Density of sample component
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_density = SubSection(sub_section=nxf_density.m_def,repeats=True,
        nxp_name='density',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-density-field',
        nxp_optional='True',
        )
    class nxf_relative_molecular_mass(NXobject):
        '''
Relative Molecular Mass of sample component
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-relative-molecular-mass-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_relative_molecular_mass = SubSection(sub_section=nxf_relative_molecular_mass.m_def,repeats=True,
        nxp_name='relative_molecular_mass',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-relative-molecular-mass-field',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
            Description of the sample component
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-description-field',
        nxp_optional='True',
        )
    class nxf_volume_fraction(NXobject):
        '''
Volume fraction of component
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-volume-fraction-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_volume_fraction = SubSection(sub_section=nxf_volume_fraction.m_def,repeats=True,
        nxp_name='volume_fraction',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-volume-fraction-field',
        nxp_optional='True',
        )
    class nxf_scattering_length_density(NXobject):
        '''
Scattering length density of component
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-scattering-length-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_scattering_length_density = SubSection(sub_section=nxf_scattering_length_density.m_def,repeats=True,
        nxp_name='scattering_length_density',
        nxp_type='NX_FLOAT',
        nxp_units='NX_SCATTERING_LENGTH_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-scattering-length-density-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_class(NXobject):
        '''
            In case it is all we know and we want to record/document it
            Possible values:
            ['triclinic','monoclinic','orthorhombic','tetragonal','rhombohedral','hexagonal','cubic']

            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-class-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_unit_cell_class = SubSection(sub_section=nxf_unit_cell_class.m_def,repeats=True,
        nxp_name='unit_cell_class',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-class-field',
        nxp_optional='True',
        enumeration=['triclinic','monoclinic','orthorhombic','tetragonal','rhombohedral','hexagonal','cubic'],
        )
    class nxf_space_group(NXobject):
        '''
Crystallographic space group
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-space-group-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_space_group = SubSection(sub_section=nxf_space_group.m_def,repeats=True,
        nxp_name='space_group',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-space-group-field',
        nxp_optional='True',
        )
    class nxf_point_group(NXobject):
        '''
Crystallographic point group, deprecated if space_group present
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-point-group-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_point_group = SubSection(sub_section=nxf_point_group.m_def,repeats=True,
        nxp_name='point_group',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-point-group-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-default-attribute',
        nxp_optional='True',
        )

class NXpinhole(NXobject):
    '''
        A simple pinhole.                                  For more complex geometries,
        :ref:`NXaperture` should be used.
        https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXpinhole',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole',
        nxp_optional='True',
        )
    class nxf_depends_on(NXobject):
        '''
            Points to the path of the last element in the geometry chain that places
            this object in space.                          When followed through that
            chain is supposed to end at an element depending                         on
            "." i.e. the origin of the coordinate system.                         If
            desired the location of the slit can also be described relative to
            an NXbeam, which will allow a simple description of a non-centred pinhole.
            https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-depends-on-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_depends_on = SubSection(sub_section=nxf_depends_on.m_def,repeats=True,
        nxp_name='depends_on',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-depends-on-field',
        nxp_optional='True',
        )
    class nxf_diameter(NXobject):
        '''
Size of the circular hole defining the transmitted beam size.
            https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-diameter-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_diameter = SubSection(sub_section=nxf_diameter.m_def,repeats=True,
        nxp_name='diameter',
        nxp_type='NX_NUMBER',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-diameter-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-default-attribute',
        nxp_optional='True',
        )

class NXnote(NXobject):
    '''
        Any additional freeform information not covered by the other base classes.
        This class can be used to store additional information in a                  NeXus
        file e.g. pictures, movies, audio, additional text logs
        https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXnote',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote',
        nxp_optional='True',
        )
    class nxf_author(NXobject):
        '''
Author or creator of note
            https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-author-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_author = SubSection(sub_section=nxf_author.m_def,repeats=True,
        nxp_name='author',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-author-field',
        nxp_optional='True',
        )
    class nxf_date(NXobject):
        '''
Date note created/added
            https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-date-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxf_date = SubSection(sub_section=nxf_date.m_def,repeats=True,
        nxp_name='date',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-date-field',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
Mime content type of note data field e.g. image/jpeg, text/plain, text/html
            https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-type-field',
        nxp_optional='True',
        )
    class nxf_file_name(NXobject):
        '''
Name of original file name if note was read from an external source
            https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-file-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_file_name = SubSection(sub_section=nxf_file_name.m_def,repeats=True,
        nxp_name='file_name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-file-name-field',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
Title of an image or other details of the note
            https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-description-field',
        nxp_optional='True',
        )
    class nxf_sequence_index(NXobject):
        '''
            Sequence index of note, for placing a sequence of              multiple
            **NXnote** groups in an order.  Starts with 1.
            https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-sequence-index-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
    nxf_sequence_index = SubSection(sub_section=nxf_sequence_index.m_def,repeats=True,
        nxp_name='sequence_index',
        nxp_type='NX_POSINT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-sequence-index-field',
        nxp_optional='True',
        )
    class nxf_data(NXobject):
        '''
Binary note data - if text, line terminator is [CR][LF].
            https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-data-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BINARY.m_def,repeats=True)
    nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
        nxp_name='data',
        nxp_type='NX_BINARY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-data-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-default-attribute',
        nxp_optional='True',
        )

class NXdetector_group(NXobject):
    '''
        Logical grouping of detectors. When used, describes a group of detectors.

        Each detector is represented as an NXdetector                  with its own
        detector data array.  Each detector data array                 may be further
        decomposed into array sections by use of                 NXdetector_module groups.
        Detectors can be grouped logically                 together using
        NXdetector_group. Groups can be further grouped                 hierarchically in
        a single NXdetector_group (for example, if                 there are multiple
        detectors at an endstation or multiple                  endstations at a
        facility).  Alternatively, multiple                  NXdetector_groups can be
        provided.

        The groups are defined hierarchically, with names given                 in the
        group_names field, unique identifying indices given                 in the field
        group_index, and the level in the hierarchy                 given in the
        group_parent field.  For example if an x-ray                 detector group, DET,
        consists of four detectors in a                 rectangular array::
        DTL    DTR                                  DLL    DLR
        We could have::
        group_names: ["DET", "DTL", "DTR", "DLL", "DLR"]
        group_index: [1, 2, 3, 4, 5]                         group_parent:  [-1, 1, 1, 1,
        1]
        https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXdetector_group',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group',
        nxp_optional='True',
        )
    class nxf_group_names(NXobject):
        '''
            An array of the names of the detectors given in NXdetector
            groups or the names of hierarchical groupings of detectors
            given as names of NXdetector_group groups or in
            NXdetector_group group_names and group_parent fields as
            having children.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-names-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_group_names = SubSection(sub_section=nxf_group_names.m_def,repeats=True,
        nxp_name='group_names',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-names-field',
        nxp_optional='True',
        )
    class nxf_group_index(NXobject):
        '''
            An array of unique identifiers for detectors or groupings
            of detectors.                                                  Each ID is a
            unique ID for the corresponding detector or group
            named in the field group_names.  The IDs are positive integers
            starting with 1.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-index-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_group_index = SubSection(sub_section=nxf_group_index.m_def,repeats=True,
        nxp_name='group_index',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-index-field',
        nxp_optional='True',
        )
    class nxf_group_parent(NXobject):
        '''
            An array of the hierarchical levels of the parents of detectors
            or groupings of detectors.                                                  A
            top-level grouping has parent level -1.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-parent-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_group_parent = SubSection(sub_section=nxf_group_parent.m_def,repeats=True,
        nxp_name='group_parent',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-parent-field',
        nxp_optional='True',
        )
    class nxf_group_type(NXobject):
        '''
Code number for group type, e.g. bank=1, tube=2 etc.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_group_type = SubSection(sub_section=nxf_group_type.m_def,repeats=True,
        nxp_name='group_type',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-type-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-default-attribute',
        nxp_optional='True',
        )

class NXcontainer(NXobject):
    '''
        State of a container holding the sample under investigation.
        A container is any object in the beam path which absorbs the beam and
        whose contribution to the overall attenuation/scattering needs to be
        determined to process the experimental data. Examples of containers
        include glass capillary tubes, vanadium cans, windows in furnaces or
        diamonds in a Diamond Anvil Cell. The following figures show a complex
        example of a container:                                  .. figure::
        container/ComplexExampleContainer.png                                        A
        hypothetical capillary furnace. The beam passes from left to right
        (blue dashes), passing through window 1, then window 2, before
        passing through the downstream wall of the capillary. It is then
        scattered by the sample with scattered beams passing through the
        upstream wall of the capillary, then windows 4 and 5. As part of the
        corrections for a PDF experiment it is necessary to subtract the PDF
        of the empty container (i.e. each of the windows and the capillary).
        To calculate the PDF of the empty container it is necessary to have
        the measured scattering data and to know the nature (e.g. density,
        elemental composition, etc.) of the portion of the container which
        the beam passed through.                                     .. figure::
        container/ComplexContainerBeampath.png                                        A
        complete description of the shapes of the container elements with
        their orientation relative to the beam and also information on
        whether they are upstream or downstream of the sample is also
        therefore important. For example, although the windows 2 and 4 have
        the same shape, the path taken through them by the beam is very
        different and this needs to be modelled. Furthermore, it is not
        inconceivable that windows might move during an experiment and thus
        the changes to the beampath would need to be accounted for.
        This class encodes the position of the container with respect to the
        sample and allows the calculation of the beampath through the container.
        It also includes sufficient data to model beam absorption of the
        container and a link to a dataset containing a measurement of the
        container with nothing inside, to allow data corrections (at a specific
        beam energy/measurement time) to be made.
        https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXcontainer',
        nxp_category='contributed',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer',
        nxp_required='True',
        )
    class nxg_beam(NXobject):
        '''
            Details of beam incident on container, including the position
            relative to the sample (to determine whether the container is
            upstream or downstream of the sample).
            https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-beam-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXbeam.m_def,repeats=True)
    nxg_beam = SubSection(sub_section=nxg_beam.m_def,repeats=True,
        nxp_name='beam',
        nxp_type='NXbeam',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-beam-group',
        nxp_required='True',
        )
    class nxg_shape(NXobject):
        '''
            Shape of the container. In combination with orientation this
            should allow the beampath through the container to be modelled to
            allow the adsorption to be calculated.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-shape-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
        nxp_name='shape',
        nxp_type='NXshape',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-shape-group',
        nxp_required='True',
        )
    class nxg_orientation(NXobject):
        '''
            The angle the container makes to the beam and how it may change
            during the experiment.In combination with shape this should allow
            the beampath through the container to be modelled to allow the
            adsorption of the container to be calculated.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-orientation-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
    nxg_orientation = SubSection(sub_section=nxg_orientation.m_def,repeats=True,
        nxp_name='orientation',
        nxp_type='NXtransformations',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-orientation-group',
        nxp_required='True',
        )
    class nxf_name(NXobject):
        '''
            Descriptive name of container.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
        nxp_name='name',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-name-field',
        nxp_required='True',
        )
    class nxf_description(NXobject):
        '''
            Verbose description of container and how it fits into the wider
            experimental set up.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-description-field',
        nxp_required='True',
        )
    class nxf_chemical_formula(NXobject):
        '''
            Chemical composition of the material the container is made from.
            Specified using CIF conventions. Abbreviated version of CIF
            standard:                                                   * Only recognized
            element symbols may be used.                         * Each element symbol is
            followed by a 'count' number. A count of                            '1' may be
            omitted.                         * A space or parenthesis must separate each
            cluster of (element                            symbol + count).
            * Where a group of elements is enclosed in parentheses, the
            multiplier for the group must follow the closing parentheses.
            That is, all element and group multipliers are assumed to be
            printed as subscripted numbers.                         * Unless the elements
            are ordered in a manner that corresponds to                            their
            chemical structure, the order of the elements within any
            group or moiety depends on whether or not carbon is present.
            * If carbon is present, the order should be:
            - C, then H, then the other elements in alphabetical order of
            their symbol.                            - If carbon is not present, the
            elements are listed purely in                              alphabetic order of
            their symbol.                                                     * This is
            the *Hill* system used by Chemical Abstracts.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-chemical-formula-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_chemical_formula = SubSection(sub_section=nxf_chemical_formula.m_def,repeats=True,
        nxp_name='chemical_formula',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-chemical-formula-field',
        nxp_required='True',
        )
    class nxf_density(NXobject):
        '''
            Density of the material the container is made from.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_density = SubSection(sub_section=nxf_density.m_def,repeats=True,
        nxp_name='density',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-density-field',
        nxp_required='True',
        )
    class nxf_packing_fraction(NXobject):
        '''
            Fraction of the volume of the container occupied by the material
            forming the container.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-packing-fraction-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_packing_fraction = SubSection(sub_section=nxf_packing_fraction.m_def,repeats=True,
        nxp_name='packing_fraction',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-packing-fraction-field',
        nxp_required='True',
        )
    class nxf_relative_molecular_mass(NXobject):
        '''
Relative molecular mass of container.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-relative-molecular-mass-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_relative_molecular_mass = SubSection(sub_section=nxf_relative_molecular_mass.m_def,repeats=True,
        nxp_name='relative_molecular_mass',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-relative-molecular-mass-field',
        nxp_required='True',
        )

class NXquadrupole_magnet(NXobject):
    '''
definition for a quadrupole magnet.
        https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_type='group',
        nxp_name='NXquadrupole_magnet',
        nxp_category='contributed',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet',
        nxp_required='True',
        )
    class nxg_read_current(NXobject):
        '''
current read from supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-current-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-current-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_CURRENT',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-current-value-field',
            nxp_required='True',
            )
    nxg_read_current = SubSection(sub_section=nxg_read_current.m_def,repeats=True,
        nxp_name='read_current',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-current-group',
        nxp_optional='True',
        )
    class nxg_read_voltage(NXobject):
        '''
voltage read from supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-voltage-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-voltage-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_VOLTAGE',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-voltage-value-field',
            nxp_required='True',
            )
    nxg_read_voltage = SubSection(sub_section=nxg_read_voltage.m_def,repeats=True,
        nxp_name='read_voltage',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-voltage-group',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
extended description of the magnet.
            https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-description-field',
        nxp_required='True',
        )
    class nxf_beamline_distance(NXobject):
        '''
define position of beamline element relative to production target
            https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-beamline-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_beamline_distance = SubSection(sub_section=nxf_beamline_distance.m_def,repeats=True,
        nxp_name='beamline_distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-beamline-distance-field',
        nxp_optional='True',
        )
    class nxf_set_current(NXobject):
        '''
current set on supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-set-current-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_set_current = SubSection(sub_section=nxf_set_current.m_def,repeats=True,
        nxp_name='set_current',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-set-current-field',
        nxp_optional='True',
        )

class NXelectrostatic_kicker(NXobject):
    '''
definition for a electrostatic kicker.
        https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_type='group',
        nxp_name='NXelectrostatic_kicker',
        nxp_category='contributed',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker',
        nxp_required='True',
        )
    class nxg_read_current(NXobject):
        '''
current read from supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-current-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-current-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_CURRENT',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-current-value-field',
            nxp_required='True',
            )
    nxg_read_current = SubSection(sub_section=nxg_read_current.m_def,repeats=True,
        nxp_name='read_current',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-current-group',
        nxp_optional='True',
        )
    class nxg_read_voltage(NXobject):
        '''
voltage read from supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-voltage-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-voltage-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_VOLTAGE',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-voltage-value-field',
            nxp_required='True',
            )
    nxg_read_voltage = SubSection(sub_section=nxg_read_voltage.m_def,repeats=True,
        nxp_name='read_voltage',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-voltage-group',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
extended description of the kicker.
            https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-description-field',
        nxp_required='True',
        )
    class nxf_beamline_distance(NXobject):
        '''
define position of beamline element relative to production target
            https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-beamline-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_beamline_distance = SubSection(sub_section=nxf_beamline_distance.m_def,repeats=True,
        nxp_name='beamline_distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-beamline-distance-field',
        nxp_optional='True',
        )
    class nxf_timing(NXobject):
        '''
kicker timing as defined by ``description`` attribute
            https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-timing-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-timing-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-timing-description-attribute',
            nxp_required='True',
            )
    nxf_timing = SubSection(sub_section=nxf_timing.m_def,repeats=True,
        nxp_name='timing',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-timing-field',
        nxp_optional='True',
        )
    class nxf_set_current(NXobject):
        '''
current set on supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-set-current-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_set_current = SubSection(sub_section=nxf_set_current.m_def,repeats=True,
        nxp_name='set_current',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-set-current-field',
        nxp_optional='True',
        )
    class nxf_set_voltage(NXobject):
        '''
volage set on supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-set-voltage-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_set_voltage = SubSection(sub_section=nxf_set_voltage.m_def,repeats=True,
        nxp_name='set_voltage',
        nxp_type='NX_FLOAT',
        nxp_units='NX_VOLTAGE',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-set-voltage-field',
        nxp_optional='True',
        )

class NXspin_rotator(NXobject):
    '''
definition for a spin rotator.
        https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_type='group',
        nxp_name='NXspin_rotator',
        nxp_category='contributed',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator',
        nxp_required='True',
        )
    class nxg_read_Bfield_current(NXobject):
        '''
current read from magnet supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-current-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-current-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_CURRENT',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-current-value-field',
            nxp_required='True',
            )
    nxg_read_Bfield_current = SubSection(sub_section=nxg_read_Bfield_current.m_def,repeats=True,
        nxp_name='read_Bfield_current',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-current-group',
        nxp_optional='True',
        )
    class nxg_read_Bfield_voltage(NXobject):
        '''
voltage read from magnet supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-voltage-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-voltage-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_VOLTAGE',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-voltage-value-field',
            nxp_required='True',
            )
    nxg_read_Bfield_voltage = SubSection(sub_section=nxg_read_Bfield_voltage.m_def,repeats=True,
        nxp_name='read_Bfield_voltage',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-voltage-group',
        nxp_optional='True',
        )
    class nxg_read_Efield_current(NXobject):
        '''
current read from HT supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-current-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-current-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_CURRENT',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-current-value-field',
            nxp_required='True',
            )
    nxg_read_Efield_current = SubSection(sub_section=nxg_read_Efield_current.m_def,repeats=True,
        nxp_name='read_Efield_current',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-current-group',
        nxp_optional='True',
        )
    class nxg_read_Efield_voltage(NXobject):
        '''
voltage read from HT supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-voltage-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-voltage-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_VOLTAGE',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-voltage-value-field',
            nxp_required='True',
            )
    nxg_read_Efield_voltage = SubSection(sub_section=nxg_read_Efield_voltage.m_def,repeats=True,
        nxp_name='read_Efield_voltage',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-voltage-group',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
extended description of the spin rotator.
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-description-field',
        nxp_required='True',
        )
    class nxf_beamline_distance(NXobject):
        '''
define position of beamline element relative to production target
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-beamline-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_beamline_distance = SubSection(sub_section=nxf_beamline_distance.m_def,repeats=True,
        nxp_name='beamline_distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-beamline-distance-field',
        nxp_optional='True',
        )
    class nxf_set_Bfield_current(NXobject):
        '''
current set on magnet supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-set-bfield-current-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_set_Bfield_current = SubSection(sub_section=nxf_set_Bfield_current.m_def,repeats=True,
        nxp_name='set_Bfield_current',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-set-bfield-current-field',
        nxp_optional='True',
        )
    class nxf_set_Efield_voltage(NXobject):
        '''
current set on HT supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-set-efield-voltage-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_set_Efield_voltage = SubSection(sub_section=nxf_set_Efield_voltage.m_def,repeats=True,
        nxp_name='set_Efield_voltage',
        nxp_type='NX_FLOAT',
        nxp_units='NX_VOLTAGE',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-set-efield-voltage-field',
        nxp_optional='True',
        )

class NXseparator(NXobject):
    '''
definition for an electrostatic separator.
        https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_type='group',
        nxp_name='NXseparator',
        nxp_category='contributed',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator',
        nxp_required='True',
        )
    class nxg_read_Bfield_current(NXobject):
        '''
current read from magnet supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-current-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-current-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_CURRENT',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-current-value-field',
            nxp_required='True',
            )
    nxg_read_Bfield_current = SubSection(sub_section=nxg_read_Bfield_current.m_def,repeats=True,
        nxp_name='read_Bfield_current',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-current-group',
        nxp_optional='True',
        )
    class nxg_read_Bfield_voltage(NXobject):
        '''
voltage read from magnet supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-voltage-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-voltage-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_VOLTAGE',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-voltage-value-field',
            nxp_required='True',
            )
    nxg_read_Bfield_voltage = SubSection(sub_section=nxg_read_Bfield_voltage.m_def,repeats=True,
        nxp_name='read_Bfield_voltage',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-voltage-group',
        nxp_optional='True',
        )
    class nxg_read_Efield_current(NXobject):
        '''
current read from HT supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-current-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-current-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_CURRENT',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-current-value-field',
            nxp_required='True',
            )
    nxg_read_Efield_current = SubSection(sub_section=nxg_read_Efield_current.m_def,repeats=True,
        nxp_name='read_Efield_current',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-current-group',
        nxp_optional='True',
        )
    class nxg_read_Efield_voltage(NXobject):
        '''
voltage read from HT supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-voltage-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-voltage-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_VOLTAGE',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-voltage-value-field',
            nxp_required='True',
            )
    nxg_read_Efield_voltage = SubSection(sub_section=nxg_read_Efield_voltage.m_def,repeats=True,
        nxp_name='read_Efield_voltage',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-voltage-group',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
extended description of the separator.
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-description-field',
        nxp_required='True',
        )
    class nxf_beamline_distance(NXobject):
        '''
define position of beamline element relative to production target
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-beamline-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_beamline_distance = SubSection(sub_section=nxf_beamline_distance.m_def,repeats=True,
        nxp_name='beamline_distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-beamline-distance-field',
        nxp_optional='True',
        )
    class nxf_set_Bfield_current(NXobject):
        '''
current set on magnet supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-set-bfield-current-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_set_Bfield_current = SubSection(sub_section=nxf_set_Bfield_current.m_def,repeats=True,
        nxp_name='set_Bfield_current',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-set-bfield-current-field',
        nxp_optional='True',
        )
    class nxf_set_Efield_voltage(NXobject):
        '''
current set on HT supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-set-efield-voltage-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_set_Efield_voltage = SubSection(sub_section=nxf_set_Efield_voltage.m_def,repeats=True,
        nxp_name='set_Efield_voltage',
        nxp_type='NX_FLOAT',
        nxp_units='NX_VOLTAGE',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-set-efield-voltage-field',
        nxp_optional='True',
        )

class NXsolenoid_magnet(NXobject):
    '''
definition for a solenoid magnet.
        https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_type='group',
        nxp_name='NXsolenoid_magnet',
        nxp_category='contributed',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet',
        nxp_required='True',
        )
    class nxg_read_current(NXobject):
        '''
current read from supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-current-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-current-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_CURRENT',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-current-value-field',
            nxp_required='True',
            )
    nxg_read_current = SubSection(sub_section=nxg_read_current.m_def,repeats=True,
        nxp_name='read_current',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-current-group',
        nxp_optional='True',
        )
    class nxg_read_voltage(NXobject):
        '''
voltage read from supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-voltage-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-voltage-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_VOLTAGE',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-voltage-value-field',
            nxp_required='True',
            )
    nxg_read_voltage = SubSection(sub_section=nxg_read_voltage.m_def,repeats=True,
        nxp_name='read_voltage',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-voltage-group',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
extended description of the magnet.
            https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-description-field',
        nxp_required='True',
        )
    class nxf_beamline_distance(NXobject):
        '''
define position of beamline element relative to production target
            https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-beamline-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_beamline_distance = SubSection(sub_section=nxf_beamline_distance.m_def,repeats=True,
        nxp_name='beamline_distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-beamline-distance-field',
        nxp_optional='True',
        )
    class nxf_set_current(NXobject):
        '''
current set on supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-set-current-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_set_current = SubSection(sub_section=nxf_set_current.m_def,repeats=True,
        nxp_name='set_current',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-set-current-field',
        nxp_optional='True',
        )

class NXmagnetic_kicker(NXobject):
    '''
definition for a magnetic kicker.
        https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_type='group',
        nxp_name='NXmagnetic_kicker',
        nxp_category='contributed',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker',
        nxp_required='True',
        )
    class nxg_read_current(NXobject):
        '''
current read from supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-current-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-current-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_CURRENT',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-current-value-field',
            nxp_required='True',
            )
    nxg_read_current = SubSection(sub_section=nxg_read_current.m_def,repeats=True,
        nxp_name='read_current',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-current-group',
        nxp_optional='True',
        )
    class nxg_read_voltage(NXobject):
        '''
voltage read from supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-voltage-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        class nxf_value(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-voltage-value-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
            nxp_name='value',
            nxp_units='NX_VOLTAGE',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-voltage-value-field',
            nxp_required='True',
            )
    nxg_read_voltage = SubSection(sub_section=nxg_read_voltage.m_def,repeats=True,
        nxp_name='read_voltage',
        nxp_type='NXlog',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-voltage-group',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
extended description of the kicker.
            https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-description-field',
        nxp_required='True',
        )
    class nxf_beamline_distance(NXobject):
        '''
define position of beamline element relative to production target
            https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-beamline-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_beamline_distance = SubSection(sub_section=nxf_beamline_distance.m_def,repeats=True,
        nxp_name='beamline_distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-beamline-distance-field',
        nxp_optional='True',
        )
    class nxf_timing(NXobject):
        '''
kicker timing as defined by ``description`` attribute
            https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-timing-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_description(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-timing-description-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
            nxp_name='description',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-timing-description-attribute',
            nxp_required='True',
            )
    nxf_timing = SubSection(sub_section=nxf_timing.m_def,repeats=True,
        nxp_name='timing',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-timing-field',
        nxp_optional='True',
        )
    class nxf_set_current(NXobject):
        '''
current set on supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-set-current-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_set_current = SubSection(sub_section=nxf_set_current.m_def,repeats=True,
        nxp_name='set_current',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-set-current-field',
        nxp_optional='True',
        )
    class nxf_set_voltage(NXobject):
        '''
voltage set on supply.
            https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-set-voltage-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_set_voltage = SubSection(sub_section=nxf_set_voltage.m_def,repeats=True,
        nxp_name='set_voltage',
        nxp_type='NX_FLOAT',
        nxp_units='NX_VOLTAGE',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-set-voltage-field',
        nxp_optional='True',
        )

class NXquadric(NXobject):
    '''
definition of a quadric surface.
        https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXquadric',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='contributed',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric',
        nxp_required='True',
        )
    class nxf_parameters(NXobject):
        '''
            Ten real values of the matrix that defines the quadric surface       in
            projective space. Ordered Q11, Q12, Q13, Q22, Q23, Q33, P1,       P2, P3, R.
            Takes a units attribute of dimension reciprocal       length. R is scalar. P
            has dimension reciprocal length, and the       given units. Q has dimension
            reciprocal length squared, and       units the square of those given.
            https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-parameters-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_parameters = SubSection(sub_section=nxf_parameters.m_def,repeats=True,
        nxp_name='parameters',
        nxp_type='NX_NUMBER',
        nxp_units='NX_PER_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-parameters-field',
        nxp_required='True',
        )
    class nxf_surface_type(NXobject):
        '''
            An optional description of the form of the quadric surface:       Possible
            values:
            ['ELLIPSOID','ELLIPTIC_PARABOLOID','HYPERBOLIC_PARABOLOID','ELLIPTIC_HYPERBOLOID_OF_1_SHEET','ELLIPTIC_HYPERBOLOID_OF_2_SHEETS','ELLIPTIC_CONE','ELLIPTIC_CYLINDER','HYPERBOLIC_CYLINDER','PARABOLIC_CYLINDER','SPHEROID','SPHERE','PARABOLOID','HYPERBOLOID_1_SHEET','HYPERBOLOID_2_SHEET','CONE','CYLINDER','PLANE','IMAGINARY','UNKNOWN']

            https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-surface-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_surface_type = SubSection(sub_section=nxf_surface_type.m_def,repeats=True,
        nxp_name='surface_type',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-surface-type-field',
        nxp_optional='True',
        enumeration=['ELLIPSOID','ELLIPTIC_PARABOLOID','HYPERBOLIC_PARABOLOID','ELLIPTIC_HYPERBOLOID_OF_1_SHEET','ELLIPTIC_HYPERBOLOID_OF_2_SHEETS','ELLIPTIC_CONE','ELLIPTIC_CYLINDER','HYPERBOLIC_CYLINDER','PARABOLIC_CYLINDER','SPHEROID','SPHERE','PARABOLOID','HYPERBOLOID_1_SHEET','HYPERBOLOID_2_SHEET','CONE','CYLINDER','PLANE','IMAGINARY','UNKNOWN'],
        )
    class nxf_depends_on(NXobject):
        '''
            Path to an :ref:`NXtransformations` that defining the axis on       which the
            orientation of the surface depends.
            https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-depends-on-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_depends_on = SubSection(sub_section=nxf_depends_on.m_def,repeats=True,
        nxp_name='depends_on',
        nxp_type='NX_CHAR',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-depends-on-field',
        nxp_optional='True',
        )

class NXcsg(NXobject):
    '''
        constructive solid geometry NeXus class, using :ref:`NXquadric`     and
        :ref:`NXoff_geometry`.
        https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXcsg',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='contributed',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg',
        nxp_required='True',
        )
    class nxg_a(NXobject):
        '''
            The first operand of constructive solid geometry      operation. Compulsory if
            'operation' is UNION, INTERSECTION,      DIFFERENCE or COMPLEMENT.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-a-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcsg.m_def,repeats=True)
    nxg_a = SubSection(sub_section=nxg_a.m_def,repeats=True,
        nxp_name='a',
        nxp_type='NXcsg',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-a-group',
        nxp_optional='True',
        )
    class nxg_b(NXobject):
        '''
            The second operand of constructive solid geometry      operation. Compulsory
            if 'operation' is UNION, INTERSECTION or      DIFFERENCE.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-b-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcsg.m_def,repeats=True)
    nxg_b = SubSection(sub_section=nxg_b.m_def,repeats=True,
        nxp_name='b',
        nxp_type='NXcsg',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-b-group',
        nxp_optional='True',
        )
    class nxf_operation(NXobject):
        '''
            One of the standard construction solid geometry set operations,       or if
            the CSG is a pointer to the geometry provided by an       :ref:`NXquadric` or
            an :ref:`NXoff_geometry`. Takes values:       Possible values:
            ['UNION','INTERSECTION','DIFFERENCE','COMPLEMENT','IS_QUADRIC','IS_MESH']

            https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-operation-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_operation = SubSection(sub_section=nxf_operation.m_def,repeats=True,
        nxp_name='operation',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-operation-field',
        nxp_required='True',
        enumeration=['UNION','INTERSECTION','DIFFERENCE','COMPLEMENT','IS_QUADRIC','IS_MESH'],
        )
    class nxf_geometry(NXobject):
        '''
            Path to a field that is either an :ref:`NXquadric` (if       'operation' =
            IS_QUADRIC) or an :ref:`NXoff_geometry` (if       'operation' = IS_MESH) that
            defines the surface making up the       constructive solid geometry component.
            Compulsory if 'operation'       is IS_QUADRIC or IS_MESH.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-geometry-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_geometry = SubSection(sub_section=nxf_geometry.m_def,repeats=True,
        nxp_name='geometry',
        nxp_type='NX_CHAR',
        nxp_minOccurs='0',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-geometry-field',
        nxp_optional='True',
        )

class NXcapillary(NXobject):
    '''
        A capillary lens to focus the X-ray beam.              Based on information
        provided by Gerd Wellenreuther (DESY).
        https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXcapillary',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary',
        nxp_optional='True',
        )
    class nxg_gain(NXobject):
        '''
            The gain of the capillary as a function of energy
            https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-gain-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_gain = SubSection(sub_section=nxg_gain.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_name='gain',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-gain-group',
        nxp_optional='True',
        )
    class nxg_transmission(NXobject):
        '''
            The transmission of the capillary as a function of energy
            https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-transmission-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_transmission = SubSection(sub_section=nxg_transmission.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_name='transmission',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-transmission-group',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
Type of the capillary  Possible values:
            ['single_bounce','polycapillary','conical_capillary']

            https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-type-field',
        nxp_optional='True',
        enumeration=['single_bounce','polycapillary','conical_capillary'],
        )
    class nxf_manufacturer(NXobject):
        '''
            The manufacturer of the capillary. This is actually important as          it
            may have an impact on performance.
            https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-manufacturer-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_manufacturer = SubSection(sub_section=nxf_manufacturer.m_def,repeats=True,
        nxp_name='manufacturer',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-manufacturer-field',
        nxp_optional='True',
        )
    class nxf_maximum_incident_angle(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-maximum-incident-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_maximum_incident_angle = SubSection(sub_section=nxf_maximum_incident_angle.m_def,repeats=True,
        nxp_name='maximum_incident_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-maximum-incident-angle-field',
        nxp_optional='True',
        )
    class nxf_accepting_aperture(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-accepting-aperture-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_accepting_aperture = SubSection(sub_section=nxf_accepting_aperture.m_def,repeats=True,
        nxp_name='accepting_aperture',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-accepting-aperture-field',
        nxp_optional='True',
        )
    class nxf_working_distance(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-working-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_working_distance = SubSection(sub_section=nxf_working_distance.m_def,repeats=True,
        nxp_name='working_distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-working-distance-field',
        nxp_optional='True',
        )
    class nxf_focal_size(NXobject):
        '''
            The focal size in FWHM
            https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-focal-size-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_focal_size = SubSection(sub_section=nxf_focal_size.m_def,repeats=True,
        nxp_name='focal_size',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-focal-size-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-default-attribute',
        nxp_optional='True',
        )

class NXgeometry(NXobject):
    '''
        legacy class - recommend to use :ref:`NXtransformations` now                  It
        is recommended that instances of :ref:`NXgeometry` be converted to          use
        :ref:`NXtransformations`.                  This is the description for a general
        position of a component.          It is recommended to name an instance of
        :ref:`NXgeometry` as "geometry"         to aid in the use of the definition in
        simulation codes such as McStas.         Also, in HDF, linked items must share the
        same name.         However, it might not be possible or practical in all
        situations.
        https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXgeometry',
        nxp_type='group',
        nxp_extends='NXobject',
        deprecated=''' DEPRECATED:
        as decided at 2014 NIAC meeting, convert to use :ref:`NXtransformations`
        ''',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry',
        nxp_optional='True',
        )
    class nxg_SHAPE(NXobject):
        '''
shape/size information of component
            https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-shape-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
    nxg_SHAPE = SubSection(sub_section=nxg_SHAPE.m_def,repeats=True,
        nxp_type='NXshape',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-shape-group',
        nxp_optional='True',
        )
    class nxg_TRANSLATION(NXobject):
        '''
translation of component
            https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-translation-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
    nxg_TRANSLATION = SubSection(sub_section=nxg_TRANSLATION.m_def,repeats=True,
        nxp_type='NXtranslation',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-translation-group',
        nxp_optional='True',
        )
    class nxg_ORIENTATION(NXobject):
        '''
orientation of component
            https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-orientation-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
    nxg_ORIENTATION = SubSection(sub_section=nxg_ORIENTATION.m_def,repeats=True,
        nxp_type='NXorientation',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-orientation-group',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
            Optional description/label. Probably only present if we are             an
            additional reference point for components rather than the             location
            of a real component.
            https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-description-field',
        nxp_optional='True',
        )
    class nxf_component_index(NXobject):
        '''
            Position of the component along the beam path. The sample is at 0, components
            upstream             have negative component_index, components downstream have
            positive             component_index.
            https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-component-index-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_component_index = SubSection(sub_section=nxf_component_index.m_def,repeats=True,
        nxp_name='component_index',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-component-index-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-default-attribute',
        nxp_optional='True',
        )

class NXfermi_chopper(NXobject):
    '''
A Fermi chopper, possibly with curved slits.
        https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXfermi_chopper',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
geometry of the fermi chopper
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-geometry-group',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
Fermi chopper type
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-type-field',
        nxp_optional='True',
        )
    class nxf_rotation_speed(NXobject):
        '''
chopper rotation speed
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-rotation-speed-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_rotation_speed = SubSection(sub_section=nxf_rotation_speed.m_def,repeats=True,
        nxp_name='rotation_speed',
        nxp_type='NX_FLOAT',
        nxp_units='NX_FREQUENCY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-rotation-speed-field',
        nxp_optional='True',
        )
    class nxf_radius(NXobject):
        '''
radius of chopper
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-radius-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_radius = SubSection(sub_section=nxf_radius.m_def,repeats=True,
        nxp_name='radius',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-radius-field',
        nxp_optional='True',
        )
    class nxf_slit(NXobject):
        '''
width of an individual slit
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-slit-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_slit = SubSection(sub_section=nxf_slit.m_def,repeats=True,
        nxp_name='slit',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-slit-field',
        nxp_optional='True',
        )
    class nxf_r_slit(NXobject):
        '''
radius of curvature of slits
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-r-slit-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_r_slit = SubSection(sub_section=nxf_r_slit.m_def,repeats=True,
        nxp_name='r_slit',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-r-slit-field',
        nxp_optional='True',
        )
    class nxf_number(NXobject):
        '''
number of slits
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-number-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_number = SubSection(sub_section=nxf_number.m_def,repeats=True,
        nxp_name='number',
        nxp_type='NX_INT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-number-field',
        nxp_optional='True',
        )
    class nxf_height(NXobject):
        '''
input beam height
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-height-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_height = SubSection(sub_section=nxf_height.m_def,repeats=True,
        nxp_name='height',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-height-field',
        nxp_optional='True',
        )
    class nxf_width(NXobject):
        '''
input beam width
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-width-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_width = SubSection(sub_section=nxf_width.m_def,repeats=True,
        nxp_name='width',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-width-field',
        nxp_optional='True',
        )
    class nxf_distance(NXobject):
        '''
distance
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
        nxp_name='distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-distance-field',
        nxp_optional='True',
        )
    class nxf_wavelength(NXobject):
        '''
Wavelength transmitted by chopper
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-wavelength-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
        nxp_name='wavelength',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-wavelength-field',
        nxp_optional='True',
        )
    class nxf_energy(NXobject):
        '''
energy selected
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-energy-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
        nxp_name='energy',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-energy-field',
        nxp_optional='True',
        )
    class nxf_absorbing_material(NXobject):
        '''
absorbing material
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-absorbing-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_absorbing_material = SubSection(sub_section=nxf_absorbing_material.m_def,repeats=True,
        nxp_name='absorbing_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-absorbing-material-field',
        nxp_optional='True',
        )
    class nxf_transmitting_material(NXobject):
        '''
transmitting material
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-transmitting-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_transmitting_material = SubSection(sub_section=nxf_transmitting_material.m_def,repeats=True,
        nxp_name='transmitting_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-transmitting-material-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-default-attribute',
        nxp_optional='True',
        )

class NXbending_magnet(NXobject):
    '''
A bending magnet
        https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXbending_magnet',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet',
        nxp_optional='True',
        )
    class nxg_spectrum(NXobject):
        '''
bending magnet spectrum
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-spectrum-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_spectrum = SubSection(sub_section=nxg_spectrum.m_def,repeats=True,
        nxp_name='spectrum',
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-spectrum-group',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
"Engineering" position of bending magnet
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-geometry-group',
        nxp_optional='True',
        )
    class nxf_critical_energy(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-critical-energy-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_critical_energy = SubSection(sub_section=nxf_critical_energy.m_def,repeats=True,
        nxp_name='critical_energy',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-critical-energy-field',
        nxp_optional='True',
        )
    class nxf_bending_radius(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-bending-radius-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_bending_radius = SubSection(sub_section=nxf_bending_radius.m_def,repeats=True,
        nxp_name='bending_radius',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-bending-radius-field',
        nxp_optional='True',
        )
    class nxf_magnetic_field(NXobject):
        '''
strength of magnetic field of dipole magnets
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-magnetic-field-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_magnetic_field = SubSection(sub_section=nxf_magnetic_field.m_def,repeats=True,
        nxp_name='magnetic_field',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-magnetic-field-field',
        nxp_optional='True',
        )
    class nxf_accepted_photon_beam_divergence(NXobject):
        '''
            An array of four numbers giving X+, X-, Y+ and Y- half divergence
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-accepted-photon-beam-divergence-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_accepted_photon_beam_divergence = SubSection(sub_section=nxf_accepted_photon_beam_divergence.m_def,repeats=True,
        nxp_name='accepted_photon_beam_divergence',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-accepted-photon-beam-divergence-field',
        nxp_optional='True',
        )
    class nxf_source_distance_x(NXobject):
        '''
            Distance of source point from particle beam waist in X (horizontal) direction.
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-source-distance-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_source_distance_x = SubSection(sub_section=nxf_source_distance_x.m_def,repeats=True,
        nxp_name='source_distance_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-source-distance-x-field',
        nxp_optional='True',
        )
    class nxf_source_distance_y(NXobject):
        '''
            Distance of source point from particle beam waist in Y (vertical) direction.
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-source-distance-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_source_distance_y = SubSection(sub_section=nxf_source_distance_y.m_def,repeats=True,
        nxp_name='source_distance_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-source-distance-y-field',
        nxp_optional='True',
        )
    class nxf_divergence_x_plus(NXobject):
        '''
            Accepted photon beam divergence in X+ (horizontal outboard) direction.
            Note that divergence_x_plus+divergence_x_minus is the total horizontal beam
            divergence.
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-x-plus-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_divergence_x_plus = SubSection(sub_section=nxf_divergence_x_plus.m_def,repeats=True,
        nxp_name='divergence_x_plus',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-x-plus-field',
        nxp_optional='True',
        )
    class nxf_divergence_x_minus(NXobject):
        '''
            Accepted photon beam divergence in X- (horizontal inboard) direction.
            Note that divergence_x_plus+divergence_x_minus is the total horizontal beam
            divergence.
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-x-minus-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_divergence_x_minus = SubSection(sub_section=nxf_divergence_x_minus.m_def,repeats=True,
        nxp_name='divergence_x_minus',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-x-minus-field',
        nxp_optional='True',
        )
    class nxf_divergence_y_plus(NXobject):
        '''
            Accepted photon beam divergence in Y+ (vertical upward) direction.       Note
            that divergence_y_plus+divergence_y_minus is the total vertical beam
            divergence.
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-y-plus-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_divergence_y_plus = SubSection(sub_section=nxf_divergence_y_plus.m_def,repeats=True,
        nxp_name='divergence_y_plus',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-y-plus-field',
        nxp_optional='True',
        )
    class nxf_divergence_y_minus(NXobject):
        '''
            Accepted photon beam divergence in Y- (vertical downward) direction.
            Note that divergence_y_plus+divergence_y_minus is the total vertical beam
            divergence.
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-y-minus-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_divergence_y_minus = SubSection(sub_section=nxf_divergence_y_minus.m_def,repeats=True,
        nxp_name='divergence_y_minus',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-y-minus-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                      Declares which child group contains a
            path leading            to a :ref:`NXdata` group.                      It is
            recommended (as of NIAC2014) to use this attribute           to help define
            the path to the default dataset to be plotted.           See
            https://www.nexusformat.org/2014_How_to_find_default_data.html           for a
            summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-default-attribute',
        nxp_optional='True',
        )

class NXsensor(NXobject):
    '''
        A sensor used to monitor an external condition
        The condition itself is described in :ref:`NXenvironment`.
        https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXsensor',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor',
        nxp_optional='True',
        )
    class nxg_geometry(NXobject):
        '''
Defines the axes for logged vector quantities if they are not the global
            instrument axes
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_geometry = SubSection(sub_section=nxg_geometry.m_def,repeats=True,
        nxp_name='geometry',
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-geometry-group',
        nxp_optional='True',
        )
    class nxg_value_log(NXobject):
        '''
Time history of sensor readings
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-log-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_value_log = SubSection(sub_section=nxg_value_log.m_def,repeats=True,
        nxp_name='value_log',
        nxp_type='NXlog',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-log-group',
        nxp_optional='True',
        )
    class nxg_value_deriv1_log(NXobject):
        '''
Time history of first derivative of sensor readings
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv1-log-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_value_deriv1_log = SubSection(sub_section=nxg_value_deriv1_log.m_def,repeats=True,
        nxp_name='value_deriv1_log',
        nxp_type='NXlog',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv1-log-group',
        nxp_optional='True',
        )
    class nxg_value_deriv2_log(NXobject):
        '''
Time history of second derivative of sensor readings
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv2-log-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_value_deriv2_log = SubSection(sub_section=nxg_value_deriv2_log.m_def,repeats=True,
        nxp_name='value_deriv2_log',
        nxp_type='NXlog',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv2-log-group',
        nxp_optional='True',
        )
    class nxg_external_field_full(NXobject):
        '''
For complex external fields not satisfied by External_field_brief
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-external-field-full-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
    nxg_external_field_full = SubSection(sub_section=nxg_external_field_full.m_def,repeats=True,
        nxp_name='external_field_full',
        nxp_type='NXorientation',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-external-field-full-group',
        nxp_optional='True',
        )
    class nxf_model(NXobject):
        '''
Sensor identification code/model number
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-model-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_model = SubSection(sub_section=nxf_model.m_def,repeats=True,
        nxp_name='model',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-model-field',
        nxp_optional='True',
        )
    class nxf_name(NXobject):
        '''
Name for the sensor
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
        nxp_name='name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-name-field',
        nxp_optional='True',
        )
    class nxf_short_name(NXobject):
        '''
Short name of sensor used e.g. on monitor display program
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-short-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_short_name = SubSection(sub_section=nxf_short_name.m_def,repeats=True,
        nxp_name='short_name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-short-name-field',
        nxp_optional='True',
        )
    class nxf_attached_to(NXobject):
        '''
where sensor is attached to ("sample" | "can")
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-attached-to-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_attached_to = SubSection(sub_section=nxf_attached_to.m_def,repeats=True,
        nxp_name='attached_to',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-attached-to-field',
        nxp_optional='True',
        )
    class nxf_measurement(NXobject):
        '''
name for measured signal  Possible values:
            ['temperature','pH','magnetic_field','electric_field','conductivity','resistance','voltage','pressure','flow','stress','strain','shear','surface_pressure']

            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-measurement-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_measurement = SubSection(sub_section=nxf_measurement.m_def,repeats=True,
        nxp_name='measurement',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-measurement-field',
        nxp_optional='True',
        enumeration=['temperature','pH','magnetic_field','electric_field','conductivity','resistance','voltage','pressure','flow','stress','strain','shear','surface_pressure'],
        )
    class nxf_type(NXobject):
        '''
            The type of hardware used for the measurement.
            Examples (suggestions but not restrictions):
            :Temperature:                           J | K | T | E | R | S | Pt100 | Rh/Fe
            :pH:                           Hg/Hg2Cl2 | Ag/AgCl | ISFET
            :Ion selective electrode:                           specify species; e.g. Ca2+
            :Magnetic field:                           Hall
            :Surface pressure:                           wilhelmy plate
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-type-field',
        nxp_optional='True',
        )
    class nxf_run_control(NXobject):
        '''
            Is data collection controlled or synchronised to this quantity:
            1=no, 0=to "value", 1=to "value_deriv1", etc.
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-run-control-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
    nxf_run_control = SubSection(sub_section=nxf_run_control.m_def,repeats=True,
        nxp_name='run_control',
        nxp_type='NX_BOOLEAN',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-run-control-field',
        nxp_optional='True',
        )
    class nxf_high_trip_value(NXobject):
        '''
            Upper control bound of sensor reading if using run_control
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-high-trip-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_high_trip_value = SubSection(sub_section=nxf_high_trip_value.m_def,repeats=True,
        nxp_name='high_trip_value',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-high-trip-value-field',
        nxp_optional='True',
        )
    class nxf_low_trip_value(NXobject):
        '''
            Lower control bound of sensor reading if using run_control
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-low-trip-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_low_trip_value = SubSection(sub_section=nxf_low_trip_value.m_def,repeats=True,
        nxp_name='low_trip_value',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-low-trip-value-field',
        nxp_optional='True',
        )
    class nxf_value(NXobject):
        '''
            nominal setpoint or average value                          - need [n] as may
            be a vector
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
        nxp_name='value',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-field',
        nxp_optional='True',
        )
    class nxf_value_deriv1(NXobject):
        '''
            Nominal/average first derivative of value                          e.g. strain
            rate                          - same dimensions as "value" (may be a vector)
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv1-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_value_deriv1 = SubSection(sub_section=nxf_value_deriv1.m_def,repeats=True,
        nxp_name='value_deriv1',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv1-field',
        nxp_optional='True',
        )
    class nxf_value_deriv2(NXobject):
        '''
            Nominal/average second derivative of value                         - same
            dimensions as "value" (may be a vector)
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv2-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_value_deriv2 = SubSection(sub_section=nxf_value_deriv2.m_def,repeats=True,
        nxp_name='value_deriv2',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv2-field',
        nxp_optional='True',
        )
    class nxf_external_field_brief(NXobject):
        '''
            Possible values:    ['along beam','across
            beam','transverse','solenoidal','flow shear gradient','flow vorticity']

            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-external-field-brief-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_external_field_brief = SubSection(sub_section=nxf_external_field_brief.m_def,repeats=True,
        nxp_name='external_field_brief',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-external-field-brief-field',
        nxp_optional='True',
        enumeration=['along beam','across beam','transverse','solenoidal','flow shear gradient','flow vorticity'],
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-default-attribute',
        nxp_optional='True',
        )

class NXvelocity_selector(NXobject):
    '''
A neutron velocity selector
        https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXvelocity_selector',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector',
        nxp_optional='True',
        )
    class nxg_geometry(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_geometry = SubSection(sub_section=nxg_geometry.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_name='geometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-geometry-group',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
velocity selector type
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-type-field',
        nxp_optional='True',
        )
    class nxf_rotation_speed(NXobject):
        '''
velocity selector rotation speed
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-rotation-speed-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_rotation_speed = SubSection(sub_section=nxf_rotation_speed.m_def,repeats=True,
        nxp_name='rotation_speed',
        nxp_type='NX_FLOAT',
        nxp_units='NX_FREQUENCY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-rotation-speed-field',
        nxp_optional='True',
        )
    class nxf_radius(NXobject):
        '''
radius at beam centre
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-radius-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_radius = SubSection(sub_section=nxf_radius.m_def,repeats=True,
        nxp_name='radius',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-radius-field',
        nxp_optional='True',
        )
    class nxf_spwidth(NXobject):
        '''
spoke width at beam centre
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-spwidth-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_spwidth = SubSection(sub_section=nxf_spwidth.m_def,repeats=True,
        nxp_name='spwidth',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-spwidth-field',
        nxp_optional='True',
        )
    class nxf_length(NXobject):
        '''
rotor length
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-length-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_length = SubSection(sub_section=nxf_length.m_def,repeats=True,
        nxp_name='length',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-length-field',
        nxp_optional='True',
        )
    class nxf_num(NXobject):
        '''
number of spokes/lamella
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-num-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_num = SubSection(sub_section=nxf_num.m_def,repeats=True,
        nxp_name='num',
        nxp_type='NX_INT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-num-field',
        nxp_optional='True',
        )
    class nxf_twist(NXobject):
        '''
twist angle along axis
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-twist-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_twist = SubSection(sub_section=nxf_twist.m_def,repeats=True,
        nxp_name='twist',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-twist-field',
        nxp_optional='True',
        )
    class nxf_table(NXobject):
        '''
offset vertical angle
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-table-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_table = SubSection(sub_section=nxf_table.m_def,repeats=True,
        nxp_name='table',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-table-field',
        nxp_optional='True',
        )
    class nxf_height(NXobject):
        '''
input beam height
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-height-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_height = SubSection(sub_section=nxf_height.m_def,repeats=True,
        nxp_name='height',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-height-field',
        nxp_optional='True',
        )
    class nxf_width(NXobject):
        '''
input beam width
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-width-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_width = SubSection(sub_section=nxf_width.m_def,repeats=True,
        nxp_name='width',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-width-field',
        nxp_optional='True',
        )
    class nxf_wavelength(NXobject):
        '''
wavelength
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-wavelength-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
        nxp_name='wavelength',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-wavelength-field',
        nxp_optional='True',
        )
    class nxf_wavelength_spread(NXobject):
        '''
deviation FWHM /Wavelength
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-wavelength-spread-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_wavelength_spread = SubSection(sub_section=nxf_wavelength_spread.m_def,repeats=True,
        nxp_name='wavelength_spread',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-wavelength-spread-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-default-attribute',
        nxp_optional='True',
        )

class NXdetector(NXobject):
    '''
        A detector, detector bank, or multidetector.
        https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_extends='NXobject',
        nxp_name='NXdetector',
        nxp_type='group',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
Position and orientation of detector
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-geometry-group',
        nxp_optional='True',
        )
    class nxg_efficiency(NXobject):
        '''
Spectral efficiency of detector with respect to e.g. wavelength
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        class nxa_signal(NXobject):
            '''
                Obligatory value:    ['efficiency']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-signal-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
            nxp_name='signal',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-signal-attribute',
            nxp_optional='True',
            enumeration=['efficiency'],
            )
        class nxa_axes(NXobject):
            '''
                Possible values:    ['.','. .','. . .','. . . .','wavelength']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-axes-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_axes = SubSection(sub_section=nxa_axes.m_def,repeats=True,
            nxp_name='axes',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-axes-attribute',
            nxp_optional='True',
            enumeration=['.','. .','. . .','. . . .','wavelength'],
            )
        class nxa_wavelength_indices(NXobject):
            '''
                Obligatory value:    ['0']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-wavelength-indices-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_wavelength_indices = SubSection(sub_section=nxa_wavelength_indices.m_def,repeats=True,
            nxp_name='wavelength_indices',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-wavelength-indices-attribute',
            nxp_optional='True',
            enumeration=['0'],
            )
        class nxf_efficiency(NXobject):
            '''
efficiency of the detector
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-efficiency-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_efficiency = SubSection(sub_section=nxf_efficiency.m_def,repeats=True,
            nxp_name='efficiency',
            nxp_type='NX_FLOAT',
            nxp_units='NX_DIMENSIONLESS',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-efficiency-field',
            nxp_optional='True',
            )
        class nxf_wavelength(NXobject):
            '''
                This field can be two things:

                #. For a pixel detector it provides the nominal wavelength            for
                which the detector has been calibrated.

                #. For other detectors this field has to be seen together with
                the efficiency field above.            For some detectors, the efficiency
                is wavelength dependent.            Thus this field provides the
                wavelength axis for the efficiency field.            In this use case, the
                efficiency and wavelength arrays must            have the same
                dimensionality.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-wavelength-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
            nxp_name='wavelength',
            nxp_type='NX_FLOAT',
            nxp_units='NX_WAVELENGTH',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-wavelength-field',
            nxp_optional='True',
            )
    nxg_efficiency = SubSection(sub_section=nxg_efficiency.m_def,repeats=True,
        nxp_name='efficiency',
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-group',
        nxp_optional='True',
        )
    class nxg_calibration_method(NXobject):
        '''
            summary of conversion of array data to pixels (e.g. polynomial
            approximations) and location of details of the calibrations
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-calibration-method-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_calibration_method = SubSection(sub_section=nxg_calibration_method.m_def,repeats=True,
        nxp_name='calibration_method',
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-calibration-method-group',
        nxp_optional='True',
        )
    class nxg_data_file(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-file-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_data_file = SubSection(sub_section=nxg_data_file.m_def,repeats=True,
        nxp_name='data_file',
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-file-group',
        nxp_optional='True',
        )
    class nxg_COLLECTION(NXobject):
        '''
            Use this group to provide other data related to this NXdetector group.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-collection-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
    nxg_COLLECTION = SubSection(sub_section=nxg_COLLECTION.m_def,repeats=True,
        nxp_type='NXcollection',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-collection-group',
        nxp_optional='True',
        )
    class nxg_DETECTOR_MODULE(NXobject):
        '''
            For use in special cases where the data in NXdetector       is represented in
            several parts, each with a separate geometry.

            Use one or more instances of the NXdetector_module       group to declare
            regions of interest or some other       subdivision of a detector.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-module-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdetector_module.m_def,repeats=True)
    nxg_DETECTOR_MODULE = SubSection(sub_section=nxg_DETECTOR_MODULE.m_def,repeats=True,
        nxp_type='NXdetector_module',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-module-group',
        nxp_optional='True',
        )
    class nxf_time_of_flight(NXobject):
        '''
Total time of flight
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_axis(NXobject):
            '''
                Obligatory value:    ['3']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-axis-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxa_axis = SubSection(sub_section=nxa_axis.m_def,repeats=True,
            nxp_name='axis',
            nxp_type='NX_POSINT',
            deprecated=''' DEPRECATED:
            see: https://github.com/nexusformat/definitions/issues/436
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-axis-attribute',
            nxp_optional='True',
            enumeration=['3'],
            )
        class nxa_primary(NXobject):
            '''
                Obligatory value:    ['1']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-primary-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxa_primary = SubSection(sub_section=nxa_primary.m_def,repeats=True,
            nxp_name='primary',
            nxp_type='NX_POSINT',
            deprecated=''' DEPRECATED:
            see: https://github.com/nexusformat/definitions/issues/436
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-primary-attribute',
            nxp_optional='True',
            enumeration=['1'],
            )
        class nxa_long_name(NXobject):
            '''
Total time of flight
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-long-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_long_name = SubSection(sub_section=nxa_long_name.m_def,repeats=True,
            nxp_name='long_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-long-name-attribute',
            nxp_optional='True',
            )
    nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
        nxp_name='time_of_flight',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME_OF_FLIGHT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-field',
        nxp_optional='True',
        )
    class nxf_raw_time_of_flight(NXobject):
        '''
In DAQ clock pulses
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-raw-time-of-flight-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        class nxa_frequency(NXobject):
            '''
Clock frequency in Hz
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-raw-time-of-flight-frequency-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxa_frequency = SubSection(sub_section=nxa_frequency.m_def,repeats=True,
            nxp_name='frequency',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-raw-time-of-flight-frequency-attribute',
            nxp_optional='True',
            )
    nxf_raw_time_of_flight = SubSection(sub_section=nxf_raw_time_of_flight.m_def,repeats=True,
        nxp_name='raw_time_of_flight',
        nxp_type='NX_INT',
        nxp_units='NX_PULSES',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-raw-time-of-flight-field',
        nxp_optional='True',
        )
    class nxf_detector_number(NXobject):
        '''
            Identifier for detector (pixels)         Can be multidimensional, if needed
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-number-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_detector_number = SubSection(sub_section=nxf_detector_number.m_def,repeats=True,
        nxp_name='detector_number',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-number-field',
        nxp_optional='True',
        )
    class nxf_data(NXobject):
        '''
Data values from the detector.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_long_name(NXobject):
            '''
Title of measurement
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-long-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_long_name = SubSection(sub_section=nxa_long_name.m_def,repeats=True,
            nxp_name='long_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-long-name-attribute',
            nxp_optional='True',
            )
        class nxa_check_sum(NXobject):
            '''
Integral of data as check of data integrity
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-check-sum-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxa_check_sum = SubSection(sub_section=nxa_check_sum.m_def,repeats=True,
            nxp_name='check_sum',
            nxp_type='NX_INT',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-check-sum-attribute',
            nxp_optional='True',
            )
    nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
        nxp_name='data',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-field',
        nxp_optional='True',
        )
    class nxf_data_errors(NXobject):
        '''
            The best estimate of the uncertainty in the data value. Where       possible,
            this should be the standard deviation, which has the same units       as the
            data. The form data_error is deprecated.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_data_errors = SubSection(sub_section=nxf_data_errors.m_def,repeats=True,
        nxp_name='data_errors',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-errors-field',
        nxp_optional='True',
        )
    class nxf_x_pixel_offset(NXobject):
        '''
            Offset from the detector center in x-direction.   Can be multidimensional when
            needed.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_axis(NXobject):
            '''
                Obligatory value:    ['1']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-axis-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxa_axis = SubSection(sub_section=nxa_axis.m_def,repeats=True,
            nxp_name='axis',
            nxp_type='NX_POSINT',
            deprecated=''' DEPRECATED:
            see: https://github.com/nexusformat/definitions/issues/436
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-axis-attribute',
            nxp_optional='True',
            enumeration=['1'],
            )
        class nxa_primary(NXobject):
            '''
                Obligatory value:    ['1']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-primary-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxa_primary = SubSection(sub_section=nxa_primary.m_def,repeats=True,
            nxp_name='primary',
            nxp_type='NX_POSINT',
            deprecated=''' DEPRECATED:
            see: https://github.com/nexusformat/definitions/issues/436
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-primary-attribute',
            nxp_optional='True',
            enumeration=['1'],
            )
        class nxa_long_name(NXobject):
            '''
x-axis offset from detector center
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-long-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_long_name = SubSection(sub_section=nxa_long_name.m_def,repeats=True,
            nxp_name='long_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-long-name-attribute',
            nxp_optional='True',
            )
    nxf_x_pixel_offset = SubSection(sub_section=nxf_x_pixel_offset.m_def,repeats=True,
        nxp_name='x_pixel_offset',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-field',
        nxp_optional='True',
        )
    class nxf_y_pixel_offset(NXobject):
        '''
            Offset from the detector center in the y-direction.   Can be multidimensional
            when different values are required for each pixel.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_axis(NXobject):
            '''
                Obligatory value:    ['2']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-axis-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxa_axis = SubSection(sub_section=nxa_axis.m_def,repeats=True,
            nxp_name='axis',
            nxp_type='NX_POSINT',
            deprecated=''' DEPRECATED:
            see: https://github.com/nexusformat/definitions/issues/436
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-axis-attribute',
            nxp_optional='True',
            enumeration=['2'],
            )
        class nxa_primary(NXobject):
            '''
                Obligatory value:    ['1']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-primary-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxa_primary = SubSection(sub_section=nxa_primary.m_def,repeats=True,
            nxp_name='primary',
            nxp_type='NX_POSINT',
            deprecated=''' DEPRECATED:
            see: https://github.com/nexusformat/definitions/issues/436
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-primary-attribute',
            nxp_optional='True',
            enumeration=['1'],
            )
        class nxa_long_name(NXobject):
            '''
y-axis offset from detector center
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-long-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_long_name = SubSection(sub_section=nxa_long_name.m_def,repeats=True,
            nxp_name='long_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-long-name-attribute',
            nxp_optional='True',
            )
    nxf_y_pixel_offset = SubSection(sub_section=nxf_y_pixel_offset.m_def,repeats=True,
        nxp_name='y_pixel_offset',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-field',
        nxp_optional='True',
        )
    class nxf_z_pixel_offset(NXobject):
        '''
            Offset from the detector center in the z-direction.         Can be
            multidimensional when different values are required for each pixel.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_axis(NXobject):
            '''
                Obligatory value:    ['3']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-axis-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxa_axis = SubSection(sub_section=nxa_axis.m_def,repeats=True,
            nxp_name='axis',
            nxp_type='NX_POSINT',
            deprecated=''' DEPRECATED:
            see: https://github.com/nexusformat/definitions/issues/436
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-axis-attribute',
            nxp_optional='True',
            enumeration=['3'],
            )
        class nxa_primary(NXobject):
            '''
                Obligatory value:    ['1']

                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-primary-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxa_primary = SubSection(sub_section=nxa_primary.m_def,repeats=True,
            nxp_name='primary',
            nxp_type='NX_POSINT',
            deprecated=''' DEPRECATED:
            see: https://github.com/nexusformat/definitions/issues/436
            ''',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-primary-attribute',
            nxp_optional='True',
            enumeration=['1'],
            )
        class nxa_long_name(NXobject):
            '''
y-axis offset from detector center
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-long-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_long_name = SubSection(sub_section=nxa_long_name.m_def,repeats=True,
            nxp_name='long_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-long-name-attribute',
            nxp_optional='True',
            )
    nxf_z_pixel_offset = SubSection(sub_section=nxf_z_pixel_offset.m_def,repeats=True,
        nxp_name='z_pixel_offset',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-field',
        nxp_optional='True',
        )
    class nxf_distance(NXobject):
        '''
            This is the distance to the previous component in the       instrument; most
            often the sample. The usage depends on the       nature of the detector: Most
            often it is the distance of the       detector assembly. But there are
            irregular detectors. In this       case the distance must be specified for
            each detector pixel.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
        nxp_name='distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-distance-field',
        nxp_optional='True',
        )
    class nxf_polar_angle(NXobject):
        '''
            This is the polar angle of the detector towards the previous       component
            in the instrument; most often the sample.       The usage depends on the
            nature of the detector.       Most often it is the polar_angle of the detector
            assembly.       But there are irregular detectors.       In this       case,
            the polar_angle  must be specified for each detector pixel.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-polar-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
        nxp_name='polar_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-polar-angle-field',
        nxp_optional='True',
        )
    class nxf_azimuthal_angle(NXobject):
        '''
            This is the azimuthal angle angle of the detector towards       the previous
            component in the instrument; most often the sample.       The usage depends on
            the       nature of the detector.       Most often it is the azimuthal_angle
            of the detector assembly.       But there are irregular detectors.       In
            this       case, the azimuthal_angle  must be specified for each detector
            pixel.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-azimuthal-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
        nxp_name='azimuthal_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-azimuthal-angle-field',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
name/manufacturer/model/etc. information
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-description-field',
        nxp_optional='True',
        )
    class nxf_serial_number(NXobject):
        '''
Serial number for the detector
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-serial-number-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_serial_number = SubSection(sub_section=nxf_serial_number.m_def,repeats=True,
        nxp_name='serial_number',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-serial-number-field',
        nxp_optional='True',
        )
    class nxf_local_name(NXobject):
        '''
Local name for the detector
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-local-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_local_name = SubSection(sub_section=nxf_local_name.m_def,repeats=True,
        nxp_name='local_name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-local-name-field',
        nxp_optional='True',
        )
    class nxf_solid_angle(NXobject):
        '''
Solid angle subtended by the detector at the sample
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-solid-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_solid_angle = SubSection(sub_section=nxf_solid_angle.m_def,repeats=True,
        nxp_name='solid_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_SOLID_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-solid-angle-field',
        nxp_optional='True',
        )
    class nxf_x_pixel_size(NXobject):
        '''
            Size of each detector pixel. If it is scalar all pixels are the same size.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-size-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_x_pixel_size = SubSection(sub_section=nxf_x_pixel_size.m_def,repeats=True,
        nxp_name='x_pixel_size',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-size-field',
        nxp_optional='True',
        )
    class nxf_y_pixel_size(NXobject):
        '''
Size of each detector pixel. If it is scalar all pixels are the same size
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-size-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_y_pixel_size = SubSection(sub_section=nxf_y_pixel_size.m_def,repeats=True,
        nxp_name='y_pixel_size',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-size-field',
        nxp_optional='True',
        )
    class nxf_dead_time(NXobject):
        '''
Detector dead time
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-dead-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_dead_time = SubSection(sub_section=nxf_dead_time.m_def,repeats=True,
        nxp_name='dead_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-dead-time-field',
        nxp_optional='True',
        )
    class nxf_gas_pressure(NXobject):
        '''
Detector gas pressure
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-gas-pressure-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_gas_pressure = SubSection(sub_section=nxf_gas_pressure.m_def,repeats=True,
        nxp_name='gas_pressure',
        nxp_type='NX_FLOAT',
        nxp_units='NX_PRESSURE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-gas-pressure-field',
        nxp_optional='True',
        )
    class nxf_detection_gas_path(NXobject):
        '''
maximum drift space dimension
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detection-gas-path-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_detection_gas_path = SubSection(sub_section=nxf_detection_gas_path.m_def,repeats=True,
        nxp_name='detection_gas_path',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detection-gas-path-field',
        nxp_optional='True',
        )
    class nxf_crate(NXobject):
        '''
Crate number of detector
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-crate-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        class nxa_local_name(NXobject):
            '''
Equivalent local term
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-crate-local-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_local_name = SubSection(sub_section=nxa_local_name.m_def,repeats=True,
            nxp_name='local_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-crate-local-name-attribute',
            nxp_optional='True',
            )
    nxf_crate = SubSection(sub_section=nxf_crate.m_def,repeats=True,
        nxp_name='crate',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-crate-field',
        nxp_optional='True',
        )
    class nxf_slot(NXobject):
        '''
Slot number of detector
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-slot-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        class nxa_local_name(NXobject):
            '''
Equivalent local term
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-slot-local-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_local_name = SubSection(sub_section=nxa_local_name.m_def,repeats=True,
            nxp_name='local_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-slot-local-name-attribute',
            nxp_optional='True',
            )
    nxf_slot = SubSection(sub_section=nxf_slot.m_def,repeats=True,
        nxp_name='slot',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-slot-field',
        nxp_optional='True',
        )
    class nxf_input(NXobject):
        '''
Input number of detector
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-input-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        class nxa_local_name(NXobject):
            '''
Equivalent local term
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-input-local-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_local_name = SubSection(sub_section=nxa_local_name.m_def,repeats=True,
            nxp_name='local_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-input-local-name-attribute',
            nxp_optional='True',
            )
    nxf_input = SubSection(sub_section=nxf_input.m_def,repeats=True,
        nxp_name='input',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-input-field',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
            Description of type such as He3 gas cylinder, He3 PSD, scintillator,
            fission chamber, proportion counter, ion chamber, ccd, pixel, image plate,
            CMOS, ...
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-type-field',
        nxp_optional='True',
        )
    class nxf_real_time(NXobject):
        '''
            Real-time of the exposure (use this if exposure time varies for       each
            array element, otherwise use ``count_time`` field).                    Most
            often there is a single real time value that is constant across       an
            entire image frame.  In such cases, only a 1-D array is needed.       But
            there are detectors in which the real time       changes per pixel. In that
            case, more than one dimension is needed. Therefore       the rank of this
            field should be less than or equal to (detector rank + 1).
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-real-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_real_time = SubSection(sub_section=nxf_real_time.m_def,repeats=True,
        nxp_name='real_time',
        nxp_type='NX_NUMBER',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-real-time-field',
        nxp_optional='True',
        )
    class nxf_start_time(NXobject):
        '''
start time for each frame, with the ``start`` attribute as absolute reference
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-start-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_start(NXobject):
            '''
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-start-time-start-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxa_start = SubSection(sub_section=nxa_start.m_def,repeats=True,
            nxp_name='start',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-start-time-start-attribute',
            nxp_optional='True',
            )
    nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
        nxp_name='start_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-start-time-field',
        nxp_optional='True',
        )
    class nxf_stop_time(NXobject):
        '''
stop time for each frame, with the ``start`` attribute as absolute reference
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-stop-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_start(NXobject):
            '''
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-stop-time-start-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxa_start = SubSection(sub_section=nxa_start.m_def,repeats=True,
            nxp_name='start',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-stop-time-start-attribute',
            nxp_optional='True',
            )
    nxf_stop_time = SubSection(sub_section=nxf_stop_time.m_def,repeats=True,
        nxp_name='stop_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-stop-time-field',
        nxp_optional='True',
        )
    class nxf_calibration_date(NXobject):
        '''
            date of last calibration (geometry and/or efficiency) measurements
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-calibration-date-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxf_calibration_date = SubSection(sub_section=nxf_calibration_date.m_def,repeats=True,
        nxp_name='calibration_date',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-calibration-date-field',
        nxp_optional='True',
        )
    class nxf_layout(NXobject):
        '''
How the detector is represented  Possible values:    ['point','linear','area']

            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-layout-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_layout = SubSection(sub_section=nxf_layout.m_def,repeats=True,
        nxp_name='layout',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-layout-field',
        nxp_optional='True',
        enumeration=['point','linear','area'],
        )
    class nxf_count_time(NXobject):
        '''
Elapsed actual counting time
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-count-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_count_time = SubSection(sub_section=nxf_count_time.m_def,repeats=True,
        nxp_name='count_time',
        nxp_type='NX_NUMBER',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-count-time-field',
        nxp_optional='True',
        )
    class nxf_sequence_number(NXobject):
        '''
            In order to properly sort the order of the images taken in (for       example)
            a tomography experiment, a sequence number is stored with each       image.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sequence-number-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_sequence_number = SubSection(sub_section=nxf_sequence_number.m_def,repeats=True,
        nxp_name='sequence_number',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sequence-number-field',
        nxp_optional='True',
        )
    class nxf_beam_center_x(NXobject):
        '''
            This is the x position where the direct beam would hit the detector.
            This is a length and can be outside of the actual       detector. The length
            can be in physical units or pixels       as documented by the units attribute.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-beam-center-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_beam_center_x = SubSection(sub_section=nxf_beam_center_x.m_def,repeats=True,
        nxp_name='beam_center_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-beam-center-x-field',
        nxp_optional='True',
        )
    class nxf_beam_center_y(NXobject):
        '''
            This is the y position where the direct beam would hit the detector.
            This is a length and can be outside of the actual       detector. The length
            can be in physical units or pixels       as documented by the units attribute.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-beam-center-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_beam_center_y = SubSection(sub_section=nxf_beam_center_y.m_def,repeats=True,
        nxp_name='beam_center_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-beam-center-y-field',
        nxp_optional='True',
        )
    class nxf_frame_start_number(NXobject):
        '''
            This is the start number of the first frame of a scan. In PX one       often
            scans a couple of frames on a give sample, then does something else,
            then returns to the same sample and scans some more frames. Each time with
            a new data file. This number helps concatenating such measurements.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-frame-start-number-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_frame_start_number = SubSection(sub_section=nxf_frame_start_number.m_def,repeats=True,
        nxp_name='frame_start_number',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-frame-start-number-field',
        nxp_optional='True',
        )
    class nxf_diameter(NXobject):
        '''
The diameter of a cylindrical detector
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-diameter-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_diameter = SubSection(sub_section=nxf_diameter.m_def,repeats=True,
        nxp_name='diameter',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-diameter-field',
        nxp_optional='True',
        )
    class nxf_acquisition_mode(NXobject):
        '''
The acquisition mode of the detector.  Possible values:
            ['gated','triggered','summed','event','histogrammed','decimated']

            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-acquisition-mode-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_acquisition_mode = SubSection(sub_section=nxf_acquisition_mode.m_def,repeats=True,
        nxp_name='acquisition_mode',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-acquisition-mode-field',
        nxp_optional='True',
        enumeration=['gated','triggered','summed','event','histogrammed','decimated'],
        )
    class nxf_angular_calibration_applied(NXobject):
        '''
            True when the angular calibration has been applied in the       electronics,
            false otherwise.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-angular-calibration-applied-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
    nxf_angular_calibration_applied = SubSection(sub_section=nxf_angular_calibration_applied.m_def,repeats=True,
        nxp_name='angular_calibration_applied',
        nxp_type='NX_BOOLEAN',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-angular-calibration-applied-field',
        nxp_optional='True',
        )
    class nxf_angular_calibration(NXobject):
        '''
Angular calibration data.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-angular-calibration-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_angular_calibration = SubSection(sub_section=nxf_angular_calibration.m_def,repeats=True,
        nxp_name='angular_calibration',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-angular-calibration-field',
        nxp_optional='True',
        )
    class nxf_flatfield_applied(NXobject):
        '''
            True when the flat field correction has been applied in the       electronics,
            false otherwise.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-applied-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
    nxf_flatfield_applied = SubSection(sub_section=nxf_flatfield_applied.m_def,repeats=True,
        nxp_name='flatfield_applied',
        nxp_type='NX_BOOLEAN',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-applied-field',
        nxp_optional='True',
        )
    class nxf_flatfield(NXobject):
        '''
Flat field correction data.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_flatfield = SubSection(sub_section=nxf_flatfield.m_def,repeats=True,
        nxp_name='flatfield',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-field',
        nxp_optional='True',
        )
    class nxf_flatfield_errors(NXobject):
        '''
            Errors of the flat field correction data.         The form flatfield_error is
            deprecated.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_flatfield_errors = SubSection(sub_section=nxf_flatfield_errors.m_def,repeats=True,
        nxp_name='flatfield_errors',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-errors-field',
        nxp_optional='True',
        )
    class nxf_pixel_mask_applied(NXobject):
        '''
            True when the pixel mask correction has been applied in the       electronics,
            false otherwise.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-pixel-mask-applied-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
    nxf_pixel_mask_applied = SubSection(sub_section=nxf_pixel_mask_applied.m_def,repeats=True,
        nxp_name='pixel_mask_applied',
        nxp_type='NX_BOOLEAN',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-pixel-mask-applied-field',
        nxp_optional='True',
        )
    class nxf_pixel_mask(NXobject):
        '''
            The 32-bit pixel mask for the detector. Can be either one mask       for the
            whole dataset (i.e. an array with indices i, j) or       each frame can have
            its own mask (in which case it would be       an array with indices np, i, j).

            Contains a bit field for each pixel to signal dead,       blind or high or
            otherwise unwanted or undesirable pixels.       They have the following
            meaning:

            .. can't make a table here, a bullet list will have to do for now

            * bit 0: gap (pixel with no sensor)       * bit 1: dead       * bit 2: under
            responding       * bit 3: over responding       * bit 4: noisy       * bit 5:
            -undefined-       * bit 6: pixel is part of a cluster of problematic pixels
            (bit set in addition to others)       * bit 7: -undefined-       * bit 8: user
            defined mask (e.g. around beamstop)       * bits 9-30: -undefined-       * bit
            31: virtual pixel (corner pixel with interpolated value)

            Normal data analysis software would       not take pixels into account
            when a bit in (mask & 0x0000FFFF) is       set. Tag bit in the upper       two
            bytes would indicate special pixel       properties that normally       would
            not be a sole reason to reject the       intensity value (unless       lower
            bits are set.

            If the full bit depths is not required, providing a       mask with fewer bits
            is permissible.

            If needed, additional pixel masks can be specified by       including
            additional entries named pixel_mask_N, where       N is an integer. For
            example, a general bad pixel mask       could be specified in pixel_mask that
            indicates noisy       and dead pixels, and an additional pixel mask from
            experiment-specific shadowing could be specified in       pixel_mask_2. The
            cumulative mask is the bitwise OR       of pixel_mask and any pixel_mask_N
            entries.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-pixel-mask-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_pixel_mask = SubSection(sub_section=nxf_pixel_mask.m_def,repeats=True,
        nxp_name='pixel_mask',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-pixel-mask-field',
        nxp_optional='True',
        )
    class nxf_countrate_correction_applied(NXobject):
        '''
            True when a count-rate correction has already been applied in the
            electronics, false otherwise.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-countrate-correction-applied-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
    nxf_countrate_correction_applied = SubSection(sub_section=nxf_countrate_correction_applied.m_def,repeats=True,
        nxp_name='countrate_correction_applied',
        nxp_type='NX_BOOLEAN',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-countrate-correction-applied-field',
        nxp_optional='True',
        )
    class nxf_bit_depth_readout(NXobject):
        '''
            How many bits the electronics reads per pixel.       With CCD's and single
            photon counting detectors,       this must not align with traditional integer
            sizes.       This can be 4, 8, 12, 14, 16, ...
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-bit-depth-readout-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_bit_depth_readout = SubSection(sub_section=nxf_bit_depth_readout.m_def,repeats=True,
        nxp_name='bit_depth_readout',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-bit-depth-readout-field',
        nxp_optional='True',
        )
    class nxf_detector_readout_time(NXobject):
        '''
            Time it takes to read the detector (typically milliseconds).       This is
            important to know for time resolved experiments.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-readout-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_detector_readout_time = SubSection(sub_section=nxf_detector_readout_time.m_def,repeats=True,
        nxp_name='detector_readout_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-readout-time-field',
        nxp_optional='True',
        )
    class nxf_trigger_delay_time(NXobject):
        '''
            Time it takes to start exposure after a trigger signal has been received.
            This is the reaction time of the detector firmware after receiving the trigger
            signal       to when the detector starts to acquire the exposure, including
            any user set delay..       This is important to know for time resolved
            experiments.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-delay-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_trigger_delay_time = SubSection(sub_section=nxf_trigger_delay_time.m_def,repeats=True,
        nxp_name='trigger_delay_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-delay-time-field',
        nxp_optional='True',
        )
    class nxf_trigger_delay_time_set(NXobject):
        '''
            User-specified trigger delay.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-delay-time-set-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_trigger_delay_time_set = SubSection(sub_section=nxf_trigger_delay_time_set.m_def,repeats=True,
        nxp_name='trigger_delay_time_set',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-delay-time-set-field',
        nxp_optional='True',
        )
    class nxf_trigger_internal_delay_time(NXobject):
        '''
            Time it takes to start exposure after a trigger signal has been received.
            This is the reaction time of the detector hardware after receiving the
            trigger signal to when the detector starts to acquire the exposure.       It
            forms the lower boundary of the trigger_delay_time when the user       does
            not request an additional delay.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-internal-delay-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_trigger_internal_delay_time = SubSection(sub_section=nxf_trigger_internal_delay_time.m_def,repeats=True,
        nxp_name='trigger_internal_delay_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-internal-delay-time-field',
        nxp_optional='True',
        )
    class nxf_trigger_dead_time(NXobject):
        '''
            Time during which no new trigger signal can be accepted.       Typically this
            is the       trigger_delay_time + exposure_time + readout_time.       This is
            important to know for time resolved experiments.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-dead-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_trigger_dead_time = SubSection(sub_section=nxf_trigger_dead_time.m_def,repeats=True,
        nxp_name='trigger_dead_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-dead-time-field',
        nxp_optional='True',
        )
    class nxf_frame_time(NXobject):
        '''
            This is time for each frame. This is exposure_time + readout time.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-frame-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_frame_time = SubSection(sub_section=nxf_frame_time.m_def,repeats=True,
        nxp_name='frame_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-frame-time-field',
        nxp_optional='True',
        )
    class nxf_gain_setting(NXobject):
        '''
The gain setting of the detector. This influences background etc.  Possible
            values:    ['high','standard','fast','auto']

            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-gain-setting-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_gain_setting = SubSection(sub_section=nxf_gain_setting.m_def,repeats=True,
        nxp_name='gain_setting',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-gain-setting-field',
        nxp_optional='True',
        enumeration=['high','standard','fast','auto'],
        )
    class nxf_saturation_value(NXobject):
        '''
            The value at which the detector goes into saturation.       Especially common
            to CCD detectors, the data       is known to be invalid above this value.

            For example, given a saturation_value and an underload_value, the valid
            pixels are those less than or equal to the saturation_value and greater
            than or equal to the underload_value.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-saturation-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_saturation_value = SubSection(sub_section=nxf_saturation_value.m_def,repeats=True,
        nxp_name='saturation_value',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-saturation-value-field',
        nxp_optional='True',
        )
    class nxf_underload_value(NXobject):
        '''
            The lowest value at which pixels for this detector would be reasonably
            measured. The data is known to be invalid below this value.

            For example, given a saturation_value and an underload_value, the valid
            pixels are those less than or equal to the saturation_value and greater
            than or equal to the underload_value.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-underload-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_underload_value = SubSection(sub_section=nxf_underload_value.m_def,repeats=True,
        nxp_name='underload_value',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-underload-value-field',
        nxp_optional='True',
        )
    class nxf_number_of_cycles(NXobject):
        '''
            CCD images are sometimes constructed by summing       together multiple short
            exposures in the       electronics. This reduces background etc.       This is
            the number of short exposures used to sum       images for an image.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-number-of-cycles-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_number_of_cycles = SubSection(sub_section=nxf_number_of_cycles.m_def,repeats=True,
        nxp_name='number_of_cycles',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-number-of-cycles-field',
        nxp_optional='True',
        )
    class nxf_sensor_material(NXobject):
        '''
            At times, radiation is not directly sensed by the detector.       Rather, the
            detector might sense the output from some       converter like a scintillator.
            This is the name of this converter material.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sensor-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_sensor_material = SubSection(sub_section=nxf_sensor_material.m_def,repeats=True,
        nxp_name='sensor_material',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sensor-material-field',
        nxp_optional='True',
        )
    class nxf_sensor_thickness(NXobject):
        '''
            At times, radiation is not directly sensed by the detector.        Rather, the
            detector might sense the output from some        converter like a
            scintillator.        This is the thickness of this converter material.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sensor-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_sensor_thickness = SubSection(sub_section=nxf_sensor_thickness.m_def,repeats=True,
        nxp_name='sensor_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sensor-thickness-field',
        nxp_optional='True',
        )
    class nxf_threshold_energy(NXobject):
        '''
            Single photon counter detectors can be adjusted       for a certain energy
            range in which they       work optimally. This is the energy setting for this.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-threshold-energy-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_threshold_energy = SubSection(sub_section=nxf_threshold_energy.m_def,repeats=True,
        nxp_name='threshold_energy',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-threshold-energy-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                      Declares which child group contains a
            path leading            to a :ref:`NXdata` group.                      It is
            recommended (as of NIAC2014) to use this attribute           to help define
            the path to the default dataset to be plotted.           See
            https://www.nexusformat.org/2014_How_to_find_default_data.html           for a
            summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-default-attribute',
        nxp_optional='True',
        )

class NXbeam_stop(NXobject):
    '''
        A device that blocks the beam completely, usually to protect a detector.
        Beamstops and their positions are important for SANS         and SAXS experiments.
        https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXbeam_stop',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
engineering shape, orientation and position of the beam stop.
            https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-geometry-group',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
description of beamstop  Possible values:    ['circular','rectangular']

            https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-description-field',
        nxp_optional='True',
        enumeration=['circular','rectangular'],
        )
    class nxf_size(NXobject):
        '''
size of beamstop
            https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-size-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_size = SubSection(sub_section=nxf_size.m_def,repeats=True,
        nxp_name='size',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-size-field',
        nxp_optional='True',
        )
    class nxf_x(NXobject):
        '''
x position of the beamstop in relation to the detector
            https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_x = SubSection(sub_section=nxf_x.m_def,repeats=True,
        nxp_name='x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-x-field',
        nxp_optional='True',
        )
    class nxf_y(NXobject):
        '''
y position of the beamstop in relation to the detector
            https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_y = SubSection(sub_section=nxf_y.m_def,repeats=True,
        nxp_name='y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-y-field',
        nxp_optional='True',
        )
    class nxf_distance_to_detector(NXobject):
        '''
distance of the beamstop to the detector
            https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-distance-to-detector-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_distance_to_detector = SubSection(sub_section=nxf_distance_to_detector.m_def,repeats=True,
        nxp_name='distance_to_detector',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-distance-to-detector-field',
        nxp_optional='True',
        )
    class nxf_status(NXobject):
        '''
            Possible values:    ['in','out']

            https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-status-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_status = SubSection(sub_section=nxf_status.m_def,repeats=True,
        nxp_name='status',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-status-field',
        nxp_optional='True',
        enumeration=['in','out'],
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-default-attribute',
        nxp_optional='True',
        )

class NXcrystal(NXobject):
    '''
        A crystal monochromator or analyzer.           Permits double bent
        monochromator comprised of multiple segments with anisotropic      Gaussian
        mosaic.          If curvatures are set to zero or are absent, array      is
        considered to be flat.          Scattering vector is perpendicular to surface.
        Crystal is oriented     parallel to beam incident on crystal before rotation, and
        lies in     vertical plane.
        https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXcrystal',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
Position of crystal
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-geometry-group',
        nxp_optional='True',
        )
    class nxg_temperature_log(NXobject):
        '''
log file of crystal temperature
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-log-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_temperature_log = SubSection(sub_section=nxg_temperature_log.m_def,repeats=True,
        nxp_type='NXlog',
        nxp_name='temperature_log',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-log-group',
        nxp_optional='True',
        )
    class nxg_reflectivity(NXobject):
        '''
crystal reflectivity versus wavelength
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-reflectivity-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_reflectivity = SubSection(sub_section=nxg_reflectivity.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_name='reflectivity',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-reflectivity-group',
        nxp_optional='True',
        )
    class nxg_transmission(NXobject):
        '''
crystal transmission versus wavelength
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-transmission-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_transmission = SubSection(sub_section=nxg_transmission.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_name='transmission',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-transmission-group',
        nxp_optional='True',
        )
    class nxg_shape(NXobject):
        '''
A NXshape group describing the shape of the crystal arrangement
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-shape-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
        nxp_type='NXshape',
        nxp_name='shape',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-shape-group',
        nxp_optional='True',
        )
    class nxf_usage(NXobject):
        '''
How this crystal is used.  Choices are in the list.  Possible values:
            ['Bragg','Laue']

            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-usage-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_usage = SubSection(sub_section=nxf_usage.m_def,repeats=True,
        nxp_name='usage',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-usage-field',
        nxp_optional='True',
        enumeration=['Bragg','Laue'],
        )
    class nxf_type(NXobject):
        '''
            Type or material of monochromating substance.         Chemical formula can be
            specified separately.       Use the "reflection" field to indicate the (hkl)
            orientation.       Use the "d_spacing" field to record the lattice plane
            spacing.              This field was changed (2010-11-17) from an enumeration
            to       a string since common usage showed a wider variety of use       than
            a simple list.  These are the items in the list at        the time of the
            change: PG (Highly Oriented Pyrolytic Graphite) |       Ge | Si | Cu | Fe3Si |
            CoFe | Cu2MnAl (Heusler) | Multilayer |       Diamond.
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-type-field',
        nxp_optional='True',
        )
    class nxf_chemical_formula(NXobject):
        '''
            The chemical formula specified using CIF conventions.       Abbreviated
            version of CIF standard:

            * Only recognized element symbols may be used.       * Each element symbol is
            followed by a 'count' number. A count of '1' may be omitted.       * A space
            or parenthesis must separate each cluster of (element symbol + count).       *
            Where a group of elements is enclosed in parentheses, the multiplier for the
            group must follow the closing parentheses. That is, all element and group
            multipliers are assumed to be printed as subscripted numbers.       * Unless
            the elements are ordered in a manner that corresponds to their chemical
            structure, the order of the elements within any group or moiety depends on
            whether or not carbon is present.       * If carbon is present, the order
            should be:          C, then H, then the other elements in alphabetical order
            of their symbol.          If carbon is not present, the elements are listed
            purely in alphabetic          order of their symbol.        * This is the
            *Hill* system used by Chemical Abstracts.
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-chemical-formula-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_chemical_formula = SubSection(sub_section=nxf_chemical_formula.m_def,repeats=True,
        nxp_name='chemical_formula',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-chemical-formula-field',
        nxp_optional='True',
        )
    class nxf_order_no(NXobject):
        '''
            A number which describes if this is the first, second,..        :math:`n^{th}`
            crystal in a multi crystal monochromator
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-order-no-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_order_no = SubSection(sub_section=nxf_order_no.m_def,repeats=True,
        nxp_name='order_no',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-order-no-field',
        nxp_optional='True',
        )
    class nxf_cut_angle(NXobject):
        '''
Cut angle of reflecting Bragg plane and plane of crystal surface
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-cut-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_cut_angle = SubSection(sub_section=nxf_cut_angle.m_def,repeats=True,
        nxp_name='cut_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-cut-angle-field',
        nxp_optional='True',
        )
    class nxf_space_group(NXobject):
        '''
Space group of crystal structure
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-space-group-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_space_group = SubSection(sub_section=nxf_space_group.m_def,repeats=True,
        nxp_name='space_group',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-space-group-field',
        nxp_optional='True',
        )
    class nxf_unit_cell(NXobject):
        '''
Unit cell parameters (lengths and angles)
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell = SubSection(sub_section=nxf_unit_cell.m_def,repeats=True,
        nxp_name='unit_cell',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_a(NXobject):
        '''
Unit cell lattice parameter: length of side a
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-a-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_a = SubSection(sub_section=nxf_unit_cell_a.m_def,repeats=True,
        nxp_name='unit_cell_a',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-a-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_b(NXobject):
        '''
Unit cell lattice parameter: length of side b
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-b-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_b = SubSection(sub_section=nxf_unit_cell_b.m_def,repeats=True,
        nxp_name='unit_cell_b',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-b-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_c(NXobject):
        '''
Unit cell lattice parameter: length of side c
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-c-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_c = SubSection(sub_section=nxf_unit_cell_c.m_def,repeats=True,
        nxp_name='unit_cell_c',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-c-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_alpha(NXobject):
        '''
Unit cell lattice parameter: angle alpha
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-alpha-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_alpha = SubSection(sub_section=nxf_unit_cell_alpha.m_def,repeats=True,
        nxp_name='unit_cell_alpha',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-alpha-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_beta(NXobject):
        '''
Unit cell lattice parameter: angle beta
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-beta-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_beta = SubSection(sub_section=nxf_unit_cell_beta.m_def,repeats=True,
        nxp_name='unit_cell_beta',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-beta-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_gamma(NXobject):
        '''
Unit cell lattice parameter: angle gamma
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-gamma-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_gamma = SubSection(sub_section=nxf_unit_cell_gamma.m_def,repeats=True,
        nxp_name='unit_cell_gamma',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-gamma-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_volume(NXobject):
        '''
Volume of the unit cell
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-volume-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_volume = SubSection(sub_section=nxf_unit_cell_volume.m_def,repeats=True,
        nxp_name='unit_cell_volume',
        nxp_type='NX_FLOAT',
        nxp_units='NX_VOLUME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-volume-field',
        nxp_optional='True',
        )
    class nxf_orientation_matrix(NXobject):
        '''
            Orientation matrix of single crystal sample using Busing-Levy convention:
            W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-orientation-matrix-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_orientation_matrix = SubSection(sub_section=nxf_orientation_matrix.m_def,repeats=True,
        nxp_name='orientation_matrix',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-orientation-matrix-field',
        nxp_optional='True',
        )
    class nxf_wavelength(NXobject):
        '''
Optimum diffracted wavelength
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-wavelength-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
        nxp_name='wavelength',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-wavelength-field',
        nxp_optional='True',
        )
    class nxf_d_spacing(NXobject):
        '''
spacing between crystal planes of the reflection
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-d-spacing-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_d_spacing = SubSection(sub_section=nxf_d_spacing.m_def,repeats=True,
        nxp_name='d_spacing',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-d-spacing-field',
        nxp_optional='True',
        )
    class nxf_scattering_vector(NXobject):
        '''
Scattering vector, Q, of nominal reflection
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-scattering-vector-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_scattering_vector = SubSection(sub_section=nxf_scattering_vector.m_def,repeats=True,
        nxp_name='scattering_vector',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVENUMBER',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-scattering-vector-field',
        nxp_optional='True',
        )
    class nxf_reflection(NXobject):
        '''
Miller indices (hkl) values of nominal reflection
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-reflection-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_reflection = SubSection(sub_section=nxf_reflection.m_def,repeats=True,
        nxp_name='reflection',
        nxp_type='NX_INT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-reflection-field',
        nxp_optional='True',
        )
    class nxf_thickness(NXobject):
        '''
Thickness of the crystal.  (Required for Laue orientations - see "usage"
            field)
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_thickness = SubSection(sub_section=nxf_thickness.m_def,repeats=True,
        nxp_name='thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-thickness-field',
        nxp_optional='True',
        )
    class nxf_density(NXobject):
        '''
mass density of the crystal
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_density = SubSection(sub_section=nxf_density.m_def,repeats=True,
        nxp_name='density',
        nxp_type='NX_NUMBER',
        nxp_units='NX_MASS_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-density-field',
        nxp_optional='True',
        )
    class nxf_segment_width(NXobject):
        '''
Horizontal width of individual segment
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-width-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_segment_width = SubSection(sub_section=nxf_segment_width.m_def,repeats=True,
        nxp_name='segment_width',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-width-field',
        nxp_optional='True',
        )
    class nxf_segment_height(NXobject):
        '''
Vertical height of individual segment
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-height-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_segment_height = SubSection(sub_section=nxf_segment_height.m_def,repeats=True,
        nxp_name='segment_height',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-height-field',
        nxp_optional='True',
        )
    class nxf_segment_thickness(NXobject):
        '''
Thickness of individual segment
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_segment_thickness = SubSection(sub_section=nxf_segment_thickness.m_def,repeats=True,
        nxp_name='segment_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-thickness-field',
        nxp_optional='True',
        )
    class nxf_segment_gap(NXobject):
        '''
Typical gap between adjacent segments
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-gap-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_segment_gap = SubSection(sub_section=nxf_segment_gap.m_def,repeats=True,
        nxp_name='segment_gap',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-gap-field',
        nxp_optional='True',
        )
    class nxf_segment_columns(NXobject):
        '''
number of segment columns in horizontal direction
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-columns-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_segment_columns = SubSection(sub_section=nxf_segment_columns.m_def,repeats=True,
        nxp_name='segment_columns',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-columns-field',
        nxp_optional='True',
        )
    class nxf_segment_rows(NXobject):
        '''
number of segment rows in vertical direction
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-rows-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_segment_rows = SubSection(sub_section=nxf_segment_rows.m_def,repeats=True,
        nxp_name='segment_rows',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-rows-field',
        nxp_optional='True',
        )
    class nxf_mosaic_horizontal(NXobject):
        '''
horizontal mosaic Full Width Half Maximum
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-mosaic-horizontal-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_mosaic_horizontal = SubSection(sub_section=nxf_mosaic_horizontal.m_def,repeats=True,
        nxp_name='mosaic_horizontal',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-mosaic-horizontal-field',
        nxp_optional='True',
        )
    class nxf_mosaic_vertical(NXobject):
        '''
vertical mosaic Full Width Half Maximum
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-mosaic-vertical-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_mosaic_vertical = SubSection(sub_section=nxf_mosaic_vertical.m_def,repeats=True,
        nxp_name='mosaic_vertical',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-mosaic-vertical-field',
        nxp_optional='True',
        )
    class nxf_curvature_horizontal(NXobject):
        '''
Horizontal curvature of focusing crystal
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-curvature-horizontal-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_curvature_horizontal = SubSection(sub_section=nxf_curvature_horizontal.m_def,repeats=True,
        nxp_name='curvature_horizontal',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-curvature-horizontal-field',
        nxp_optional='True',
        )
    class nxf_curvature_vertical(NXobject):
        '''
Vertical curvature of focusing crystal
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-curvature-vertical-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_curvature_vertical = SubSection(sub_section=nxf_curvature_vertical.m_def,repeats=True,
        nxp_name='curvature_vertical',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-curvature-vertical-field',
        nxp_optional='True',
        )
    class nxf_is_cylindrical(NXobject):
        '''
Is this crystal bent cylindrically?
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-is-cylindrical-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
    nxf_is_cylindrical = SubSection(sub_section=nxf_is_cylindrical.m_def,repeats=True,
        nxp_name='is_cylindrical',
        nxp_type='NX_BOOLEAN',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-is-cylindrical-field',
        nxp_optional='True',
        )
    class nxf_cylindrical_orientation_angle(NXobject):
        '''
If cylindrical: cylinder orientation angle
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-cylindrical-orientation-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_cylindrical_orientation_angle = SubSection(sub_section=nxf_cylindrical_orientation_angle.m_def,repeats=True,
        nxp_name='cylindrical_orientation_angle',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-cylindrical-orientation-angle-field',
        nxp_optional='True',
        )
    class nxf_polar_angle(NXobject):
        '''
            Polar (scattering) angle at which crystal assembly is positioned.
            Note: some instrument geometries call this term 2theta.
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-polar-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
        nxp_name='polar_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-polar-angle-field',
        nxp_optional='True',
        )
    class nxf_azimuthal_angle(NXobject):
        '''
Azimuthal angle at which crystal assembly is positioned
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-azimuthal-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
        nxp_name='azimuthal_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-azimuthal-angle-field',
        nxp_optional='True',
        )
    class nxf_bragg_angle(NXobject):
        '''
Bragg angle of nominal reflection
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-bragg-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_bragg_angle = SubSection(sub_section=nxf_bragg_angle.m_def,repeats=True,
        nxp_name='bragg_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-bragg-angle-field',
        nxp_optional='True',
        )
    class nxf_temperature(NXobject):
        '''
average/nominal crystal temperature
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
        nxp_name='temperature',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TEMPERATURE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-field',
        nxp_optional='True',
        )
    class nxf_temperature_coefficient(NXobject):
        '''
how lattice parameter changes with temperature
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-coefficient-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_temperature_coefficient = SubSection(sub_section=nxf_temperature_coefficient.m_def,repeats=True,
        nxp_name='temperature_coefficient',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-coefficient-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                      Declares which child group contains a
            path leading            to a :ref:`NXdata` group.                      It is
            recommended (as of NIAC2014) to use this attribute           to help define
            the path to the default dataset to be plotted.           See
            https://www.nexusformat.org/2014_How_to_find_default_data.html           for a
            summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-default-attribute',
        nxp_optional='True',
        )

class NXaperture(NXobject):
    '''
A beamline aperture.
        https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXaperture',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
            location and shape of aperture                          .. TODO: documentation
            needs improvement, contributions welcome                              *
            description of terms is poor and leaves much to interpretation
            * Describe what is meant by translation _here_ and ...                 *
            Similar throughout base classes                 * Some base classes do this
            much better                 * Such as where is the gap written?
            https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-geometry-group',
        nxp_optional='True',
        )
    class nxg_BLADE_GEOMETRY(NXobject):
        '''
location and shape of each blade
            https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-blade-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_BLADE_GEOMETRY = SubSection(sub_section=nxg_BLADE_GEOMETRY.m_def,repeats=True,
        nxp_name='BLADE_GEOMETRY',
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-blade-geometry-group',
        nxp_optional='True',
        )
    class nxg_NOTE(NXobject):
        '''
describe any additional information in a note*
            https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-note-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_NOTE = SubSection(sub_section=nxg_NOTE.m_def,repeats=True,
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-note-group',
        nxp_optional='True',
        )
    class nxf_material(NXobject):
        '''
Absorbing material of the aperture
            https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_material = SubSection(sub_section=nxf_material.m_def,repeats=True,
        nxp_name='material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-material-field',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
Description of aperture
            https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-description-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-default-attribute',
        nxp_optional='True',
        )

class NXinsertion_device(NXobject):
    '''
An insertion device, as used in a synchrotron light source.
        https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXinsertion_device',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device',
        nxp_optional='True',
        )
    class nxg_spectrum(NXobject):
        '''
spectrum of insertion device
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-spectrum-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_spectrum = SubSection(sub_section=nxg_spectrum.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_name='spectrum',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-spectrum-group',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
"Engineering" position of insertion device
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-geometry-group',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
            Possible values:    ['undulator','wiggler']

            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-type-field',
        nxp_optional='True',
        enumeration=['undulator','wiggler'],
        )
    class nxf_gap(NXobject):
        '''
separation between opposing pairs of magnetic poles
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-gap-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_gap = SubSection(sub_section=nxf_gap.m_def,repeats=True,
        nxp_name='gap',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-gap-field',
        nxp_optional='True',
        )
    class nxf_taper(NXobject):
        '''
angular of gap difference between upstream and downstream ends of the
            insertion device
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-taper-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_taper = SubSection(sub_section=nxf_taper.m_def,repeats=True,
        nxp_name='taper',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-taper-field',
        nxp_optional='True',
        )
    class nxf_phase(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-phase-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_phase = SubSection(sub_section=nxf_phase.m_def,repeats=True,
        nxp_name='phase',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-phase-field',
        nxp_optional='True',
        )
    class nxf_poles(NXobject):
        '''
number of poles
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-poles-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_poles = SubSection(sub_section=nxf_poles.m_def,repeats=True,
        nxp_name='poles',
        nxp_type='NX_INT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-poles-field',
        nxp_optional='True',
        )
    class nxf_magnetic_wavelength(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-magnetic-wavelength-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_magnetic_wavelength = SubSection(sub_section=nxf_magnetic_wavelength.m_def,repeats=True,
        nxp_name='magnetic_wavelength',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-magnetic-wavelength-field',
        nxp_optional='True',
        )
    class nxf_k(NXobject):
        '''
beam displacement parameter
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-k-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_k = SubSection(sub_section=nxf_k.m_def,repeats=True,
        nxp_name='k',
        nxp_type='NX_FLOAT',
        nxp_units='NX_DIMENSIONLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-k-field',
        nxp_optional='True',
        )
    class nxf_length(NXobject):
        '''
length of insertion device
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-length-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_length = SubSection(sub_section=nxf_length.m_def,repeats=True,
        nxp_name='length',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-length-field',
        nxp_optional='True',
        )
    class nxf_power(NXobject):
        '''
total power delivered by insertion device
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-power-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_power = SubSection(sub_section=nxf_power.m_def,repeats=True,
        nxp_name='power',
        nxp_type='NX_FLOAT',
        nxp_units='NX_POWER',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-power-field',
        nxp_optional='True',
        )
    class nxf_energy(NXobject):
        '''
energy of peak intensity in output spectrum
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-energy-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
        nxp_name='energy',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-energy-field',
        nxp_optional='True',
        )
    class nxf_bandwidth(NXobject):
        '''
bandwidth of peak energy
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-bandwidth-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_bandwidth = SubSection(sub_section=nxf_bandwidth.m_def,repeats=True,
        nxp_name='bandwidth',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-bandwidth-field',
        nxp_optional='True',
        )
    class nxf_harmonic(NXobject):
        '''
harmonic number of peak
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-harmonic-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_harmonic = SubSection(sub_section=nxf_harmonic.m_def,repeats=True,
        nxp_name='harmonic',
        nxp_type='NX_INT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-harmonic-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-default-attribute',
        nxp_optional='True',
        )

class NXdisk_chopper(NXobject):
    '''
        A device blocking the beam in a temporal periodic pattern.

        A disk which blocks the beam but has one or more slits to periodically
        let neutrons through as the disk rotates. Often used in pairs, one
        NXdisk_chopper should be defined for each disk.

        The rotation of the disk is commonly monitored by recording a timestamp for
        each full rotation of disk, by having a sensor in the stationary disk housing
        sensing when it is aligned with a feature (such as a magnet) on the disk.
        We refer to this below as the "top-dead-center signal".

        Angles and positive rotation speeds are measured in an anticlockwise
        direction when facing away from the source.
        https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXdisk_chopper',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-geometry-group',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
Type of the disk-chopper: only one from the enumerated list (match text
            exactly)  Possible values:    ['Chopper type
            single','contra_rotating_pair','synchro_pair']

            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-type-field',
        nxp_optional='True',
        enumeration=['Chopper type single','contra_rotating_pair','synchro_pair'],
        )
    class nxf_rotation_speed(NXobject):
        '''
            Chopper rotation speed. Positive for anticlockwise rotation when
            facing away from the source, negative otherwise.
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-rotation-speed-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_rotation_speed = SubSection(sub_section=nxf_rotation_speed.m_def,repeats=True,
        nxp_name='rotation_speed',
        nxp_type='NX_FLOAT',
        nxp_units='NX_FREQUENCY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-rotation-speed-field',
        nxp_optional='True',
        )
    class nxf_slits(NXobject):
        '''
Number of slits
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slits-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_slits = SubSection(sub_section=nxf_slits.m_def,repeats=True,
        nxp_name='slits',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slits-field',
        nxp_optional='True',
        )
    class nxf_slit_angle(NXobject):
        '''
Angular opening
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_slit_angle = SubSection(sub_section=nxf_slit_angle.m_def,repeats=True,
        nxp_name='slit_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-angle-field',
        nxp_optional='True',
        )
    class nxf_pair_separation(NXobject):
        '''
Disk spacing in direction of beam
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-pair-separation-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_pair_separation = SubSection(sub_section=nxf_pair_separation.m_def,repeats=True,
        nxp_name='pair_separation',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-pair-separation-field',
        nxp_optional='True',
        )
    class nxf_slit_edges(NXobject):
        '''
            Angle of each edge of every slit from the position of the
            top-dead-center timestamp sensor, anticlockwise when facing
            away from the source.                         The first edge must be the
            opening edge of a slit, thus the last edge                         may have an
            angle greater than 360 degrees.
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-edges-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_slit_edges = SubSection(sub_section=nxf_slit_edges.m_def,repeats=True,
        nxp_name='slit_edges',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-edges-field',
        nxp_optional='True',
        )
    class nxf_top_dead_center(NXobject):
        '''
            Timestamps of the top-dead-center signal. The times are relative
            to the "start" attribute and in the units specified in the "units"
            attribute. Please note that absolute                         timestamps under
            unix are relative to ``1970-01-01T00:00:00.0Z``.
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-top-dead-center-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_start(NXobject):
            '''
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-top-dead-center-start-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxa_start = SubSection(sub_section=nxa_start.m_def,repeats=True,
            nxp_name='start',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-top-dead-center-start-attribute',
            nxp_optional='True',
            )
    nxf_top_dead_center = SubSection(sub_section=nxf_top_dead_center.m_def,repeats=True,
        nxp_name='top_dead_center',
        nxp_type='NX_NUMBER',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-top-dead-center-field',
        nxp_optional='True',
        )
    class nxf_beam_position(NXobject):
        '''
            Angular separation of the center of the beam and the
            top-dead-center timestamp sensor, anticlockwise when facing
            away from the source.
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-beam-position-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_beam_position = SubSection(sub_section=nxf_beam_position.m_def,repeats=True,
        nxp_name='beam_position',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-beam-position-field',
        nxp_optional='True',
        )
    class nxf_radius(NXobject):
        '''
Radius of the disk
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-radius-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_radius = SubSection(sub_section=nxf_radius.m_def,repeats=True,
        nxp_name='radius',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-radius-field',
        nxp_optional='True',
        )
    class nxf_slit_height(NXobject):
        '''
Total slit height
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-height-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_slit_height = SubSection(sub_section=nxf_slit_height.m_def,repeats=True,
        nxp_name='slit_height',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-height-field',
        nxp_optional='True',
        )
    class nxf_phase(NXobject):
        '''
Chopper phase angle
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-phase-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_phase = SubSection(sub_section=nxf_phase.m_def,repeats=True,
        nxp_name='phase',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-phase-field',
        nxp_optional='True',
        )
    class nxf_delay(NXobject):
        '''
            Time difference between timing system t0 and chopper driving clock signal
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-delay-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_delay = SubSection(sub_section=nxf_delay.m_def,repeats=True,
        nxp_name='delay',
        nxp_type='NX_NUMBER',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-delay-field',
        nxp_optional='True',
        )
    class nxf_ratio(NXobject):
        '''
            Pulse reduction factor of this chopper in relation to other
            choppers/fastest pulse in the instrument
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-ratio-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_ratio = SubSection(sub_section=nxf_ratio.m_def,repeats=True,
        nxp_name='ratio',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-ratio-field',
        nxp_optional='True',
        )
    class nxf_distance(NXobject):
        '''
Effective distance to the origin
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
        nxp_name='distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-distance-field',
        nxp_optional='True',
        )
    class nxf_wavelength_range(NXobject):
        '''
Low and high values of wavelength range transmitted
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-wavelength-range-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_wavelength_range = SubSection(sub_section=nxf_wavelength_range.m_def,repeats=True,
        nxp_name='wavelength_range',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-wavelength-range-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-default-attribute',
        nxp_optional='True',
        )

class NXmonitor(NXobject):
    '''
        A monitor of incident beam data.                   It is similar to the
        :ref:`NXdata` groups containing         monitor data and its associated dimension
        scale, e.g. time_of_flight or         wavelength in pulsed neutron instruments.
        However, it may also include         integrals, or scalar monitor counts, which
        are often used in both in both         pulsed and steady-state instrumentation.
        https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXmonitor',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor',
        nxp_optional='True',
        )
    class nxg_integral_log(NXobject):
        '''
Time variation of monitor counts
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-integral-log-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_integral_log = SubSection(sub_section=nxg_integral_log.m_def,repeats=True,
        nxp_name='integral_log',
        nxp_type='NXlog',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-integral-log-group',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
Geometry of the monitor
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-geometry-group',
        nxp_optional='True',
        )
    class nxf_mode(NXobject):
        '''
            Count to a preset value based on either clock time (timer)             or
            received monitor counts (monitor).           Possible values:
            ['monitor','timer']

            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-mode-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
        nxp_name='mode',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-mode-field',
        nxp_optional='True',
        enumeration=['monitor','timer'],
        )
    class nxf_start_time(NXobject):
        '''
Starting time of measurement
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-start-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
        nxp_name='start_time',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-start-time-field',
        nxp_optional='True',
        )
    class nxf_end_time(NXobject):
        '''
Ending time of measurement
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-end-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
        nxp_name='end_time',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-end-time-field',
        nxp_optional='True',
        )
    class nxf_preset(NXobject):
        '''
preset value for time or monitor
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-preset-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
        nxp_name='preset',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-preset-field',
        nxp_optional='True',
        )
    class nxf_distance(NXobject):
        '''
Distance of monitor from sample
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
        nxp_name='distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-distance-field',
        nxp_optional='True',
        )
    class nxf_range(NXobject):
        '''
Range (X-axis, Time-of-flight, etc.) over which the integral was calculated
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-range-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_range = SubSection(sub_section=nxf_range.m_def,repeats=True,
        nxp_name='range',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-range-field',
        nxp_optional='True',
        )
    class nxf_nominal(NXobject):
        '''
Nominal reading to be used for normalisation purposes.
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-nominal-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_nominal = SubSection(sub_section=nxf_nominal.m_def,repeats=True,
        nxp_name='nominal',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-nominal-field',
        nxp_optional='True',
        )
    class nxf_integral(NXobject):
        '''
Total integral monitor counts
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-integral-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_integral = SubSection(sub_section=nxf_integral.m_def,repeats=True,
        nxp_name='integral',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-integral-field',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
            Possible values:    ['Fission Chamber','Scintillator']

            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-type-field',
        nxp_optional='True',
        enumeration=['Fission Chamber','Scintillator'],
        )
    class nxf_time_of_flight(NXobject):
        '''
Time-of-flight
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-time-of-flight-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
        nxp_name='time_of_flight',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME_OF_FLIGHT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-time-of-flight-field',
        nxp_optional='True',
        )
    class nxf_efficiency(NXobject):
        '''
Monitor efficiency
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-efficiency-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_efficiency = SubSection(sub_section=nxf_efficiency.m_def,repeats=True,
        nxp_name='efficiency',
        nxp_type='NX_NUMBER',
        nxp_units='NX_DIMENSIONLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-efficiency-field',
        nxp_optional='True',
        )
    class nxf_data(NXobject):
        '''
            Monitor data
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-data-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
        nxp_name='data',
        nxp_type='NX_NUMBER',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-data-field',
        nxp_optional='True',
        )
    class nxf_sampled_fraction(NXobject):
        '''
Proportion of incident beam sampled by the monitor (0<x<1)
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-sampled-fraction-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_sampled_fraction = SubSection(sub_section=nxf_sampled_fraction.m_def,repeats=True,
        nxp_name='sampled_fraction',
        nxp_type='NX_FLOAT',
        nxp_units='NX_DIMENSIONLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-sampled-fraction-field',
        nxp_optional='True',
        )
    class nxf_count_time(NXobject):
        '''
            Elapsed actual counting time, can be an array of size ``np``             when
            scanning. This is not the difference of the calendar time             but the
            time the instrument was really counting, without             pauses or times
            lost due beam unavailability
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-count-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_count_time = SubSection(sub_section=nxf_count_time.m_def,repeats=True,
        nxp_name='count_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-count-time-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-default-attribute',
        nxp_optional='True',
        )

class NXmonochromator(NXobject):
    '''
        A  wavelength defining device.                  This is a base class for
        everything which         selects a wavelength or energy, be it a
        monochromator crystal, a velocity selector,         an undulator or whatever.
        The expected units are:                  * wavelength: angstrom         * energy:
        eV
        https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXmonochromator',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator',
        nxp_optional='True',
        )
    class nxg_distribution(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-distribution-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_distribution = SubSection(sub_section=nxg_distribution.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_name='distribution',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-distribution-group',
        nxp_optional='True',
        )
    class nxg_geometry(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_geometry = SubSection(sub_section=nxg_geometry.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_name='geometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-geometry-group',
        nxp_optional='True',
        )
    class nxg_CRYSTAL(NXobject):
        '''
Use as many crystals as necessary to describe
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-crystal-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
    nxg_CRYSTAL = SubSection(sub_section=nxg_CRYSTAL.m_def,repeats=True,
        nxp_type='NXcrystal',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-crystal-group',
        nxp_optional='True',
        )
    class nxg_VELOCITY_SELECTOR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-velocity-selector-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXvelocity_selector.m_def,repeats=True)
    nxg_VELOCITY_SELECTOR = SubSection(sub_section=nxg_VELOCITY_SELECTOR.m_def,repeats=True,
        nxp_type='NXvelocity_selector',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-velocity-selector-group',
        nxp_optional='True',
        )
    class nxg_GRATING(NXobject):
        '''
For diffraction grating based monochromators
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-grating-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgrating.m_def,repeats=True)
    nxg_GRATING = SubSection(sub_section=nxg_GRATING.m_def,repeats=True,
        nxp_type='NXgrating',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-grating-group',
        nxp_optional='True',
        )
    class nxf_wavelength(NXobject):
        '''
wavelength selected
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
        nxp_name='wavelength',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-field',
        nxp_optional='True',
        )
    class nxf_wavelength_error(NXobject):
        '''
wavelength standard deviation
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-error-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_wavelength_error = SubSection(sub_section=nxf_wavelength_error.m_def,repeats=True,
        nxp_name='wavelength_error',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        deprecated=''' DEPRECATED:
        see https://github.com/nexusformat/definitions/issues/820
        ''',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-error-field',
        nxp_optional='True',
        )
    class nxf_wavelength_errors(NXobject):
        '''
wavelength standard deviation
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_wavelength_errors = SubSection(sub_section=nxf_wavelength_errors.m_def,repeats=True,
        nxp_name='wavelength_errors',
        nxp_type='NX_FLOAT',
        nxp_units='NX_WAVELENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-errors-field',
        nxp_optional='True',
        )
    class nxf_energy(NXobject):
        '''
energy selected
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
        nxp_name='energy',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-field',
        nxp_optional='True',
        )
    class nxf_energy_error(NXobject):
        '''
energy standard deviation
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-error-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_energy_error = SubSection(sub_section=nxf_energy_error.m_def,repeats=True,
        nxp_name='energy_error',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        deprecated=''' DEPRECATED:
        see https://github.com/nexusformat/definitions/issues/820
        ''',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-error-field',
        nxp_optional='True',
        )
    class nxf_energy_errors(NXobject):
        '''
energy standard deviation
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-errors-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_energy_errors = SubSection(sub_section=nxf_energy_errors.m_def,repeats=True,
        nxp_name='energy_errors',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-errors-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-default-attribute',
        nxp_optional='True',
        )

class NXxraylens(NXobject):
    '''
        An X-ray lens, typically at a synchrotron X-ray beam line.              Based on
        information provided by Gerd Wellenreuther (DESY).
        https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXxraylens',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens',
        nxp_optional='True',
        )
    class nxg_cylinder_orientation(NXobject):
        '''
            Orientation of the cylinder axis.
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-cylinder-orientation-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_cylinder_orientation = SubSection(sub_section=nxg_cylinder_orientation.m_def,repeats=True,
        nxp_name='cylinder_orientation',
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-cylinder-orientation-group',
        nxp_optional='True',
        )
    class nxf_lens_geometry(NXobject):
        '''
Geometry of the lens  Possible values:
            ['paraboloid','spherical','elliptical','hyperbolical']

            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-geometry-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_lens_geometry = SubSection(sub_section=nxf_lens_geometry.m_def,repeats=True,
        nxp_name='lens_geometry',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-geometry-field',
        nxp_optional='True',
        enumeration=['paraboloid','spherical','elliptical','hyperbolical'],
        )
    class nxf_symmetric(NXobject):
        '''
            Is the device symmetric?
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-symmetric-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
    nxf_symmetric = SubSection(sub_section=nxf_symmetric.m_def,repeats=True,
        nxp_name='symmetric',
        nxp_type='NX_BOOLEAN',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-symmetric-field',
        nxp_optional='True',
        )
    class nxf_cylindrical(NXobject):
        '''
            Is the device cylindrical?
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-cylindrical-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
    nxf_cylindrical = SubSection(sub_section=nxf_cylindrical.m_def,repeats=True,
        nxp_name='cylindrical',
        nxp_type='NX_BOOLEAN',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-cylindrical-field',
        nxp_optional='True',
        )
    class nxf_focus_type(NXobject):
        '''
            The type of focus of the lens         Possible values:    ['line','point']

            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-focus-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_focus_type = SubSection(sub_section=nxf_focus_type.m_def,repeats=True,
        nxp_name='focus_type',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-focus-type-field',
        nxp_optional='True',
        enumeration=['line','point'],
        )
    class nxf_lens_thickness(NXobject):
        '''
Thickness of the lens
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_lens_thickness = SubSection(sub_section=nxf_lens_thickness.m_def,repeats=True,
        nxp_name='lens_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-thickness-field',
        nxp_optional='True',
        )
    class nxf_lens_length(NXobject):
        '''
Length of the lens
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-length-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_lens_length = SubSection(sub_section=nxf_lens_length.m_def,repeats=True,
        nxp_name='lens_length',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-length-field',
        nxp_optional='True',
        )
    class nxf_curvature(NXobject):
        '''
Radius of the curvature as measured in the middle of the lens
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-curvature-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_curvature = SubSection(sub_section=nxf_curvature.m_def,repeats=True,
        nxp_name='curvature',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-curvature-field',
        nxp_optional='True',
        )
    class nxf_aperture(NXobject):
        '''
Diameter of the lens.
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-aperture-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_aperture = SubSection(sub_section=nxf_aperture.m_def,repeats=True,
        nxp_name='aperture',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-aperture-field',
        nxp_optional='True',
        )
    class nxf_number_of_lenses(NXobject):
        '''
Number of lenses that make up the compound lens.
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-number-of-lenses-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_number_of_lenses = SubSection(sub_section=nxf_number_of_lenses.m_def,repeats=True,
        nxp_name='number_of_lenses',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-number-of-lenses-field',
        nxp_optional='True',
        )
    class nxf_lens_material(NXobject):
        '''
Material used to make the lens.
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_lens_material = SubSection(sub_section=nxf_lens_material.m_def,repeats=True,
        nxp_name='lens_material',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-material-field',
        nxp_optional='True',
        )
    class nxf_gas(NXobject):
        '''
Gas used to fill the lens
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-gas-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_gas = SubSection(sub_section=nxf_gas.m_def,repeats=True,
        nxp_name='gas',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-gas-field',
        nxp_optional='True',
        )
    class nxf_gas_pressure(NXobject):
        '''
Gas pressure in the lens
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-gas-pressure-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_gas_pressure = SubSection(sub_section=nxf_gas_pressure.m_def,repeats=True,
        nxp_name='gas_pressure',
        nxp_type='NX_FLOAT',
        nxp_units='NX_PRESSURE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-gas-pressure-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-default-attribute',
        nxp_optional='True',
        )

class NXprocess(NXobject):
    '''
Document an event of data processing, reconstruction, or analysis for this data.
        https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXprocess',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess',
        nxp_optional='True',
        )
    class nxg_NOTE(NXobject):
        '''
            The note will contain information about how the data was processed
            or anything about the data provenance.              The contents of the note
            can be anything that the processing code              can understand, or
            simple text.                          The name will be numbered to allow for
            ordering of steps.
            https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-note-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_NOTE = SubSection(sub_section=nxg_NOTE.m_def,repeats=True,
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-note-group',
        nxp_optional='True',
        )
    class nxf_program(NXobject):
        '''
Name of the program used
            https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-program-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_program = SubSection(sub_section=nxf_program.m_def,repeats=True,
        nxp_name='program',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-program-field',
        nxp_optional='True',
        )
    class nxf_sequence_index(NXobject):
        '''
            Sequence index of processing,              for determining the order of
            multiple **NXprocess** steps.               Starts with 1.
            https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-sequence-index-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
    nxf_sequence_index = SubSection(sub_section=nxf_sequence_index.m_def,repeats=True,
        nxp_name='sequence_index',
        nxp_type='NX_POSINT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-sequence-index-field',
        nxp_optional='True',
        )
    class nxf_version(NXobject):
        '''
Version of the program used
            https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-version-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_version = SubSection(sub_section=nxf_version.m_def,repeats=True,
        nxp_name='version',
        nxp_type='NX_CHAR',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-version-field',
        nxp_optional='True',
        )
    class nxf_date(NXobject):
        '''
Date and time of processing.
            https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-date-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxf_date = SubSection(sub_section=nxf_date.m_def,repeats=True,
        nxp_name='date',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-date-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-default-attribute',
        nxp_optional='True',
        )

class NXsolid_geometry(NXobject):
    '''
        the head node for constructively defined geometry
        https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXsolid_geometry',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='contributed',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry',
        nxp_required='True',
        )
    class nxg_QUADRIC(NXobject):
        '''
            Instances of :ref:`NXquadric` making up elements of the geometry.
            https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-quadric-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXquadric.m_def,repeats=True)
    nxg_QUADRIC = SubSection(sub_section=nxg_QUADRIC.m_def,repeats=True,
        nxp_type='NXquadric',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-quadric-group',
        nxp_optional='True',
        )
    class nxg_OFF_GEOMETRY(NXobject):
        '''
            Instances of :ref:`NXoff_geometry` making up elements of the geometry.
            https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-off-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXoff_geometry.m_def,repeats=True)
    nxg_OFF_GEOMETRY = SubSection(sub_section=nxg_OFF_GEOMETRY.m_def,repeats=True,
        nxp_type='NXoff_geometry',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-off-geometry-group',
        nxp_optional='True',
        )
    class nxg_CSG(NXobject):
        '''
            The geometries defined, made up of instances of :ref:`NXquadric` and
            :ref:`NXoff_geometry`.
            https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-csg-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcsg.m_def,repeats=True)
    nxg_CSG = SubSection(sub_section=nxg_CSG.m_def,repeats=True,
        nxp_type='NXcsg',
        nxp_minOccurs='0',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-csg-group',
        nxp_optional='True',
        )

class NXmoderator(NXobject):
    '''
A neutron moderator
        https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXmoderator',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
"Engineering" position of moderator
            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-geometry-group',
        nxp_optional='True',
        )
    class nxg_temperature_log(NXobject):
        '''
log file of moderator temperature
            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-temperature-log-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_temperature_log = SubSection(sub_section=nxg_temperature_log.m_def,repeats=True,
        nxp_type='NXlog',
        nxp_name='temperature_log',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-temperature-log-group',
        nxp_optional='True',
        )
    class nxg_pulse_shape(NXobject):
        '''
moderator pulse shape
            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-pulse-shape-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_pulse_shape = SubSection(sub_section=nxg_pulse_shape.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_name='pulse_shape',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-pulse-shape-group',
        nxp_optional='True',
        )
    class nxf_distance(NXobject):
        '''
Effective distance as seen by measuring radiation
            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
        nxp_name='distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-distance-field',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
            Possible values:    ['H20','D20','Liquid H2','Liquid CH4','Liquid D2','Solid
            D2','C','Solid CH4','Solid H2']

            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-type-field',
        nxp_optional='True',
        enumeration=['H20','D20','Liquid H2','Liquid CH4','Liquid D2','Solid D2','C','Solid CH4','Solid H2'],
        )
    class nxf_poison_depth(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-poison-depth-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_poison_depth = SubSection(sub_section=nxf_poison_depth.m_def,repeats=True,
        nxp_name='poison_depth',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-poison-depth-field',
        nxp_optional='True',
        )
    class nxf_coupled(NXobject):
        '''
whether the moderator is coupled
            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-coupled-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
    nxf_coupled = SubSection(sub_section=nxf_coupled.m_def,repeats=True,
        nxp_name='coupled',
        nxp_type='NX_BOOLEAN',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-coupled-field',
        nxp_optional='True',
        )
    class nxf_coupling_material(NXobject):
        '''
The material used for coupling. Usually Cd.
            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-coupling-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_coupling_material = SubSection(sub_section=nxf_coupling_material.m_def,repeats=True,
        nxp_name='coupling_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-coupling-material-field',
        nxp_optional='True',
        )
    class nxf_poison_material(NXobject):
        '''
            Possible values:    ['Gd','Cd']

            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-poison-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_poison_material = SubSection(sub_section=nxf_poison_material.m_def,repeats=True,
        nxp_name='poison_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-poison-material-field',
        nxp_optional='True',
        enumeration=['Gd','Cd'],
        )
    class nxf_temperature(NXobject):
        '''
average/nominal moderator temperature
            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-temperature-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
        nxp_name='temperature',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TEMPERATURE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-temperature-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-default-attribute',
        nxp_optional='True',
        )

class NXguide(NXobject):
    '''
        A neutron optical element to direct the path of the beam.
        :ref:`NXguide` is used by neutron instruments to describe         a guide consists
        of several mirrors building a shape through which          neutrons can be guided
        or directed. The simplest such form is box shaped         although elliptical
        guides are gaining in popularity.          The individual parts of a guide usually
        have common characteristics          but there are cases where they are different.
        For example,  a neutron guide might consist of 2 or 4 coated walls or         a
        supermirror bender with multiple, coated vanes.

        To describe polarizing supermirrors such as used in neutron reflection,         it
        may be necessary to revise this definition of :ref:`NXguide`         to include
        :ref:`NXpolarizer` and/or :ref:`NXmirror`.

        When even greater complexity exists in the definition of what         constitutes
        a *guide*,  it has been suggested that :ref:`NXguide`          be redefined as a
        :ref:`NXcollection` of :ref:`NXmirror` each          having their own
        :ref:`NXgeometry` describing their location(s).

        For the more general case when describing mirrors, consider using
        :ref:`NXmirror`.

        NOTE: The NeXus International Advisory Committee welcomes          comments for
        revision and improvement of          this definition of :ref:`NXguide`.

        https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXguide',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_category='base',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
TODO:  Explain what this NXgeometry group means.  What is intended here?
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-geometry-group',
        nxp_optional='True',
        )
    class nxg_reflectivity(NXobject):
        '''
Reflectivity as function of reflecting surface and wavelength
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        class nxa_signal(NXobject):
            '''
                Obligatory value:    ['data']

                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-signal-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
            nxp_name='signal',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-signal-attribute',
            nxp_optional='True',
            enumeration=['data'],
            )
        class nxa_axes(NXobject):
            '''
                Obligatory value:    ['surface wavelength']

                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-axes-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_axes = SubSection(sub_section=nxa_axes.m_def,repeats=True,
            nxp_name='axes',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-axes-attribute',
            nxp_optional='True',
            enumeration=['surface wavelength'],
            )
        class nxa_surface_indices(NXobject):
            '''
                Obligatory value:    ['0']

                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-surface-indices-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_surface_indices = SubSection(sub_section=nxa_surface_indices.m_def,repeats=True,
            nxp_name='surface_indices',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-surface-indices-attribute',
            nxp_optional='True',
            enumeration=['0'],
            )
        class nxa_wavelength_indices(NXobject):
            '''
                Obligatory value:    ['1']

                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-wavelength-indices-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_wavelength_indices = SubSection(sub_section=nxa_wavelength_indices.m_def,repeats=True,
            nxp_name='wavelength_indices',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-wavelength-indices-attribute',
            nxp_optional='True',
            enumeration=['1'],
            )
        class nxf_data(NXobject):
            '''
reflectivity of each surface as a function of wavelength
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-data-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
            nxp_name='data',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-data-field',
            nxp_optional='True',
            )
        class nxf_surface(NXobject):
            '''
                List of surfaces.  Probably best to use index                      numbers
                but the specification is very loose.
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-surface-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxf_surface = SubSection(sub_section=nxf_surface.m_def,repeats=True,
            nxp_name='surface',
            nxp_type='NX_NUMBER',
            nxp_units='NX_ANY',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-surface-field',
            nxp_optional='True',
            )
        class nxf_wavelength(NXobject):
            '''
wavelengths at which reflectivity was measured
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-wavelength-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
            nxp_name='wavelength',
            nxp_type='NX_NUMBER',
            nxp_units='NX_WAVELENGTH',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-wavelength-field',
            nxp_optional='True',
            )
    nxg_reflectivity = SubSection(sub_section=nxg_reflectivity.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_name='reflectivity',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-group',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
A description of this particular instance of ``NXguide``.
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-description-field',
        nxp_optional='True',
        )
    class nxf_incident_angle(NXobject):
        '''
TODO: documentation needed
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-incident-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_incident_angle = SubSection(sub_section=nxf_incident_angle.m_def,repeats=True,
        nxp_name='incident_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-incident-angle-field',
        nxp_optional='True',
        )
    class nxf_bend_angle_x(NXobject):
        '''
TODO: documentation needed
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-bend-angle-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_bend_angle_x = SubSection(sub_section=nxf_bend_angle_x.m_def,repeats=True,
        nxp_name='bend_angle_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-bend-angle-x-field',
        nxp_optional='True',
        )
    class nxf_bend_angle_y(NXobject):
        '''
TODO: documentation needed
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-bend-angle-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_bend_angle_y = SubSection(sub_section=nxf_bend_angle_y.m_def,repeats=True,
        nxp_name='bend_angle_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-bend-angle-y-field',
        nxp_optional='True',
        )
    class nxf_interior_atmosphere(NXobject):
        '''
            Possible values:    ['vacuum','helium','argon']

            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-interior-atmosphere-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_interior_atmosphere = SubSection(sub_section=nxf_interior_atmosphere.m_def,repeats=True,
        nxp_name='interior_atmosphere',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-interior-atmosphere-field',
        nxp_optional='True',
        enumeration=['vacuum','helium','argon'],
        )
    class nxf_external_material(NXobject):
        '''
external material outside substrate
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-external-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_external_material = SubSection(sub_section=nxf_external_material.m_def,repeats=True,
        nxp_name='external_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-external-material-field',
        nxp_optional='True',
        )
    class nxf_m_value(NXobject):
        '''
            The ``m`` value for a supermirror, which defines the supermirror
            regime in multiples of the critical angle of Nickel.
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-m-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_m_value = SubSection(sub_section=nxf_m_value.m_def,repeats=True,
        nxp_name='m_value',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-m-value-field',
        nxp_optional='True',
        )
    class nxf_substrate_material(NXobject):
        '''
TODO: documentation needed
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_material = SubSection(sub_section=nxf_substrate_material.m_def,repeats=True,
        nxp_name='substrate_material',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-material-field',
        nxp_optional='True',
        )
    class nxf_substrate_thickness(NXobject):
        '''
TODO: documentation needed
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_thickness = SubSection(sub_section=nxf_substrate_thickness.m_def,repeats=True,
        nxp_name='substrate_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-thickness-field',
        nxp_optional='True',
        )
    class nxf_coating_material(NXobject):
        '''
TODO: documentation needed
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-coating-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_coating_material = SubSection(sub_section=nxf_coating_material.m_def,repeats=True,
        nxp_name='coating_material',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-coating-material-field',
        nxp_optional='True',
        )
    class nxf_substrate_roughness(NXobject):
        '''
TODO: documentation needed
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-roughness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_roughness = SubSection(sub_section=nxf_substrate_roughness.m_def,repeats=True,
        nxp_name='substrate_roughness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-roughness-field',
        nxp_optional='True',
        )
    class nxf_coating_roughness(NXobject):
        '''
TODO: documentation needed
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-coating-roughness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_coating_roughness = SubSection(sub_section=nxf_coating_roughness.m_def,repeats=True,
        nxp_name='coating_roughness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-coating-roughness-field',
        nxp_optional='True',
        )
    class nxf_number_sections(NXobject):
        '''
            number of substrate sections (also called ``nsurf`` as an
            index in the ``NXguide`` specification)
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-number-sections-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_number_sections = SubSection(sub_section=nxf_number_sections.m_def,repeats=True,
        nxp_name='number_sections',
        nxp_type='NX_INT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-number-sections-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-default-attribute',
        nxp_optional='True',
        )

class NXenvironment(NXobject):
    '''
Parameters for controlling external conditions
        https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXenvironment',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment',
        nxp_optional='True',
        )
    class nxg_position(NXobject):
        '''
The position and orientation of the apparatus
            https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-position-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_position = SubSection(sub_section=nxg_position.m_def,repeats=True,
        nxp_name='position',
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-position-group',
        nxp_optional='True',
        )
    class nxg_NOTE(NXobject):
        '''
Additional information, LabView logs, digital photographs, etc
            https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-note-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_NOTE = SubSection(sub_section=nxg_NOTE.m_def,repeats=True,
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-note-group',
        nxp_optional='True',
        )
    class nxg_SENSOR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-sensor-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXsensor.m_def,repeats=True)
    nxg_SENSOR = SubSection(sub_section=nxg_SENSOR.m_def,repeats=True,
        nxp_type='NXsensor',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-sensor-group',
        nxp_optional='True',
        )
    class nxf_name(NXobject):
        '''
Apparatus identification code/model number; e.g. OC100 011
            https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
        nxp_name='name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-name-field',
        nxp_optional='True',
        )
    class nxf_short_name(NXobject):
        '''
Alternative short name, perhaps for dashboard display like a present Seblock
            name
            https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-short-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_short_name = SubSection(sub_section=nxf_short_name.m_def,repeats=True,
        nxp_name='short_name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-short-name-field',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
Type of apparatus. This could be the SE codes in scheduling database; e.g.
            OC/100
            https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-type-field',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
Description of the apparatus; e.g. 100mm bore orange cryostat with Roots pump
            https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-description-field',
        nxp_optional='True',
        )
    class nxf_program(NXobject):
        '''
Program controlling the apparatus; e.g. LabView VI name
            https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-program-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_program = SubSection(sub_section=nxf_program.m_def,repeats=True,
        nxp_name='program',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-program-field',
        nxp_optional='True',
        )

class NXsource(NXobject):
    '''
The neutron or x-ray storage ring/facility.
        https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXsource',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource',
        nxp_optional='True',
        )
    class nxg_notes(NXobject):
        '''
            any source/facility related messages/events that
            occurred during the experiment
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-notes-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_notes = SubSection(sub_section=nxg_notes.m_def,repeats=True,
        nxp_name='notes',
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-notes-group',
        nxp_optional='True',
        )
    class nxg_bunch_pattern(NXobject):
        '''
            For storage rings, description of the bunch pattern.
            This is useful to describe irregular bunch patterns.
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-pattern-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
name of the bunch pattern
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-pattern-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-pattern-title-field',
            nxp_optional='True',
            )
    nxg_bunch_pattern = SubSection(sub_section=nxg_bunch_pattern.m_def,repeats=True,
        nxp_name='bunch_pattern',
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-pattern-group',
        nxp_optional='True',
        )
    class nxg_pulse_shape(NXobject):
        '''
source pulse shape
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-pulse-shape-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_pulse_shape = SubSection(sub_section=nxg_pulse_shape.m_def,repeats=True,
        nxp_name='pulse_shape',
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-pulse-shape-group',
        nxp_optional='True',
        )
    class nxg_geometry(NXobject):
        '''
"Engineering" location of source
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_geometry = SubSection(sub_section=nxg_geometry.m_def,repeats=True,
        nxp_name='geometry',
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-geometry-group',
        nxp_optional='True',
        )
    class nxg_distribution(NXobject):
        '''
The wavelength or energy distribution of the source
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-distribution-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_distribution = SubSection(sub_section=nxg_distribution.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_name='distribution',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-distribution-group',
        nxp_optional='True',
        )
    class nxf_distance(NXobject):
        '''
            Effective distance from sample                         Distance as seen by
            radiation from sample. This number should be negative
            to signify that it is upstream of the sample.
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
        nxp_name='distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-distance-field',
        nxp_optional='True',
        )
    class nxf_name(NXobject):
        '''
Name of source
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_short_name(NXobject):
            '''
short name for source, perhaps the acronym
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-name-short-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_short_name = SubSection(sub_section=nxa_short_name.m_def,repeats=True,
            nxp_name='short_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-name-short-name-attribute',
            nxp_optional='True',
            )
    nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
        nxp_name='name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-name-field',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
type of radiation source (pick one from the enumerated list and spell exactly)
            Possible values:    ['Spallation Neutron Source','Pulsed Reactor Neutron
            Source','Reactor Neutron Source','Synchrotron X-ray Source','Pulsed Muon
            Source','Rotating Anode X-ray','Fixed Tube X-ray','UV Laser','Free-Electron
            Laser','Optical Laser','Ion Source','UV Plasma Source']

            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-type-field',
        nxp_optional='True',
        enumeration=['Spallation Neutron Source','Pulsed Reactor Neutron Source','Reactor Neutron Source','Synchrotron X-ray Source','Pulsed Muon Source','Rotating Anode X-ray','Fixed Tube X-ray','UV Laser','Free-Electron Laser','Optical Laser','Ion Source','UV Plasma Source'],
        )
    class nxf_probe(NXobject):
        '''
type of radiation probe (pick one from the enumerated list and spell exactly)
            Possible values:
            ['neutron','x-ray','muon','electron','ultraviolet','visible
            light','positron','proton']

            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-probe-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
        nxp_name='probe',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-probe-field',
        nxp_optional='True',
        enumeration=['neutron','x-ray','muon','electron','ultraviolet','visible light','positron','proton'],
        )
    class nxf_power(NXobject):
        '''
Source power
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-power-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_power = SubSection(sub_section=nxf_power.m_def,repeats=True,
        nxp_name='power',
        nxp_type='NX_FLOAT',
        nxp_units='NX_POWER',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-power-field',
        nxp_optional='True',
        )
    class nxf_emittance_x(NXobject):
        '''
Source emittance (nm-rad) in X (horizontal) direction.
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-emittance-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_emittance_x = SubSection(sub_section=nxf_emittance_x.m_def,repeats=True,
        nxp_name='emittance_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_EMITTANCE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-emittance-x-field',
        nxp_optional='True',
        )
    class nxf_emittance_y(NXobject):
        '''
Source emittance (nm-rad) in Y (horizontal) direction.
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-emittance-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_emittance_y = SubSection(sub_section=nxf_emittance_y.m_def,repeats=True,
        nxp_name='emittance_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_EMITTANCE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-emittance-y-field',
        nxp_optional='True',
        )
    class nxf_sigma_x(NXobject):
        '''
particle beam size in x
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-sigma-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_sigma_x = SubSection(sub_section=nxf_sigma_x.m_def,repeats=True,
        nxp_name='sigma_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-sigma-x-field',
        nxp_optional='True',
        )
    class nxf_sigma_y(NXobject):
        '''
particle beam size in y
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-sigma-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_sigma_y = SubSection(sub_section=nxf_sigma_y.m_def,repeats=True,
        nxp_name='sigma_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-sigma-y-field',
        nxp_optional='True',
        )
    class nxf_flux(NXobject):
        '''
Source intensity/area (example: s-1 cm-2)
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-flux-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_flux = SubSection(sub_section=nxf_flux.m_def,repeats=True,
        nxp_name='flux',
        nxp_type='NX_FLOAT',
        nxp_units='NX_FLUX',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-flux-field',
        nxp_optional='True',
        )
    class nxf_energy(NXobject):
        '''
            Source energy.                           For storage rings, this would be the
            particle beam energy.                         For X-ray tubes, this would be
            the excitation voltage.
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-energy-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
        nxp_name='energy',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ENERGY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-energy-field',
        nxp_optional='True',
        )
    class nxf_current(NXobject):
        '''
Accelerator, X-ray tube, or storage ring current
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-current-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_current = SubSection(sub_section=nxf_current.m_def,repeats=True,
        nxp_name='current',
        nxp_type='NX_FLOAT',
        nxp_units='NX_CURRENT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-current-field',
        nxp_optional='True',
        )
    class nxf_voltage(NXobject):
        '''
Accelerator voltage
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-voltage-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_voltage = SubSection(sub_section=nxf_voltage.m_def,repeats=True,
        nxp_name='voltage',
        nxp_type='NX_FLOAT',
        nxp_units='NX_VOLTAGE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-voltage-field',
        nxp_optional='True',
        )
    class nxf_frequency(NXobject):
        '''
Frequency of pulsed source
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-frequency-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_frequency = SubSection(sub_section=nxf_frequency.m_def,repeats=True,
        nxp_name='frequency',
        nxp_type='NX_FLOAT',
        nxp_units='NX_FREQUENCY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-frequency-field',
        nxp_optional='True',
        )
    class nxf_period(NXobject):
        '''
Period of pulsed source
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-period-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_period = SubSection(sub_section=nxf_period.m_def,repeats=True,
        nxp_name='period',
        nxp_type='NX_FLOAT',
        nxp_units='NX_PERIOD',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-period-field',
        nxp_optional='True',
        )
    class nxf_target_material(NXobject):
        '''
Pulsed source target material  Possible values:
            ['Ta','W','depleted_U','enriched_U','Hg','Pb','C']

            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-target-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_target_material = SubSection(sub_section=nxf_target_material.m_def,repeats=True,
        nxp_name='target_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-target-material-field',
        nxp_optional='True',
        enumeration=['Ta','W','depleted_U','enriched_U','Hg','Pb','C'],
        )
    class nxf_number_of_bunches(NXobject):
        '''
For storage rings, the number of bunches in use.
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-number-of-bunches-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_number_of_bunches = SubSection(sub_section=nxf_number_of_bunches.m_def,repeats=True,
        nxp_name='number_of_bunches',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-number-of-bunches-field',
        nxp_optional='True',
        )
    class nxf_bunch_length(NXobject):
        '''
For storage rings, temporal length of the bunch
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-length-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_bunch_length = SubSection(sub_section=nxf_bunch_length.m_def,repeats=True,
        nxp_name='bunch_length',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-length-field',
        nxp_optional='True',
        )
    class nxf_bunch_distance(NXobject):
        '''
For storage rings, time between bunches
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_bunch_distance = SubSection(sub_section=nxf_bunch_distance.m_def,repeats=True,
        nxp_name='bunch_distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-distance-field',
        nxp_optional='True',
        )
    class nxf_pulse_width(NXobject):
        '''
temporal width of source pulse
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-pulse-width-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_pulse_width = SubSection(sub_section=nxf_pulse_width.m_def,repeats=True,
        nxp_name='pulse_width',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-pulse-width-field',
        nxp_optional='True',
        )
    class nxf_mode(NXobject):
        '''
source operating mode  Possible values:    ['Single Bunch','Multi Bunch']

            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-mode-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
        nxp_name='mode',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-mode-field',
        nxp_optional='True',
        enumeration=['Single Bunch','Multi Bunch'],
        )
    class nxf_top_up(NXobject):
        '''
Is the synchrotron operating in top_up mode?
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-top-up-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
    nxf_top_up = SubSection(sub_section=nxf_top_up.m_def,repeats=True,
        nxp_name='top_up',
        nxp_type='NX_BOOLEAN',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-top-up-field',
        nxp_optional='True',
        )
    class nxf_last_fill(NXobject):
        '''
For storage rings, the current at the end of the most recent injection.
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-last-fill-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        class nxa_time(NXobject):
            '''
date and time of the most recent injection.
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-last-fill-time-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxa_time = SubSection(sub_section=nxa_time.m_def,repeats=True,
            nxp_name='time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-last-fill-time-attribute',
            nxp_optional='True',
            )
    nxf_last_fill = SubSection(sub_section=nxf_last_fill.m_def,repeats=True,
        nxp_name='last_fill',
        nxp_type='NX_NUMBER',
        nxp_units='NX_CURRENT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-last-fill-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-default-attribute',
        nxp_optional='True',
        )

class NXmirror(NXobject):
    '''
A beamline mirror or supermirror.
        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXmirror',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-geometry-group',
        nxp_optional='True',
        )
    class nxg_reflectivity(NXobject):
        '''
Reflectivity as function of wavelength
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-reflectivity-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_reflectivity = SubSection(sub_section=nxg_reflectivity.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_name='reflectivity',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-reflectivity-group',
        nxp_optional='True',
        )
    class nxg_shape(NXobject):
        '''
A NXshape group describing the shape of the mirror
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-shape-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
        nxp_type='NXshape',
        nxp_name='shape',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-shape-group',
        nxp_optional='True',
        )
    class nxg_figure_data(NXobject):
        '''
Numerical description of the surface figure of the mirror.
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-figure-data-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_figure_data = SubSection(sub_section=nxg_figure_data.m_def,repeats=True,
        nxp_name='figure_data',
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-figure-data-group',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
            Possible values:    ['single','multi']

            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-type-field',
        nxp_optional='True',
        enumeration=['single','multi'],
        )
    class nxf_description(NXobject):
        '''
description of this mirror
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-description-field',
        nxp_optional='True',
        )
    class nxf_incident_angle(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-incident-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_incident_angle = SubSection(sub_section=nxf_incident_angle.m_def,repeats=True,
        nxp_name='incident_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-incident-angle-field',
        nxp_optional='True',
        )
    class nxf_bend_angle_x(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-bend-angle-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_bend_angle_x = SubSection(sub_section=nxf_bend_angle_x.m_def,repeats=True,
        nxp_name='bend_angle_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-bend-angle-x-field',
        nxp_optional='True',
        )
    class nxf_bend_angle_y(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-bend-angle-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_bend_angle_y = SubSection(sub_section=nxf_bend_angle_y.m_def,repeats=True,
        nxp_name='bend_angle_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-bend-angle-y-field',
        nxp_optional='True',
        )
    class nxf_interior_atmosphere(NXobject):
        '''
            Possible values:    ['vacuum','helium','argon']

            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-interior-atmosphere-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_interior_atmosphere = SubSection(sub_section=nxf_interior_atmosphere.m_def,repeats=True,
        nxp_name='interior_atmosphere',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-interior-atmosphere-field',
        nxp_optional='True',
        enumeration=['vacuum','helium','argon'],
        )
    class nxf_external_material(NXobject):
        '''
external material outside substrate
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-external-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_external_material = SubSection(sub_section=nxf_external_material.m_def,repeats=True,
        nxp_name='external_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-external-material-field',
        nxp_optional='True',
        )
    class nxf_m_value(NXobject):
        '''
            The m value for a supermirror, which defines the supermirror
            regime in multiples of the critical angle of Nickel.
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-m-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_m_value = SubSection(sub_section=nxf_m_value.m_def,repeats=True,
        nxp_name='m_value',
        nxp_type='NX_FLOAT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-m-value-field',
        nxp_optional='True',
        )
    class nxf_substrate_material(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_substrate_material = SubSection(sub_section=nxf_substrate_material.m_def,repeats=True,
        nxp_name='substrate_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-material-field',
        nxp_optional='True',
        )
    class nxf_substrate_density(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_density = SubSection(sub_section=nxf_substrate_density.m_def,repeats=True,
        nxp_name='substrate_density',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-density-field',
        nxp_optional='True',
        )
    class nxf_substrate_thickness(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_thickness = SubSection(sub_section=nxf_substrate_thickness.m_def,repeats=True,
        nxp_name='substrate_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-thickness-field',
        nxp_optional='True',
        )
    class nxf_coating_material(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-coating-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_coating_material = SubSection(sub_section=nxf_coating_material.m_def,repeats=True,
        nxp_name='coating_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-coating-material-field',
        nxp_optional='True',
        )
    class nxf_substrate_roughness(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-roughness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_roughness = SubSection(sub_section=nxf_substrate_roughness.m_def,repeats=True,
        nxp_name='substrate_roughness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-roughness-field',
        nxp_optional='True',
        )
    class nxf_coating_roughness(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-coating-roughness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_coating_roughness = SubSection(sub_section=nxf_coating_roughness.m_def,repeats=True,
        nxp_name='coating_roughness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-coating-roughness-field',
        nxp_optional='True',
        )
    class nxf_even_layer_material(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-even-layer-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_even_layer_material = SubSection(sub_section=nxf_even_layer_material.m_def,repeats=True,
        nxp_name='even_layer_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-even-layer-material-field',
        nxp_optional='True',
        )
    class nxf_even_layer_density(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-even-layer-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_even_layer_density = SubSection(sub_section=nxf_even_layer_density.m_def,repeats=True,
        nxp_name='even_layer_density',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-even-layer-density-field',
        nxp_optional='True',
        )
    class nxf_odd_layer_material(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-odd-layer-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_odd_layer_material = SubSection(sub_section=nxf_odd_layer_material.m_def,repeats=True,
        nxp_name='odd_layer_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-odd-layer-material-field',
        nxp_optional='True',
        )
    class nxf_odd_layer_density(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-odd-layer-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_odd_layer_density = SubSection(sub_section=nxf_odd_layer_density.m_def,repeats=True,
        nxp_name='odd_layer_density',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-odd-layer-density-field',
        nxp_optional='True',
        )
    class nxf_layer_thickness(NXobject):
        '''
An array describing the thickness of each layer
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-layer-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_layer_thickness = SubSection(sub_section=nxf_layer_thickness.m_def,repeats=True,
        nxp_name='layer_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-layer-thickness-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-default-attribute',
        nxp_optional='True',
        )

class NXcollimator(NXobject):
    '''
A beamline collimator.
        https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXcollimator',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
position, shape and size
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-geometry-group',
        nxp_optional='True',
        )
    class nxg_frequency_log(NXobject):
        '''
Log of frequency
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-frequency-log-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_frequency_log = SubSection(sub_section=nxg_frequency_log.m_def,repeats=True,
        nxp_type='NXlog',
        nxp_name='frequency_log',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-frequency-log-group',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
            Possible values:    ['Soller','radial','oscillating','honeycomb']

            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-type-field',
        nxp_optional='True',
        enumeration=['Soller','radial','oscillating','honeycomb'],
        )
    class nxf_soller_angle(NXobject):
        '''
Angular divergence of Soller collimator
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-soller-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_soller_angle = SubSection(sub_section=nxf_soller_angle.m_def,repeats=True,
        nxp_name='soller_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-soller-angle-field',
        nxp_optional='True',
        )
    class nxf_divergence_x(NXobject):
        '''
divergence of collimator in local x direction
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-divergence-x-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_divergence_x = SubSection(sub_section=nxf_divergence_x.m_def,repeats=True,
        nxp_name='divergence_x',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-divergence-x-field',
        nxp_optional='True',
        )
    class nxf_divergence_y(NXobject):
        '''
divergence of collimator in local y direction
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-divergence-y-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_divergence_y = SubSection(sub_section=nxf_divergence_y.m_def,repeats=True,
        nxp_name='divergence_y',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-divergence-y-field',
        nxp_optional='True',
        )
    class nxf_frequency(NXobject):
        '''
Frequency of oscillating collimator
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-frequency-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_frequency = SubSection(sub_section=nxf_frequency.m_def,repeats=True,
        nxp_name='frequency',
        nxp_type='NX_FLOAT',
        nxp_units='NX_FREQUENCY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-frequency-field',
        nxp_optional='True',
        )
    class nxf_blade_thickness(NXobject):
        '''
blade thickness
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-blade-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_blade_thickness = SubSection(sub_section=nxf_blade_thickness.m_def,repeats=True,
        nxp_name='blade_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-blade-thickness-field',
        nxp_optional='True',
        )
    class nxf_blade_spacing(NXobject):
        '''
blade spacing
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-blade-spacing-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_blade_spacing = SubSection(sub_section=nxf_blade_spacing.m_def,repeats=True,
        nxp_name='blade_spacing',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-blade-spacing-field',
        nxp_optional='True',
        )
    class nxf_absorbing_material(NXobject):
        '''
name of absorbing material
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-absorbing-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_absorbing_material = SubSection(sub_section=nxf_absorbing_material.m_def,repeats=True,
        nxp_name='absorbing_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-absorbing-material-field',
        nxp_optional='True',
        )
    class nxf_transmitting_material(NXobject):
        '''
name of transmitting material
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-transmitting-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_transmitting_material = SubSection(sub_section=nxf_transmitting_material.m_def,repeats=True,
        nxp_name='transmitting_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-transmitting-material-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-default-attribute',
        nxp_optional='True',
        )

class NXfilter(NXobject):
    '''
        For band pass beam filters.                                  If uncertain whether
        to use :ref:`NXfilter` (band-pass filter)                 or :ref:`NXattenuator`
        (reduces beam intensity), then use                  :ref:`NXattenuator`.
        https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXfilter',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_category='base',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter',
        nxp_optional='True',
        )
    class nxg_GEOMETRY(NXobject):
        '''
Geometry of the filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_GEOMETRY = SubSection(sub_section=nxg_GEOMETRY.m_def,repeats=True,
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-geometry-group',
        nxp_optional='True',
        )
    class nxg_transmission(NXobject):
        '''
Wavelength transmission profile of filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-transmission-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_transmission = SubSection(sub_section=nxg_transmission.m_def,repeats=True,
        nxp_name='transmission',
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-transmission-group',
        nxp_optional='True',
        )
    class nxg_temperature_log(NXobject):
        '''
Linked temperature_log for the filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-temperature-log-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_temperature_log = SubSection(sub_section=nxg_temperature_log.m_def,repeats=True,
        nxp_name='temperature_log',
        nxp_type='NXlog',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-temperature-log-group',
        nxp_optional='True',
        )
    class nxg_sensor_type(NXobject):
        '''
Sensor(s)used to monitor the filter temperature
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-sensor-type-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXsensor.m_def,repeats=True)
    nxg_sensor_type = SubSection(sub_section=nxg_sensor_type.m_def,repeats=True,
        nxp_name='sensor_type',
        nxp_type='NXsensor',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-sensor-type-group',
        nxp_optional='True',
        )
    class nxf_description(NXobject):
        '''
            Composition of the filter.  Chemical formula can be specified separately.

            This field was changed (2010-11-17) from an enumeration to             a
            string since common usage showed a wider variety of use             than a
            simple list.  These are the items in the list at              the time of the
            change: Beryllium | Pyrolytic Graphite |             Graphite | Sapphire |
            Silicon | Supermirror.
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-description-field',
        nxp_optional='True',
        )
    class nxf_status(NXobject):
        '''
position with respect to in or out of the beam (choice of only "in" or "out")
            Possible values:    ['in','out']

            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-status-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_status = SubSection(sub_section=nxf_status.m_def,repeats=True,
        nxp_name='status',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-status-field',
        nxp_optional='True',
        enumeration=['in','out'],
        )
    class nxf_temperature(NXobject):
        '''
average/nominal filter temperature
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-temperature-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
        nxp_name='temperature',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TEMPERATURE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-temperature-field',
        nxp_optional='True',
        )
    class nxf_thickness(NXobject):
        '''
Thickness of the filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_thickness = SubSection(sub_section=nxf_thickness.m_def,repeats=True,
        nxp_name='thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-thickness-field',
        nxp_optional='True',
        )
    class nxf_density(NXobject):
        '''
mass density of the filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
    nxf_density = SubSection(sub_section=nxf_density.m_def,repeats=True,
        nxp_name='density',
        nxp_type='NX_NUMBER',
        nxp_units='NX_MASS_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-density-field',
        nxp_optional='True',
        )
    class nxf_chemical_formula(NXobject):
        '''
            The chemical formula specified using CIF conventions.
            Abbreviated version of CIF standard:
            * Only recognized element symbols may be used.                         * Each
            element symbol is followed by a 'count' number. A count of '1' may be omitted.
            * A space or parenthesis must separate each cluster of (element symbol +
            count).                         * Where a group of elements is enclosed in
            parentheses, the multiplier for the                            group must
            follow the closing parentheses. That is, all element and group
            multipliers are assumed to be printed as subscripted numbers.
            * Unless the elements are ordered in a manner that corresponds to their
            chemical                            structure, the order of the elements
            within any group or moiety depends on                            whether or
            not carbon is present.                         * If carbon is present, the
            order should be:                                                     * C, then
            H, then the other elements in alphabetical order of their symbol.
            * If carbon is not present, the elements are listed purely in alphabetic order
            of their symbol.                                                     * This is
            the *Hill* system used by Chemical Abstracts.
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-chemical-formula-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_chemical_formula = SubSection(sub_section=nxf_chemical_formula.m_def,repeats=True,
        nxp_name='chemical_formula',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-chemical-formula-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_a(NXobject):
        '''
Unit cell lattice parameter: length of side a
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-a-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_a = SubSection(sub_section=nxf_unit_cell_a.m_def,repeats=True,
        nxp_name='unit_cell_a',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-a-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_b(NXobject):
        '''
Unit cell lattice parameter: length of side b
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-b-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_b = SubSection(sub_section=nxf_unit_cell_b.m_def,repeats=True,
        nxp_name='unit_cell_b',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-b-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_c(NXobject):
        '''
Unit cell lattice parameter: length of side c
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-c-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_c = SubSection(sub_section=nxf_unit_cell_c.m_def,repeats=True,
        nxp_name='unit_cell_c',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-c-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_alpha(NXobject):
        '''
Unit cell lattice parameter: angle alpha
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-alpha-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_alpha = SubSection(sub_section=nxf_unit_cell_alpha.m_def,repeats=True,
        nxp_name='unit_cell_alpha',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-alpha-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_beta(NXobject):
        '''
Unit cell lattice parameter: angle beta
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-beta-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_beta = SubSection(sub_section=nxf_unit_cell_beta.m_def,repeats=True,
        nxp_name='unit_cell_beta',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-beta-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_gamma(NXobject):
        '''
Unit cell lattice parameter: angle gamma
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-gamma-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_gamma = SubSection(sub_section=nxf_unit_cell_gamma.m_def,repeats=True,
        nxp_name='unit_cell_gamma',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-gamma-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_volume(NXobject):
        '''
Unit cell
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-volume-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_volume = SubSection(sub_section=nxf_unit_cell_volume.m_def,repeats=True,
        nxp_name='unit_cell_volume',
        nxp_type='NX_FLOAT',
        nxp_units='NX_VOLUME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-volume-field',
        nxp_optional='True',
        )
    class nxf_orientation_matrix(NXobject):
        '''
            Orientation matrix of single crystal filter using Busing-Levy convention:
            W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-orientation-matrix-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_orientation_matrix = SubSection(sub_section=nxf_orientation_matrix.m_def,repeats=True,
        nxp_name='orientation_matrix',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-orientation-matrix-field',
        nxp_optional='True',
        )
    class nxf_m_value(NXobject):
        '''
m value of supermirror filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-m-value-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_m_value = SubSection(sub_section=nxf_m_value.m_def,repeats=True,
        nxp_name='m_value',
        nxp_type='NX_FLOAT',
        nxp_units='NX_DIMENSIONLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-m-value-field',
        nxp_optional='True',
        )
    class nxf_substrate_material(NXobject):
        '''
substrate material of supermirror filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_substrate_material = SubSection(sub_section=nxf_substrate_material.m_def,repeats=True,
        nxp_name='substrate_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-material-field',
        nxp_optional='True',
        )
    class nxf_substrate_thickness(NXobject):
        '''
substrate thickness of supermirror filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_thickness = SubSection(sub_section=nxf_substrate_thickness.m_def,repeats=True,
        nxp_name='substrate_thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-thickness-field',
        nxp_optional='True',
        )
    class nxf_coating_material(NXobject):
        '''
coating material of supermirror filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-coating-material-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_coating_material = SubSection(sub_section=nxf_coating_material.m_def,repeats=True,
        nxp_name='coating_material',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-coating-material-field',
        nxp_optional='True',
        )
    class nxf_substrate_roughness(NXobject):
        '''
substrate roughness (RMS) of supermirror filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-roughness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_substrate_roughness = SubSection(sub_section=nxf_substrate_roughness.m_def,repeats=True,
        nxp_name='substrate_roughness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-roughness-field',
        nxp_optional='True',
        )
    class nxf_coating_roughness(NXobject):
        '''
coating roughness (RMS) of supermirror filter
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-coating-roughness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_coating_roughness = SubSection(sub_section=nxf_coating_roughness.m_def,repeats=True,
        nxp_name='coating_roughness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-coating-roughness-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-default-attribute',
        nxp_optional='True',
        )

class NXsample(NXobject):
    '''
        Any information on the sample.                                   This could
        include scanned variables that                 are associated with one of the data
        dimensions, e.g. the magnetic field, or                 logged data, e.g.
        monitored temperature vs elapsed time.
        https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXsample',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample',
        nxp_optional='True',
        )
    class nxg_geometry(NXobject):
        '''
The position and orientation of the center of mass of the sample
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-geometry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
    nxg_geometry = SubSection(sub_section=nxg_geometry.m_def,repeats=True,
        nxp_name='geometry',
        nxp_type='NXgeometry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-geometry-group',
        nxp_optional='True',
        )
    class nxg_BEAM(NXobject):
        '''
Details of beam incident on sample - used to calculate sample/beam interaction
            point
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-beam-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXbeam.m_def,repeats=True)
    nxg_BEAM = SubSection(sub_section=nxg_BEAM.m_def,repeats=True,
        nxp_type='NXbeam',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-beam-group',
        nxp_optional='True',
        )
    class nxg_SAMPLE_COMPONENT(NXobject):
        '''
            One group per sample component                         This is the perferred
            way of recording per component information over the n_comp arrays
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-component-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXsample_component.m_def,repeats=True)
    nxg_SAMPLE_COMPONENT = SubSection(sub_section=nxg_SAMPLE_COMPONENT.m_def,repeats=True,
        nxp_type='NXsample_component',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-component-group',
        nxp_optional='True',
        )
    class nxg_transmission(NXobject):
        '''
As a function of Wavelength
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-transmission-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_transmission = SubSection(sub_section=nxg_transmission.m_def,repeats=True,
        nxp_name='transmission',
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-transmission-group',
        nxp_optional='True',
        )
    class nxg_temperature(NXobject):
        '''
temperature.value is a link to e.g. temperature_env.sensor1.value
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_temperature = SubSection(sub_section=nxg_temperature.m_def,repeats=True,
        nxp_name='temperature',
        nxp_type='NXlog',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-group',
        nxp_optional='True',
        )
    class nxg_temperature_log(NXobject):
        '''
temperature_log.value is a link to e.g.
            temperature_env.sensor1.value_log.value
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-log-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_temperature_log = SubSection(sub_section=nxg_temperature_log.m_def,repeats=True,
        nxp_name='temperature_log',
        nxp_type='NXlog',
        deprecated=''' DEPRECATED:
        use ``temperature``, see: https://github.com/nexusformat/definitions/issues/816
        ''',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-log-group',
        nxp_optional='True',
        )
    class nxg_temperature_env(NXobject):
        '''
Additional sample temperature environment information
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-env-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXenvironment.m_def,repeats=True)
    nxg_temperature_env = SubSection(sub_section=nxg_temperature_env.m_def,repeats=True,
        nxp_name='temperature_env',
        nxp_type='NXenvironment',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-env-group',
        nxp_optional='True',
        )
    class nxg_magnetic_field(NXobject):
        '''
magnetic_field.value is a link to e.g. magnetic_field_env.sensor1.value
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_magnetic_field = SubSection(sub_section=nxg_magnetic_field.m_def,repeats=True,
        nxp_name='magnetic_field',
        nxp_type='NXlog',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-group',
        nxp_optional='True',
        )
    class nxg_magnetic_field_log(NXobject):
        '''
magnetic_field_log.value is a link to e.g.
            magnetic_field_env.sensor1.value_log.value
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-log-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_magnetic_field_log = SubSection(sub_section=nxg_magnetic_field_log.m_def,repeats=True,
        nxp_name='magnetic_field_log',
        nxp_type='NXlog',
        deprecated=''' DEPRECATED:
        use ``magnetic_field``, see: https://github.com/nexusformat/definitions/issues/816
        ''',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-log-group',
        nxp_optional='True',
        )
    class nxg_magnetic_field_env(NXobject):
        '''
Additional sample magnetic environment information
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-env-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXenvironment.m_def,repeats=True)
    nxg_magnetic_field_env = SubSection(sub_section=nxg_magnetic_field_env.m_def,repeats=True,
        nxp_name='magnetic_field_env',
        nxp_type='NXenvironment',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-env-group',
        nxp_optional='True',
        )
    class nxg_external_ADC(NXobject):
        '''
logged value (or logic state) read from user's setup
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-external-adc-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
    nxg_external_ADC = SubSection(sub_section=nxg_external_ADC.m_def,repeats=True,
        nxp_name='external_ADC',
        nxp_type='NXlog',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-external-adc-group',
        nxp_optional='True',
        )
    class nxg_POSITIONER(NXobject):
        '''
Any positioner (motor, PZT, ...) used to locate the sample
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-positioner-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXpositioner.m_def,repeats=True)
    nxg_POSITIONER = SubSection(sub_section=nxg_POSITIONER.m_def,repeats=True,
        nxp_type='NXpositioner',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-positioner-group',
        nxp_optional='True',
        )
    class nxf_name(NXobject):
        '''
Descriptive name of sample
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
        nxp_name='name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-name-field',
        nxp_optional='True',
        )
    class nxf_chemical_formula(NXobject):
        '''
            The chemical formula specified using CIF conventions.
            Abbreviated version of CIF standard:
            * Only recognized element symbols may be used.                         * Each
            element symbol is followed by a 'count' number. A count of '1' may be omitted.
            * A space or parenthesis must separate each cluster of (element symbol +
            count).                         * Where a group of elements is enclosed in
            parentheses, the multiplier for the                            group must
            follow the closing parentheses. That is, all element and group
            multipliers are assumed to be printed as subscripted numbers.
            * Unless the elements are ordered in a manner that corresponds to their
            chemical                            structure, the order of the elements
            within any group or moiety depends on                            whether or
            not carbon is present.                         * If carbon is present, the
            order should be:                                                     - C, then
            H, then the other elements in alphabetical order of their symbol.
            - If carbon is not present, the elements are listed purely in alphabetic order
            of their symbol.                                                     * This is
            the *Hill* system used by Chemical Abstracts.
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-chemical-formula-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_chemical_formula = SubSection(sub_section=nxf_chemical_formula.m_def,repeats=True,
        nxp_name='chemical_formula',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-chemical-formula-field',
        nxp_optional='True',
        )
    class nxf_temperature(NXobject):
        '''
Sample temperature. This could be a scanned variable
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
        nxp_name='temperature',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TEMPERATURE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-field',
        nxp_optional='True',
        )
    class nxf_electric_field(NXobject):
        '''
Applied electric field
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-electric-field-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_direction(NXobject):
            '''
                Possible values:    ['x','y','z']

                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-electric-field-direction-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_direction = SubSection(sub_section=nxa_direction.m_def,repeats=True,
            nxp_name='direction',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-electric-field-direction-attribute',
            nxp_optional='True',
            enumeration=['x','y','z'],
            )
    nxf_electric_field = SubSection(sub_section=nxf_electric_field.m_def,repeats=True,
        nxp_name='electric_field',
        nxp_type='NX_FLOAT',
        nxp_units='NX_VOLTAGE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-electric-field-field',
        nxp_optional='True',
        )
    class nxf_magnetic_field(NXobject):
        '''
Applied magnetic field
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_direction(NXobject):
            '''
                Possible values:    ['x','y','z']

                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-direction-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_direction = SubSection(sub_section=nxa_direction.m_def,repeats=True,
            nxp_name='direction',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-direction-attribute',
            nxp_optional='True',
            enumeration=['x','y','z'],
            )
    nxf_magnetic_field = SubSection(sub_section=nxf_magnetic_field.m_def,repeats=True,
        nxp_name='magnetic_field',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-field',
        nxp_optional='True',
        )
    class nxf_stress_field(NXobject):
        '''
Applied external stress field
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-stress-field-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        class nxa_direction(NXobject):
            '''
                Possible values:    ['x','y','z']

                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-stress-field-direction-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_direction = SubSection(sub_section=nxa_direction.m_def,repeats=True,
            nxp_name='direction',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-stress-field-direction-attribute',
            nxp_optional='True',
            enumeration=['x','y','z'],
            )
    nxf_stress_field = SubSection(sub_section=nxf_stress_field.m_def,repeats=True,
        nxp_name='stress_field',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-stress-field-field',
        nxp_optional='True',
        )
    class nxf_pressure(NXobject):
        '''
Applied pressure
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-pressure-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_pressure = SubSection(sub_section=nxf_pressure.m_def,repeats=True,
        nxp_name='pressure',
        nxp_type='NX_FLOAT',
        nxp_units='NX_PRESSURE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-pressure-field',
        nxp_optional='True',
        )
    class nxf_changer_position(NXobject):
        '''
Sample changer position
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-changer-position-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_changer_position = SubSection(sub_section=nxf_changer_position.m_def,repeats=True,
        nxp_name='changer_position',
        nxp_type='NX_INT',
        nxp_units='NX_UNITLESS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-changer-position-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_abc(NXobject):
        '''
Crystallography unit cell parameters a, b, and c
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-abc-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_abc = SubSection(sub_section=nxf_unit_cell_abc.m_def,repeats=True,
        nxp_name='unit_cell_abc',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-abc-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_alphabetagamma(NXobject):
        '''
Crystallography unit cell parameters alpha, beta, and gamma
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-alphabetagamma-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_alphabetagamma = SubSection(sub_section=nxf_unit_cell_alphabetagamma.m_def,repeats=True,
        nxp_name='unit_cell_alphabetagamma',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-alphabetagamma-field',
        nxp_optional='True',
        )
    class nxf_unit_cell(NXobject):
        '''
Unit cell parameters (lengths and angles)
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell = SubSection(sub_section=nxf_unit_cell.m_def,repeats=True,
        nxp_name='unit_cell',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_volume(NXobject):
        '''
Volume of the unit cell
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-volume-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_unit_cell_volume = SubSection(sub_section=nxf_unit_cell_volume.m_def,repeats=True,
        nxp_name='unit_cell_volume',
        nxp_type='NX_FLOAT',
        nxp_units='NX_VOLUME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-volume-field',
        nxp_optional='True',
        )
    class nxf_sample_orientation(NXobject):
        '''
            This will follow the Busing-Levy convention:                         W. R.
            Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-orientation-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_sample_orientation = SubSection(sub_section=nxf_sample_orientation.m_def,repeats=True,
        nxp_name='sample_orientation',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-orientation-field',
        nxp_optional='True',
        )
    class nxf_orientation_matrix(NXobject):
        '''
            Orientation matrix of single crystal sample using Busing-Levy convention:
            W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-orientation-matrix-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_orientation_matrix = SubSection(sub_section=nxf_orientation_matrix.m_def,repeats=True,
        nxp_name='orientation_matrix',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-orientation-matrix-field',
        nxp_optional='True',
        )
    class nxf_ub_matrix(NXobject):
        '''
            UB matrix of single crystal sample using Busing-Levy convention:
            W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464. This is
            the multiplication of the orientation_matrix, given above,
            with the :math:`B` matrix which                          can be derived from
            the lattice constants.
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-ub-matrix-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_ub_matrix = SubSection(sub_section=nxf_ub_matrix.m_def,repeats=True,
        nxp_name='ub_matrix',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-ub-matrix-field',
        nxp_optional='True',
        )
    class nxf_mass(NXobject):
        '''
Mass of sample
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-mass-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_mass = SubSection(sub_section=nxf_mass.m_def,repeats=True,
        nxp_name='mass',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-mass-field',
        nxp_optional='True',
        )
    class nxf_density(NXobject):
        '''
Density of sample
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_density = SubSection(sub_section=nxf_density.m_def,repeats=True,
        nxp_name='density',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-density-field',
        nxp_optional='True',
        )
    class nxf_relative_molecular_mass(NXobject):
        '''
Relative Molecular Mass of sample
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-relative-molecular-mass-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_relative_molecular_mass = SubSection(sub_section=nxf_relative_molecular_mass.m_def,repeats=True,
        nxp_name='relative_molecular_mass',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-relative-molecular-mass-field',
        nxp_optional='True',
        )
    class nxf_type(NXobject):
        '''
            Possible values:
            ['sample','sample+can','can','sample+buffer','buffer','calibration
            sample','normalisation sample','simulated data','none','sample environment']

            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-type-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
        nxp_name='type',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-type-field',
        nxp_optional='True',
        enumeration=['sample','sample+can','can','sample+buffer','buffer','calibration sample','normalisation sample','simulated data','none','sample environment'],
        )
    class nxf_situation(NXobject):
        '''
            The atmosphere will be one of the components, which is where
            its details will be stored; the relevant components will be
            indicated by the entry in the sample_component member.
            Possible values:    ['air','vacuum','inert atmosphere','oxidising
            atmosphere','reducing atmosphere','sealed can','other']

            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-situation-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_situation = SubSection(sub_section=nxf_situation.m_def,repeats=True,
        nxp_name='situation',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-situation-field',
        nxp_optional='True',
        enumeration=['air','vacuum','inert atmosphere','oxidising atmosphere','reducing atmosphere','sealed can','other'],
        )
    class nxf_description(NXobject):
        '''
            Description of the sample
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
        nxp_name='description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-description-field',
        nxp_optional='True',
        )
    class nxf_preparation_date(NXobject):
        '''
Date of preparation of the sample
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-preparation-date-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxf_preparation_date = SubSection(sub_section=nxf_preparation_date.m_def,repeats=True,
        nxp_name='preparation_date',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-preparation-date-field',
        nxp_optional='True',
        )
    class nxf_component(NXobject):
        '''
Details of the component of the sample and/or can
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-component-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_component = SubSection(sub_section=nxf_component.m_def,repeats=True,
        nxp_name='component',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-component-field',
        nxp_optional='True',
        )
    class nxf_sample_component(NXobject):
        '''
Type of component  Possible values:    ['sample','can','atmosphere','kit']

            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-component-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_sample_component = SubSection(sub_section=nxf_sample_component.m_def,repeats=True,
        nxp_name='sample_component',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-component-field',
        nxp_optional='True',
        enumeration=['sample','can','atmosphere','kit'],
        )
    class nxf_concentration(NXobject):
        '''
Concentration of each component
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-concentration-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_concentration = SubSection(sub_section=nxf_concentration.m_def,repeats=True,
        nxp_name='concentration',
        nxp_type='NX_FLOAT',
        nxp_units='NX_MASS_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-concentration-field',
        nxp_optional='True',
        )
    class nxf_volume_fraction(NXobject):
        '''
Volume fraction of each component
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-volume-fraction-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_volume_fraction = SubSection(sub_section=nxf_volume_fraction.m_def,repeats=True,
        nxp_name='volume_fraction',
        nxp_type='NX_FLOAT',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-volume-fraction-field',
        nxp_optional='True',
        )
    class nxf_scattering_length_density(NXobject):
        '''
Scattering length density of each component
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-scattering-length-density-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_scattering_length_density = SubSection(sub_section=nxf_scattering_length_density.m_def,repeats=True,
        nxp_name='scattering_length_density',
        nxp_type='NX_FLOAT',
        nxp_units='NX_SCATTERING_LENGTH_DENSITY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-scattering-length-density-field',
        nxp_optional='True',
        )
    class nxf_unit_cell_class(NXobject):
        '''
            In case it is all we know and we want to record/document it
            Possible values:
            ['triclinic','monoclinic','orthorhombic','tetragonal','rhombohedral','hexagonal','cubic']

            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-class-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_unit_cell_class = SubSection(sub_section=nxf_unit_cell_class.m_def,repeats=True,
        nxp_name='unit_cell_class',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-class-field',
        nxp_optional='True',
        enumeration=['triclinic','monoclinic','orthorhombic','tetragonal','rhombohedral','hexagonal','cubic'],
        )
    class nxf_space_group(NXobject):
        '''
Crystallographic space group
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-space-group-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_space_group = SubSection(sub_section=nxf_space_group.m_def,repeats=True,
        nxp_name='space_group',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-space-group-field',
        nxp_optional='True',
        )
    class nxf_point_group(NXobject):
        '''
Crystallographic point group, deprecated if space_group present
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-point-group-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_point_group = SubSection(sub_section=nxf_point_group.m_def,repeats=True,
        nxp_name='point_group',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-point-group-field',
        nxp_optional='True',
        )
    class nxf_path_length(NXobject):
        '''
            Path length through sample/can for simple case when
            it does not vary with scattering direction
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-path-length-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_path_length = SubSection(sub_section=nxf_path_length.m_def,repeats=True,
        nxp_name='path_length',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-path-length-field',
        nxp_optional='True',
        )
    class nxf_path_length_window(NXobject):
        '''
            Thickness of a beam entry/exit window on the can (mm)
            - assumed same for entry and exit
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-path-length-window-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_path_length_window = SubSection(sub_section=nxf_path_length_window.m_def,repeats=True,
        nxp_name='path_length_window',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-path-length-window-field',
        nxp_optional='True',
        )
    class nxf_thickness(NXobject):
        '''
sample thickness
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-thickness-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_thickness = SubSection(sub_section=nxf_thickness.m_def,repeats=True,
        nxp_name='thickness',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-thickness-field',
        nxp_optional='True',
        )
    class nxf_external_DAC(NXobject):
        '''
value sent to user's sample setup
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-external-dac-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_external_DAC = SubSection(sub_section=nxf_external_DAC.m_def,repeats=True,
        nxp_name='external_DAC',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANY',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-external-dac-field',
        nxp_optional='True',
        )
    class nxf_short_title(NXobject):
        '''
20 character fixed length sample description for legends
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-short-title-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_short_title = SubSection(sub_section=nxf_short_title.m_def,repeats=True,
        nxp_name='short_title',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-short-title-field',
        nxp_optional='True',
        )
    class nxf_rotation_angle(NXobject):
        '''
            Optional rotation angle for the case when the powder diagram has
            been obtained through an omega-2theta scan like from a traditional
            single detector powder diffractometer
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-rotation-angle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
        nxp_name='rotation_angle',
        nxp_type='NX_FLOAT',
        nxp_units='NX_ANGLE',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-rotation-angle-field',
        nxp_optional='True',
        )
    class nxf_x_translation(NXobject):
        '''
Translation of the sample along the X-direction of the laboratory coordinate
            system
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-x-translation-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_x_translation = SubSection(sub_section=nxf_x_translation.m_def,repeats=True,
        nxp_name='x_translation',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-x-translation-field',
        nxp_optional='True',
        )
    class nxf_distance(NXobject):
        '''
Translation of the sample along the Z-direction of the laboratory coordinate
            system
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-distance-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
        nxp_name='distance',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-distance-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-default-attribute',
        nxp_optional='True',
        )

class NXinstrument(NXobject):
    '''
        Collection of the components of the instrument or beamline.
        Template of instrument descriptions comprising various beamline components.
        Each component will also be a NeXus group defined by its distance from the
        sample. Negative distances represent beamline components that are before the
        sample while positive distances represent components that are after the sample.
        This device allows the unique identification of beamline components in a way
        that is valid for both reactor and pulsed instrumentation.
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXinstrument',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument',
        nxp_optional='True',
        )
    class nxg_APERTURE(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-aperture-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXaperture.m_def,repeats=True)
    nxg_APERTURE = SubSection(sub_section=nxg_APERTURE.m_def,repeats=True,
        nxp_type='NXaperture',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-aperture-group',
        nxp_optional='True',
        )
    class nxg_ATTENUATOR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-attenuator-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXattenuator.m_def,repeats=True)
    nxg_ATTENUATOR = SubSection(sub_section=nxg_ATTENUATOR.m_def,repeats=True,
        nxp_type='NXattenuator',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-attenuator-group',
        nxp_optional='True',
        )
    class nxg_BEAM(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-beam-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXbeam.m_def,repeats=True)
    nxg_BEAM = SubSection(sub_section=nxg_BEAM.m_def,repeats=True,
        nxp_type='NXbeam',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-beam-group',
        nxp_optional='True',
        )
    class nxg_BEAM_STOP(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-beam-stop-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXbeam_stop.m_def,repeats=True)
    nxg_BEAM_STOP = SubSection(sub_section=nxg_BEAM_STOP.m_def,repeats=True,
        nxp_type='NXbeam_stop',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-beam-stop-group',
        nxp_optional='True',
        )
    class nxg_BENDING_MAGNET(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-bending-magnet-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXbending_magnet.m_def,repeats=True)
    nxg_BENDING_MAGNET = SubSection(sub_section=nxg_BENDING_MAGNET.m_def,repeats=True,
        nxp_type='NXbending_magnet',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-bending-magnet-group',
        nxp_optional='True',
        )
    class nxg_COLLIMATOR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-collimator-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcollimator.m_def,repeats=True)
    nxg_COLLIMATOR = SubSection(sub_section=nxg_COLLIMATOR.m_def,repeats=True,
        nxp_type='NXcollimator',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-collimator-group',
        nxp_optional='True',
        )
    class nxg_COLLECTION(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-collection-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
    nxg_COLLECTION = SubSection(sub_section=nxg_COLLECTION.m_def,repeats=True,
        nxp_type='NXcollection',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-collection-group',
        nxp_optional='True',
        )
    class nxg_CAPILLARY(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-capillary-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcapillary.m_def,repeats=True)
    nxg_CAPILLARY = SubSection(sub_section=nxg_CAPILLARY.m_def,repeats=True,
        nxp_type='NXcapillary',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-capillary-group',
        nxp_optional='True',
        )
    class nxg_CRYSTAL(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-crystal-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
    nxg_CRYSTAL = SubSection(sub_section=nxg_CRYSTAL.m_def,repeats=True,
        nxp_type='NXcrystal',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-crystal-group',
        nxp_optional='True',
        )
    class nxg_DETECTOR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-detector-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
    nxg_DETECTOR = SubSection(sub_section=nxg_DETECTOR.m_def,repeats=True,
        nxp_type='NXdetector',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-detector-group',
        nxp_optional='True',
        )
    class nxg_DETECTOR_GROUP(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-detector-group-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdetector_group.m_def,repeats=True)
    nxg_DETECTOR_GROUP = SubSection(sub_section=nxg_DETECTOR_GROUP.m_def,repeats=True,
        nxp_type='NXdetector_group',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-detector-group-group',
        nxp_optional='True',
        )
    class nxg_DISK_CHOPPER(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-disk-chopper-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdisk_chopper.m_def,repeats=True)
    nxg_DISK_CHOPPER = SubSection(sub_section=nxg_DISK_CHOPPER.m_def,repeats=True,
        nxp_type='NXdisk_chopper',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-disk-chopper-group',
        nxp_optional='True',
        )
    class nxg_EVENT_DATA(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-event-data-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXevent_data.m_def,repeats=True)
    nxg_EVENT_DATA = SubSection(sub_section=nxg_EVENT_DATA.m_def,repeats=True,
        nxp_type='NXevent_data',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-event-data-group',
        nxp_optional='True',
        )
    class nxg_FERMI_CHOPPER(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-fermi-chopper-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXfermi_chopper.m_def,repeats=True)
    nxg_FERMI_CHOPPER = SubSection(sub_section=nxg_FERMI_CHOPPER.m_def,repeats=True,
        nxp_type='NXfermi_chopper',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-fermi-chopper-group',
        nxp_optional='True',
        )
    class nxg_FILTER(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-filter-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXfilter.m_def,repeats=True)
    nxg_FILTER = SubSection(sub_section=nxg_FILTER.m_def,repeats=True,
        nxp_type='NXfilter',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-filter-group',
        nxp_optional='True',
        )
    class nxg_FLIPPER(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-flipper-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXflipper.m_def,repeats=True)
    nxg_FLIPPER = SubSection(sub_section=nxg_FLIPPER.m_def,repeats=True,
        nxp_type='NXflipper',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-flipper-group',
        nxp_optional='True',
        )
    class nxg_GUIDE(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-guide-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXguide.m_def,repeats=True)
    nxg_GUIDE = SubSection(sub_section=nxg_GUIDE.m_def,repeats=True,
        nxp_type='NXguide',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-guide-group',
        nxp_optional='True',
        )
    class nxg_INSERTION_DEVICE(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-insertion-device-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXinsertion_device.m_def,repeats=True)
    nxg_INSERTION_DEVICE = SubSection(sub_section=nxg_INSERTION_DEVICE.m_def,repeats=True,
        nxp_type='NXinsertion_device',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-insertion-device-group',
        nxp_optional='True',
        )
    class nxg_MIRROR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-mirror-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXmirror.m_def,repeats=True)
    nxg_MIRROR = SubSection(sub_section=nxg_MIRROR.m_def,repeats=True,
        nxp_type='NXmirror',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-mirror-group',
        nxp_optional='True',
        )
    class nxg_MODERATOR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-moderator-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXmoderator.m_def,repeats=True)
    nxg_MODERATOR = SubSection(sub_section=nxg_MODERATOR.m_def,repeats=True,
        nxp_type='NXmoderator',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-moderator-group',
        nxp_optional='True',
        )
    class nxg_MONOCHROMATOR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-monochromator-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
    nxg_MONOCHROMATOR = SubSection(sub_section=nxg_MONOCHROMATOR.m_def,repeats=True,
        nxp_type='NXmonochromator',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-monochromator-group',
        nxp_optional='True',
        )
    class nxg_POLARIZER(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-polarizer-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXpolarizer.m_def,repeats=True)
    nxg_POLARIZER = SubSection(sub_section=nxg_POLARIZER.m_def,repeats=True,
        nxp_type='NXpolarizer',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-polarizer-group',
        nxp_optional='True',
        )
    class nxg_POSITIONER(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-positioner-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXpositioner.m_def,repeats=True)
    nxg_POSITIONER = SubSection(sub_section=nxg_POSITIONER.m_def,repeats=True,
        nxp_type='NXpositioner',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-positioner-group',
        nxp_optional='True',
        )
    class nxg_SOURCE(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-source-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
    nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
        nxp_type='NXsource',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-source-group',
        nxp_optional='True',
        )
    class nxg_DIFFRACTOMETER(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-diffractometer-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
    nxg_DIFFRACTOMETER = SubSection(sub_section=nxg_DIFFRACTOMETER.m_def,repeats=True,
        nxp_type='NXtransformations',
        nxp_name='DIFFRACTOMETER',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-diffractometer-group',
        nxp_optional='True',
        )
    class nxg_VELOCITY_SELECTOR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-velocity-selector-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXvelocity_selector.m_def,repeats=True)
    nxg_VELOCITY_SELECTOR = SubSection(sub_section=nxg_VELOCITY_SELECTOR.m_def,repeats=True,
        nxp_type='NXvelocity_selector',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-velocity-selector-group',
        nxp_optional='True',
        )
    class nxg_XRAYLENS(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-xraylens-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXxraylens.m_def,repeats=True)
    nxg_XRAYLENS = SubSection(sub_section=nxg_XRAYLENS.m_def,repeats=True,
        nxp_type='NXxraylens',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-xraylens-group',
        nxp_optional='True',
        )
    class nxf_name(NXobject):
        '''
Name of instrument
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_short_name(NXobject):
            '''
short name for instrument, perhaps the acronym
                https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-name-short-name-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_short_name = SubSection(sub_section=nxa_short_name.m_def,repeats=True,
            nxp_name='short_name',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-name-short-name-attribute',
            nxp_optional='True',
            )
    nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
        nxp_name='name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-name-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which child group
            contains a path leading              to a :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute             to help
            define the path to the default dataset to be plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-default-attribute',
        nxp_optional='True',
        )

class NXsubentry(NXobject):
    '''
        Group of multiple application definitions for "multi-modal" (e.g. SAXS/WAXS)
        measurements.                                  ``NXsubentry`` is a base class
        virtually identical to :ref:`NXentry`                 and is used as the (overlay)
        location for application definitions.                 Use a separate
        ``NXsubentry`` for each application definition.
        To use ``NXsubentry`` with a hypothetical application definition
        called ``NXmyappdef``:

        * Create a group with attribute ``NX_class="NXsubentry"``                 * Within
        that group, create a field called ``definition="NXmyappdef"``.                 *
        There are two optional attributes of definition: ``version`` and ``URL``

        The intended use is to define application definitions for a
        multi-modal (a.k.a. multi-technique) :ref:`NXentry`.                  Previously,
        an application definition                  replaced :ref:`NXentry` with its own
        definition.                  With the increasing popularity of instruments
        combining                  multiple techniques for data collection (such as
        SAXS/WAXS instruments),                  it was recognized the application
        definitions must be entered in the NeXus                 data file tree as
        children of :ref:`NXentry`.
        https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXsubentry',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_category='base',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry',
        nxp_optional='True',
        )
    class nxg_experiment_documentation(NXobject):
        '''
Description of the full experiment (document in pdf, latex, ...)
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-documentation-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_experiment_documentation = SubSection(sub_section=nxg_experiment_documentation.m_def,repeats=True,
        nxp_type='NXnote',
        nxp_name='experiment_documentation',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-documentation-group',
        nxp_optional='True',
        )
    class nxg_notes(NXobject):
        '''
Notes describing entry
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-notes-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_notes = SubSection(sub_section=nxg_notes.m_def,repeats=True,
        nxp_name='notes',
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-notes-group',
        nxp_optional='True',
        )
    class nxg_thumbnail(NXobject):
        '''
            A small image that is representative of the entry. An example of this is a
            640x480                         jpeg image automatically produced by a low
            resolution plot of the NXdata.
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-thumbnail-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        class nxa_mime_type(NXobject):
            '''
The value should be an ``image/*``  Obligatory value:    ['image/*']

                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-thumbnail-mime-type-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_mime_type = SubSection(sub_section=nxa_mime_type.m_def,repeats=True,
            nxp_name='mime_type',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-thumbnail-mime-type-attribute',
            nxp_optional='True',
            enumeration=['image/*'],
            )
    nxg_thumbnail = SubSection(sub_section=nxg_thumbnail.m_def,repeats=True,
        nxp_name='thumbnail',
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-thumbnail-group',
        nxp_optional='True',
        )
    class nxg_USER(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-user-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
    nxg_USER = SubSection(sub_section=nxg_USER.m_def,repeats=True,
        nxp_type='NXuser',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-user-group',
        nxp_optional='True',
        )
    class nxg_SAMPLE(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-sample-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
    nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
        nxp_type='NXsample',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-sample-group',
        nxp_optional='True',
        )
    class nxg_INSTRUMENT(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-instrument-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
    nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
        nxp_type='NXinstrument',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-instrument-group',
        nxp_optional='True',
        )
    class nxg_COLLECTION(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
    nxg_COLLECTION = SubSection(sub_section=nxg_COLLECTION.m_def,repeats=True,
        nxp_type='NXcollection',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-group',
        nxp_optional='True',
        )
    class nxg_MONITOR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-monitor-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
    nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
        nxp_type='NXmonitor',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-monitor-group',
        nxp_optional='True',
        )
    class nxg_DATA(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-data-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-data-group',
        nxp_optional='True',
        )
    class nxg_PARAMETERS(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-parameters-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
    nxg_PARAMETERS = SubSection(sub_section=nxg_PARAMETERS.m_def,repeats=True,
        nxp_type='NXparameters',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-parameters-group',
        nxp_optional='True',
        )
    class nxg_PROCESS(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-process-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
    nxg_PROCESS = SubSection(sub_section=nxg_PROCESS.m_def,repeats=True,
        nxp_type='NXprocess',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-process-group',
        nxp_optional='True',
        )
    class nxf_title(NXobject):
        '''
Extended title for entry
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-title-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
        nxp_name='title',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-title-field',
        nxp_optional='True',
        )
    class nxf_experiment_identifier(NXobject):
        '''
            Unique identifier for the experiment, defined by                     the
            facility, possibly linked to the proposals
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-identifier-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_experiment_identifier = SubSection(sub_section=nxf_experiment_identifier.m_def,repeats=True,
        nxp_name='experiment_identifier',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-identifier-field',
        nxp_optional='True',
        )
    class nxf_experiment_description(NXobject):
        '''
Brief summary of the experiment, including key objectives.
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_experiment_description = SubSection(sub_section=nxf_experiment_description.m_def,repeats=True,
        nxp_name='experiment_description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-description-field',
        nxp_optional='True',
        )
    class nxf_collection_identifier(NXobject):
        '''
User or Data Acquisition defined group of NeXus files or :ref:`NXentry`
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-identifier-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_collection_identifier = SubSection(sub_section=nxf_collection_identifier.m_def,repeats=True,
        nxp_name='collection_identifier',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-identifier-field',
        nxp_optional='True',
        )
    class nxf_collection_description(NXobject):
        '''
Brief summary of the collection, including grouping criteria.
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_collection_description = SubSection(sub_section=nxf_collection_description.m_def,repeats=True,
        nxp_name='collection_description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-description-field',
        nxp_optional='True',
        )
    class nxf_entry_identifier(NXobject):
        '''
unique identifier for the measurement, defined by the facility.
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-entry-identifier-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_entry_identifier = SubSection(sub_section=nxf_entry_identifier.m_def,repeats=True,
        nxp_name='entry_identifier',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-entry-identifier-field',
        nxp_optional='True',
        )
    class nxf_definition(NXobject):
        '''
Official NeXus NXDL schema to which this subentry conforms
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_version(NXobject):
            '''
NXDL version number
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-version-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
            nxp_name='version',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-version-attribute',
            nxp_optional='True',
            )
        class nxa_URL(NXobject):
            '''
URL of NXDL file
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-url-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_URL = SubSection(sub_section=nxa_URL.m_def,repeats=True,
            nxp_name='URL',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-url-attribute',
            nxp_optional='True',
            )
    nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
        nxp_name='definition',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-field',
        nxp_optional='True',
        )
    class nxf_definition_local(NXobject):
        '''
            Local NXDL schema extended from the subentry                         specified
            in the ``definition`` field.                          This contains any
            locally-defined,                         additional fields in the subentry.
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_version(NXobject):
            '''
NXDL version number
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-version-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
            nxp_name='version',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-version-attribute',
            nxp_optional='True',
            )
        class nxa_URL(NXobject):
            '''
URL of NXDL file
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-url-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_URL = SubSection(sub_section=nxa_URL.m_def,repeats=True,
            nxp_name='URL',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-url-attribute',
            nxp_optional='True',
            )
    nxf_definition_local = SubSection(sub_section=nxf_definition_local.m_def,repeats=True,
        nxp_name='definition_local',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-field',
        nxp_optional='True',
        )
    class nxf_start_time(NXobject):
        '''
Starting time of measurement
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-start-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
        nxp_name='start_time',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-start-time-field',
        nxp_optional='True',
        )
    class nxf_end_time(NXobject):
        '''
Ending time of measurement
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-end-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
        nxp_name='end_time',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-end-time-field',
        nxp_optional='True',
        )
    class nxf_duration(NXobject):
        '''
Duration of measurement
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-duration-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
        nxp_name='duration',
        nxp_type='NX_INT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-duration-field',
        nxp_optional='True',
        )
    class nxf_collection_time(NXobject):
        '''
            Time transpired actually collecting data i.e. taking out time when collection
            was                         suspended due to e.g. temperature out of range
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_collection_time = SubSection(sub_section=nxf_collection_time.m_def,repeats=True,
        nxp_name='collection_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-time-field',
        nxp_optional='True',
        )
    class nxf_run_cycle(NXobject):
        '''
Such as "2007-3". Some user facilities organize their beam time into run
            cycles.
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-run-cycle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_run_cycle = SubSection(sub_section=nxf_run_cycle.m_def,repeats=True,
        nxp_name='run_cycle',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-run-cycle-field',
        nxp_optional='True',
        )
    class nxf_program_name(NXobject):
        '''
Name of program used to generate this file
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_version(NXobject):
            '''
Program version number
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-version-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
            nxp_name='version',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-version-attribute',
            nxp_optional='True',
            )
        class nxa_configuration(NXobject):
            '''
configuration of the program
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-configuration-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_configuration = SubSection(sub_section=nxa_configuration.m_def,repeats=True,
            nxp_name='configuration',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-configuration-attribute',
            nxp_optional='True',
            )
    nxf_program_name = SubSection(sub_section=nxf_program_name.m_def,repeats=True,
        nxp_name='program_name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-field',
        nxp_optional='True',
        )
    class nxf_revision(NXobject):
        '''
            Revision id of the file due to re-calibration, reprocessing, new analysis, new
            instrument definition format, ...
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-revision-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_comment(NXobject):
            '''
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-revision-comment-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_comment = SubSection(sub_section=nxa_comment.m_def,repeats=True,
            nxp_name='comment',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-revision-comment-attribute',
            nxp_optional='True',
            )
    nxf_revision = SubSection(sub_section=nxf_revision.m_def,repeats=True,
        nxp_name='revision',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-revision-field',
        nxp_optional='True',
        )
    class nxf_pre_sample_flightpath(NXobject):
        '''
            This is the flightpath before the sample position. This can be determined by a
            chopper,                         by the moderator or the source itself. In
            other words: it the distance to the component                         which
            gives the T0 signal to the detector electronics. If another component in the
            NXinstrument hierarchy provides this information, this should be a link.
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-pre-sample-flightpath-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_pre_sample_flightpath = SubSection(sub_section=nxf_pre_sample_flightpath.m_def,repeats=True,
        nxp_name='pre_sample_flightpath',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-pre-sample-flightpath-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                                                  Declares
            which :ref:`NXdata` group contains the data                          to be
            shown by default.                         It is needed to resolve ambiguity
            when more than                          one :ref:`NXdata` group exists.
            The value is the name of the default :ref:`NXdata` group.
            It is recommended (as of NIAC2014) to use this attribute
            to help define the path to the default dataset to be plotted.
            See https://www.nexusformat.org/2014_How_to_find_default_data.html
            for a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-default-attribute',
        nxp_optional='True',
        )
    class nxa_IDF_Version(NXobject):
        '''
ISIS Muon IDF_Version
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-idf-version-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_IDF_Version = SubSection(sub_section=nxa_IDF_Version.m_def,repeats=True,
        nxp_name='IDF_Version',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-idf-version-attribute',
        nxp_optional='True',
        )

class NXentry(NXobject):
    '''
        (**required**) :ref:`NXentry` describes the measurement.
        The top-level NeXus group which contains all the data and associated
        information that comprise a single measurement.                  It is mandatory
        that there is at least one                 group of this type in the NeXus file.
        https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXentry',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_category='base',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry',
        nxp_optional='True',
        )
    class nxg_DATA(NXobject):
        '''
            The data group                                          .. note:: Before the
            NIAC2016 meeting [#]_, at least one                            :ref:`NXdata`
            group was required in each :ref:`NXentry` group.                            At
            the NIAC2016 meeting, it was decided to make :ref:`NXdata`
            an optional group in :ref:`NXentry` groups for data files that
            do not use an application definition.                            It is
            recommended strongly that all NeXus data files provide
            a NXdata group.                              It is permissable to omit the
            NXdata group only when                             defining the default plot
            is not practical or possible                            from the available
            data.                                                        For example,
            neutron event data may not have anything that
            makes a useful plot without extensive processing.
            Certain application definitions override this decision and
            require an :ref:`NXdata` group                            in the
            :ref:`NXentry` group.  The ``minOccurs=0`` attribute
            in the application definition will indicate the
            :ref:`NXdata` group                            is optional, otherwise, it is
            required.                                     .. [#] NIAC2016:
            https://www.nexusformat.org/NIAC2016.html,
            https://github.com/nexusformat/NIAC/issues/16

            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-data-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
    nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-data-group',
        nxp_optional='True',
        )
    class nxg_experiment_documentation(NXobject):
        '''
Description of the full experiment (document in pdf, latex, ...)
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-documentation-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_experiment_documentation = SubSection(sub_section=nxg_experiment_documentation.m_def,repeats=True,
        nxp_type='NXnote',
        nxp_name='experiment_documentation',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-documentation-group',
        nxp_optional='True',
        )
    class nxg_notes(NXobject):
        '''
Notes describing entry
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-notes-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
    nxg_notes = SubSection(sub_section=nxg_notes.m_def,repeats=True,
        nxp_name='notes',
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-notes-group',
        nxp_optional='True',
        )
    class nxg_thumbnail(NXobject):
        '''
            A small image that is representative of the entry. An example of this is a
            640x480                         jpeg image automatically produced by a low
            resolution plot of the NXdata.
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-thumbnail-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        class nxa_type(NXobject):
            '''
The mime type should be an ``image/*``  Obligatory value:    ['image/*']

                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-thumbnail-type-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_type = SubSection(sub_section=nxa_type.m_def,repeats=True,
            nxp_name='type',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-thumbnail-type-attribute',
            nxp_optional='True',
            enumeration=['image/*'],
            )
    nxg_thumbnail = SubSection(sub_section=nxg_thumbnail.m_def,repeats=True,
        nxp_name='thumbnail',
        nxp_type='NXnote',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-thumbnail-group',
        nxp_optional='True',
        )
    class nxg_USER(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-user-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
    nxg_USER = SubSection(sub_section=nxg_USER.m_def,repeats=True,
        nxp_type='NXuser',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-user-group',
        nxp_optional='True',
        )
    class nxg_SAMPLE(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-sample-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
    nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
        nxp_type='NXsample',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-sample-group',
        nxp_optional='True',
        )
    class nxg_INSTRUMENT(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-instrument-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
    nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
        nxp_type='NXinstrument',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-instrument-group',
        nxp_optional='True',
        )
    class nxg_COLLECTION(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
    nxg_COLLECTION = SubSection(sub_section=nxg_COLLECTION.m_def,repeats=True,
        nxp_type='NXcollection',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-group',
        nxp_optional='True',
        )
    class nxg_MONITOR(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-monitor-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
    nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
        nxp_type='NXmonitor',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-monitor-group',
        nxp_optional='True',
        )
    class nxg_PARAMETERS(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-parameters-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
    nxg_PARAMETERS = SubSection(sub_section=nxg_PARAMETERS.m_def,repeats=True,
        nxp_type='NXparameters',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-parameters-group',
        nxp_optional='True',
        )
    class nxg_PROCESS(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-process-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
    nxg_PROCESS = SubSection(sub_section=nxg_PROCESS.m_def,repeats=True,
        nxp_type='NXprocess',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-process-group',
        nxp_optional='True',
        )
    class nxg_SUBENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-subentry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXsubentry.m_def,repeats=True)
    nxg_SUBENTRY = SubSection(sub_section=nxg_SUBENTRY.m_def,repeats=True,
        nxp_type='NXsubentry',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-subentry-group',
        nxp_optional='True',
        )
    class nxf_title(NXobject):
        '''
Extended title for entry
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-title-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
        nxp_name='title',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-title-field',
        nxp_optional='True',
        )
    class nxf_experiment_identifier(NXobject):
        '''
            Unique identifier for the experiment,                          defined by the
            facility,                          possibly linked to the proposals
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-identifier-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_experiment_identifier = SubSection(sub_section=nxf_experiment_identifier.m_def,repeats=True,
        nxp_name='experiment_identifier',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-identifier-field',
        nxp_optional='True',
        )
    class nxf_experiment_description(NXobject):
        '''
Brief summary of the experiment, including key objectives.
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_experiment_description = SubSection(sub_section=nxf_experiment_description.m_def,repeats=True,
        nxp_name='experiment_description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-description-field',
        nxp_optional='True',
        )
    class nxf_collection_identifier(NXobject):
        '''
User or Data Acquisition defined group of NeXus files or NXentry
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-identifier-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_collection_identifier = SubSection(sub_section=nxf_collection_identifier.m_def,repeats=True,
        nxp_name='collection_identifier',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-identifier-field',
        nxp_optional='True',
        )
    class nxf_collection_description(NXobject):
        '''
Brief summary of the collection, including grouping criteria.
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-description-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_collection_description = SubSection(sub_section=nxf_collection_description.m_def,repeats=True,
        nxp_name='collection_description',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-description-field',
        nxp_optional='True',
        )
    class nxf_entry_identifier(NXobject):
        '''
unique identifier for the measurement, defined by the facility.
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_entry_identifier = SubSection(sub_section=nxf_entry_identifier.m_def,repeats=True,
        nxp_name='entry_identifier',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-field',
        nxp_optional='True',
        )
    class nxf_entry_identifier_uuid(NXobject):
        '''
UUID identifier for the measurement.
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-uuid-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_version(NXobject):
            '''
Version of UUID used
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-uuid-version-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
            nxp_name='version',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-uuid-version-attribute',
            nxp_optional='True',
            )
    nxf_entry_identifier_uuid = SubSection(sub_section=nxf_entry_identifier_uuid.m_def,repeats=True,
        nxp_name='entry_identifier_uuid',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-uuid-field',
        nxp_optional='True',
        )
    class nxf_features(NXobject):
        '''
            Reserved for future use by NIAC.

            See https://github.com/nexusformat/definitions/issues/382
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-features-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_features = SubSection(sub_section=nxf_features.m_def,repeats=True,
        nxp_name='features',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-features-field',
        nxp_optional='True',
        )
    class nxf_definition(NXobject):
        '''
            (alternate use: see same field in :ref:`NXsubentry` for preferred)
            Official NeXus NXDL schema to which this entry conforms.
            This field is provided so that :ref:`NXentry` can be the overlay position
            in a NeXus data file for an application definition and its
            set of groups, fields, and attributes.
            *It is advised* to use :ref:`NXsubentry`, instead, as the overlay position.
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_version(NXobject):
            '''
NXDL version number
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-version-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
            nxp_name='version',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-version-attribute',
            nxp_optional='True',
            )
        class nxa_URL(NXobject):
            '''
URL of NXDL file
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-url-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_URL = SubSection(sub_section=nxa_URL.m_def,repeats=True,
            nxp_name='URL',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-url-attribute',
            nxp_optional='True',
            )
    nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
        nxp_name='definition',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-field',
        nxp_optional='True',
        )
    class nxf_definition_local(NXobject):
        '''
            Local NXDL schema extended from the entry                         specified in
            the ``definition`` field.                          This contains any
            locally-defined,                         additional fields in the entry.
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_version(NXobject):
            '''
NXDL version number
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-version-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
            nxp_name='version',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-version-attribute',
            nxp_optional='True',
            )
        class nxa_URL(NXobject):
            '''
URL of NXDL file
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-url-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_URL = SubSection(sub_section=nxa_URL.m_def,repeats=True,
            nxp_name='URL',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-url-attribute',
            nxp_optional='True',
            )
    nxf_definition_local = SubSection(sub_section=nxf_definition_local.m_def,repeats=True,
        nxp_name='definition_local',
        deprecated=''' DEPRECATED:
        see same field in :ref:`NXsubentry` for preferred use
        ''',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-field',
        nxp_optional='True',
        )
    class nxf_start_time(NXobject):
        '''
Starting time of measurement
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-start-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
        nxp_name='start_time',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-start-time-field',
        nxp_optional='True',
        )
    class nxf_end_time(NXobject):
        '''
Ending time of measurement
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-end-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
        nxp_name='end_time',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-end-time-field',
        nxp_optional='True',
        )
    class nxf_duration(NXobject):
        '''
Duration of measurement
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-duration-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
        nxp_name='duration',
        nxp_type='NX_INT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-duration-field',
        nxp_optional='True',
        )
    class nxf_collection_time(NXobject):
        '''
            Time transpired actually collecting data i.e. taking out time when collection
            was                         suspended due to e.g. temperature out of range
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-time-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_collection_time = SubSection(sub_section=nxf_collection_time.m_def,repeats=True,
        nxp_name='collection_time',
        nxp_type='NX_FLOAT',
        nxp_units='NX_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-time-field',
        nxp_optional='True',
        )
    class nxf_run_cycle(NXobject):
        '''
Such as "2007-3". Some user facilities organize their beam time into run
            cycles.
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-run-cycle-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxf_run_cycle = SubSection(sub_section=nxf_run_cycle.m_def,repeats=True,
        nxp_name='run_cycle',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-run-cycle-field',
        nxp_optional='True',
        )
    class nxf_program_name(NXobject):
        '''
Name of program used to generate this file
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_version(NXobject):
            '''
Program version number
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-version-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
            nxp_name='version',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-version-attribute',
            nxp_optional='True',
            )
        class nxa_configuration(NXobject):
            '''
configuration of the program
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-configuration-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_configuration = SubSection(sub_section=nxa_configuration.m_def,repeats=True,
            nxp_name='configuration',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-configuration-attribute',
            nxp_optional='True',
            )
    nxf_program_name = SubSection(sub_section=nxf_program_name.m_def,repeats=True,
        nxp_name='program_name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-field',
        nxp_optional='True',
        )
    class nxf_revision(NXobject):
        '''
            Revision id of the file due to re-calibration, reprocessing, new analysis, new
            instrument definition format, ...
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-revision-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        class nxa_comment(NXobject):
            '''
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-revision-comment-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_comment = SubSection(sub_section=nxa_comment.m_def,repeats=True,
            nxp_name='comment',
            nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-revision-comment-attribute',
            nxp_optional='True',
            )
    nxf_revision = SubSection(sub_section=nxf_revision.m_def,repeats=True,
        nxp_name='revision',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-revision-field',
        nxp_optional='True',
        )
    class nxf_pre_sample_flightpath(NXobject):
        '''
            This is the flightpath before the sample position. This can be determined by a
            chopper,                         by the moderator or the source itself. In
            other words: it the distance to the component                         which
            gives the T0 signal to the detector electronics. If another component in the
            NXinstrument hierarchy provides this information, this should be a link.
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-pre-sample-flightpath-field
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
    nxf_pre_sample_flightpath = SubSection(sub_section=nxf_pre_sample_flightpath.m_def,repeats=True,
        nxp_name='pre_sample_flightpath',
        nxp_type='NX_FLOAT',
        nxp_units='NX_LENGTH',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-pre-sample-flightpath-field',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                                                  Declares
            which :ref:`NXdata` (or :ref:`NXsubentry`) group
            contains the data to be shown by default.                         It is needed
            to resolve ambiguity when more than one :ref:`NXdata` group exists.
            The value is the name of the default :ref:`NXdata` group.
            It is recommended (as of NIAC2014 [#]_) to use this attribute
            to help define the path to the default dataset to be plotted.
            .. [#] NIAC2014 discussion summary:
            https://www.nexusformat.org/2014_How_to_find_default_data.html
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-default-attribute',
        nxp_optional='True',
        )
    class nxa_IDF_Version(NXobject):
        '''
ISIS Muon IDF_Version
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-idf-version-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_IDF_Version = SubSection(sub_section=nxa_IDF_Version.m_def,repeats=True,
        nxp_name='IDF_Version',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-idf-version-attribute',
        nxp_optional='True',
        )

class NXxas(NXobject):
    '''
        This is an application definition for raw data from an X-ray absorption
        spectroscopy experiment.               This is essentially a scan on energy versus
        incoming/        absorbed beam.
        https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXxas',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_entry(NXobject):
            '''
                NeXus convention is to use "entry1", "entry2", ...                 for
                analysis software to locate each entry.
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-entry-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_entry = SubSection(sub_section=nxa_entry.m_def,repeats=True,
            nxp_name='entry',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-entry-attribute',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXxas']

                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-definition-field',
            nxp_required='True',
            enumeration=['NXxas'],
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Obligatory value:    ['x-ray']

                        https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['x-ray'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_monochromator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-monochromator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                class nxf_energy(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-monochromator-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                    nxp_name='energy',
                    nxp_axis='1',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-monochromator-energy-field',
                    nxp_required='True',
                    )
            nxg_monochromator = SubSection(sub_section=nxg_monochromator.m_def,repeats=True,
                nxp_type='NXmonochromator',
                nxp_name='monochromator',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-monochromator-group',
                nxp_required='True',
                )
            class nxg_incoming_beam(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-incoming-beam-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-incoming-beam-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-incoming-beam-data-field',
                    nxp_required='True',
                    )
            nxg_incoming_beam = SubSection(sub_section=nxg_incoming_beam.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='incoming_beam',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-incoming-beam-group',
                nxp_required='True',
                )
            class nxg_absorbed_beam(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-absorbed-beam-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
mark this field with attribute  ``signal=1``
                        https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-absorbed-beam-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-absorbed-beam-data-field',
                    nxp_required='True',
                    )
            nxg_absorbed_beam = SubSection(sub_section=nxg_absorbed_beam.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='absorbed_beam',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-absorbed-beam-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-sample-name-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-sample-group',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time (timer)
                    or received monitor counts (monitor).                   Possible
                    values:    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-preset-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-data-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-data-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-group',
        nxp_required='True',
        )

class NXxbase(NXobject):
    '''
        This definition covers the common parts of all monochromatic single crystal raw
        data application definitions.
        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXxbase',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXxbase']

                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-definition-field',
            nxp_required='True',
            enumeration=['NXxbase'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_source(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray','electron']

                        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray','electron'],
                    )
            nxg_source = SubSection(sub_section=nxg_source.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_name='source',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_monochromator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-monochromator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                class nxf_wavelength(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-monochromator-wavelength-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
                    nxp_name='wavelength',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_WAVELENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-monochromator-wavelength-field',
                    nxp_required='True',
                    )
            nxg_monochromator = SubSection(sub_section=nxg_monochromator.m_def,repeats=True,
                nxp_type='NXmonochromator',
                nxp_name='monochromator',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-monochromator-group',
                nxp_required='True',
                )
            class nxg_detector(NXobject):
                '''
                    The name of the group is detector if there is only one detector,
                    if there are several,  names have to be detector1,
                    detector2, ...detectorn.
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        The area detector data, the first dimension is always the
                        number of scan points, the second and third are the number
                        of pixels in x and y. The origin is always assumed to be
                        in the center of the detector. maxOccurs is limited to the
                        the number of detectors on your instrument.
                        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    class nxa_signal(NXobject):
                        '''
                            Obligatory value:    ['1']

                            https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-data-signal-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
                    nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
                        nxp_name='signal',
                        nxp_type='NX_POSINT',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-data-signal-attribute',
                        nxp_required='True',
                        enumeration=['1'],
                        )
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_x_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-x-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_size = SubSection(sub_section=nxf_x_pixel_size.m_def,repeats=True,
                    nxp_name='x_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-x-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_y_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-y-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_pixel_size = SubSection(sub_section=nxf_y_pixel_size.m_def,repeats=True,
                    nxp_name='y_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-y-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-distance-field',
                    nxp_required='True',
                    )
                class nxf_frame_start_number(NXobject):
                    '''
                        This is the start number of the first frame of a scan. In PX one
                        often scans a couple                of frames on a give sample,
                        then does something else, then returns to the same sample
                        and scans some more frames. Each time with a new data file.
                        This number helps concatenating such measurements.
                        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-frame-start-number-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_frame_start_number = SubSection(sub_section=nxf_frame_start_number.m_def,repeats=True,
                    nxp_name='frame_start_number',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-frame-start-number-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_maxOccurs='unbounded',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_orientation_matrix(NXobject):
                '''
                    The orientation matrix according to Busing and              Levy
                    conventions. This is not strictly necessary as              the UB can
                    always be derived from the data.  But              let us bow to
                    common usage which includes the              UB nearly always.
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-orientation-matrix-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_orientation_matrix = SubSection(sub_section=nxf_orientation_matrix.m_def,repeats=True,
                nxp_name='orientation_matrix',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-orientation-matrix-field',
                nxp_required='True',
                )
            class nxf_unit_cell(NXobject):
                '''
                    The unit cell, a, b, c, alpha, beta, gamma.              Again, not
                    strictly necessary, but normally written.
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-unit-cell-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_unit_cell = SubSection(sub_section=nxf_unit_cell.m_def,repeats=True,
                nxp_name='unit_cell',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-unit-cell-field',
                nxp_required='True',
                )
            class nxf_temperature(NXobject):
                '''
                    The sample temperature or whatever sensor represents this value best
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-temperature-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
                nxp_name='temperature',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-temperature-field',
                nxp_required='True',
                )
            class nxf_x_translation(NXobject):
                '''
Translation of the sample along the X-direction of the laboratory
                    coordinate system
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-x-translation-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_x_translation = SubSection(sub_section=nxf_x_translation.m_def,repeats=True,
                nxp_name='x_translation',
                nxp_type='NX_FLOAT',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-x-translation-field',
                nxp_required='True',
                )
            class nxf_y_translation(NXobject):
                '''
Translation of the sample along the Y-direction of the laboratory
                    coordinate system
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-y-translation-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_y_translation = SubSection(sub_section=nxf_y_translation.m_def,repeats=True,
                nxp_name='y_translation',
                nxp_type='NX_FLOAT',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-y-translation-field',
                nxp_required='True',
                )
            class nxf_distance(NXobject):
                '''
Translation of the sample along the Z-direction of the laboratory
                    coordinate system
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-distance-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                nxp_name='distance',
                nxp_type='NX_FLOAT',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-distance-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-group',
            nxp_required='True',
            )
        class nxg_control(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time (timer)
                    or received monitor counts (monitor).             Possible values:
                    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-preset-field',
                nxp_required='True',
                )
            class nxf_integral(NXobject):
                '''
Total integral monitor counts
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-integral-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_integral = SubSection(sub_section=nxf_integral.m_def,repeats=True,
                nxp_name='integral',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-integral-field',
                nxp_required='True',
                )
        nxg_control = SubSection(sub_section=nxg_control.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_name='control',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                The name of this group id data if there is only              one detector;
                if there are several the names will              be data1, data2, data3
                and will point              to the corresponding detector groups in the
                instrument hierarchy.
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-group',
        nxp_required='True',
        )

class NXscan(NXobject):
    '''
        Application definition for a generic scan instrument.           This definition is
        more an      example then a stringent definition as the content of a given NeXus
        scan file needs to      differ for different types of scans. This example
        definition shows a scan like done      on a rotation camera: the sample is rotated
        and a detector image, the rotation angle     and a monitor value is stored at each
        step in the scan. In the following, the symbol      ``NP`` is used to represent
        the number of scan points. These are the rules for      storing scan data in NeXus
        files which are implemented in this example:          * Each value varied
        throughout a scan is stored as an array of        length ``NP`` at its respective
        location within the NeXus hierarchy.     * For area detectors, ``NP`` is the first
        dimension,        example for a detector of 256x256:  ``data[NP,256,256]``     *
        The NXdata group contains links to all variables varied in the scan and the data.
        This to give an equivalent to the more familiar classical tabular representation
        of scans.           These rules exist for a reason: HDF allows the first dimension
        of a data set to be      unlimited. This means the data can be appended too. Thus
        a NeXus file built according      to the rules given above can be used in the
        following way:          * At the start of a scan, write all the static
        information.     * At each scan point, append new data from varied variables
        and the detector to the file.
        https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXscan',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-end-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXscan']

                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-definition-field',
            nxp_required='True',
            enumeration=['NXscan'],
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_DETECTOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
            nxg_DETECTOR = SubSection(sub_section=nxg_DETECTOR.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_rotation_angle(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-sample-group',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_data(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-monitor-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-monitor-data-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-monitor-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-data-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-group',
        nxp_required='True',
        )

class NXtomoproc(NXobject):
    '''
This is an application definition for the final result of a tomography experiment:
        a 3D construction of some volume of physical properties.
        https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXtomoproc',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-title-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXtomoproc']

                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-definition-field',
            nxp_required='True',
            enumeration=['NXtomoproc'],
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray','electron']

                        https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray','electron'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-sample-name-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-sample-group',
            nxp_required='True',
            )
        class nxg_reconstruction(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
            class nxf_program(NXobject):
                '''
Name of the program used for reconstruction
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-program-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_program = SubSection(sub_section=nxf_program.m_def,repeats=True,
                nxp_name='program',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-program-field',
                nxp_required='True',
                )
            class nxf_version(NXobject):
                '''
Version of the program used
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-version-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_version = SubSection(sub_section=nxf_version.m_def,repeats=True,
                nxp_name='version',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-version-field',
                nxp_required='True',
                )
            class nxf_date(NXobject):
                '''
Date and time of reconstruction processing.
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-date-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxf_date = SubSection(sub_section=nxf_date.m_def,repeats=True,
                nxp_name='date',
                nxp_type='NX_DATE_TIME',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-date-field',
                nxp_required='True',
                )
            class nxg_parameters(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-parameters-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
                class nxf_raw_file(NXobject):
                    '''
Original raw data file this data was derived from
                        https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-parameters-raw-file-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_raw_file = SubSection(sub_section=nxf_raw_file.m_def,repeats=True,
                    nxp_name='raw_file',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-parameters-raw-file-field',
                    nxp_required='True',
                    )
            nxg_parameters = SubSection(sub_section=nxg_parameters.m_def,repeats=True,
                nxp_type='NXparameters',
                nxp_name='parameters',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-parameters-group',
                nxp_required='True',
                )
        nxg_reconstruction = SubSection(sub_section=nxg_reconstruction.m_def,repeats=True,
            nxp_type='NXprocess',
            nxp_name='reconstruction',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            class nxf_data(NXobject):
                '''
                    This is the reconstructed volume. This can be different
                    things. Please indicate in the unit attribute what physical
                    quantity this really is.
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                class nxa_transform(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-transform-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_transform = SubSection(sub_section=nxa_transform.m_def,repeats=True,
                    nxp_name='transform',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-transform-attribute',
                    nxp_required='True',
                    )
                class nxa_offset(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-offset-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_offset = SubSection(sub_section=nxa_offset.m_def,repeats=True,
                    nxp_name='offset',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-offset-attribute',
                    nxp_required='True',
                    )
                class nxa_scaling(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-scaling-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_scaling = SubSection(sub_section=nxa_scaling.m_def,repeats=True,
                    nxp_name='scaling',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-scaling-attribute',
                    nxp_required='True',
                    )
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_signal='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-field',
                nxp_required='True',
                )
            class nxf_x(NXobject):
                '''
                    This is an array holding the values to use for the x-axis of
                    data. The units must be appropriate for the measurement.
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-x-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_x = SubSection(sub_section=nxf_x.m_def,repeats=True,
                nxp_name='x',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-x-field',
                nxp_required='True',
                )
            class nxf_y(NXobject):
                '''
                    This is an array holding the values to use for the y-axis of
                    data. The units must be appropriate for the measurement.
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-y-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_y = SubSection(sub_section=nxf_y.m_def,repeats=True,
                nxp_name='y',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_axis='2',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-y-field',
                nxp_required='True',
                )
            class nxf_z(NXobject):
                '''
                    This is an array holding the values to use for the z-axis of
                    data. The units must be appropriate for the measurement.
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-z-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_z = SubSection(sub_section=nxf_z.m_def,repeats=True,
                nxp_name='z',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_axis='3',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-z-field',
                nxp_required='True',
                )
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-group',
        nxp_required='True',
        )

class NXxlaue(NXobject):
    '''
        raw data from a single crystal laue camera, extends :ref:`NXxrot`          This is
        the application definition for raw data from a single crystal laue      camera. It
        extends :ref:`NXxrot`.
        https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXxlaue',
        nxp_extends='NXxrot',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXxlaue']

                https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-definition-field',
            nxp_required='True',
            enumeration=['NXxlaue'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_source(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxg_distribution(NXobject):
                    '''
                        This is the wavelength distribution of the beam
                        https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
                    class nxf_data(NXobject):
                        '''
expect  ``signal=1 axes="energy"``
                            https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-data-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                        nxp_name='data',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-data-field',
                        nxp_required='True',
                        )
                    class nxf_wavelength(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-wavelength-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
                        nxp_name='wavelength',
                        nxp_units='NX_WAVELENGTH',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-wavelength-field',
                        nxp_required='True',
                        )
                nxg_distribution = SubSection(sub_section=nxg_distribution.m_def,repeats=True,
                    nxp_type='NXdata',
                    nxp_name='distribution',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-group',
                    nxp_required='True',
                    )
            nxg_source = SubSection(sub_section=nxg_source.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_name='source',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-group',
        nxp_required='True',
        )

class NXtomo(NXobject):
    '''
        This is the application definition for x-ray or neutron tomography raw data.
        In tomography            a number of dark field images are measured, some bright
        field images and, of course the sample.            In order to distinguish between
        them images carry a image_key.
        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXtomo',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_minOccurs='0',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-title-field',
            nxp_optional='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_minOccurs='0',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-start-time-field',
            nxp_optional='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_minOccurs='0',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-end-time-field',
            nxp_optional='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXtomo']

                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-definition-field',
            nxp_required='True',
            enumeration=['NXtomo'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-type-field',
                    nxp_optional='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-name-field',
                    nxp_optional='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray','electron']

                        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-probe-field',
                    nxp_optional='True',
                    enumeration=['neutron','x-ray','electron'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-group',
                nxp_optional='True',
                )
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_image_key(NXobject):
                    '''
                        In order                  to distinguish between sample
                        projections, dark and flat                  images, a magic number
                        is recorded per frame.                  The key is as follows:

                        * projection = 0                  * flat field = 1
                        * dark field = 2                  * invalid = 3
                        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-image-key-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_image_key = SubSection(sub_section=nxf_image_key.m_def,repeats=True,
                    nxp_name='image_key',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-image-key-field',
                    nxp_required='True',
                    )
                class nxf_x_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-x-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_size = SubSection(sub_section=nxf_x_pixel_size.m_def,repeats=True,
                    nxp_name='x_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-x-pixel-size-field',
                    nxp_optional='True',
                    )
                class nxf_y_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-y-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_pixel_size = SubSection(sub_section=nxf_y_pixel_size.m_def,repeats=True,
                    nxp_name='y_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-y-pixel-size-field',
                    nxp_optional='True',
                    )
                class nxf_distance(NXobject):
                    '''
Distance between detector and sample
                        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-distance-field',
                    nxp_optional='True',
                    )
                class nxf_x_rotation_axis_pixel_position(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-x-rotation-axis-pixel-position-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_rotation_axis_pixel_position = SubSection(sub_section=nxf_x_rotation_axis_pixel_position.m_def,repeats=True,
                    nxp_name='x_rotation_axis_pixel_position',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-x-rotation-axis-pixel-position-field',
                    nxp_optional='True',
                    )
                class nxf_y_rotation_axis_pixel_position(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-y-rotation-axis-pixel-position-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_rotation_axis_pixel_position = SubSection(sub_section=nxf_y_rotation_axis_pixel_position.m_def,repeats=True,
                    nxp_name='y_rotation_axis_pixel_position',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-y-rotation-axis-pixel-position-field',
                    nxp_optional='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_rotation_angle(NXobject):
                '''
                    In practice this axis is always aligned along one pixel direction on
                    the detector and usually vertical.                  There are
                    experiments with horizontal rotation axes, so this would need to be
                    indicated somehow.                  For now the best way for that is
                    an open question.
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
            class nxf_x_translation(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-x-translation-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_x_translation = SubSection(sub_section=nxf_x_translation.m_def,repeats=True,
                nxp_name='x_translation',
                nxp_units='NX_LENGTH',
                nxp_type='NX_FLOAT',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-x-translation-field',
                nxp_optional='True',
                )
            class nxf_y_translation(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-y-translation-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_y_translation = SubSection(sub_section=nxf_y_translation.m_def,repeats=True,
                nxp_name='y_translation',
                nxp_units='NX_LENGTH',
                nxp_type='NX_FLOAT',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-y-translation-field',
                nxp_optional='True',
                )
            class nxf_z_translation(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-z-translation-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_z_translation = SubSection(sub_section=nxf_z_translation.m_def,repeats=True,
                nxp_name='z_translation',
                nxp_units='NX_LENGTH',
                nxp_type='NX_FLOAT',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-z-translation-field',
                nxp_optional='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-group',
            nxp_required='True',
            )
        class nxg_control(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-control-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_data(NXobject):
                '''
                    Total integral monitor counts for each measured frame. Allows a to
                    correction for           fluctuations in the beam between frames.
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-control-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-control-data-field',
                nxp_required='True',
                )
        nxg_control = SubSection(sub_section=nxg_control.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_name='control',
            nxp_minOccurs='0',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-control-group',
            nxp_optional='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-group',
        nxp_required='True',
        )

class NXlauetof(NXobject):
    '''
        This is the application definition for a TOF laue diffractometer
        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXlauetof',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXlauetof']

                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-definition-field',
            nxp_required='True',
            enumeration=['NXlauetof'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_detector(NXobject):
                '''
                    This assumes a planar 2D detector. All angles and distances refer to
                    the center of the            detector.
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_polar_angle(NXobject):
                    '''
The polar_angle (two theta) where the detector is placed.
                        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_azimuthal_angle(NXobject):
                    '''
The azimuthal angle where the detector is placed.
                        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-azimuthal-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
                    nxp_name='azimuthal_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-azimuthal-angle-field',
                    nxp_required='True',
                    )
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    class nxa_signal(NXobject):
                        '''
                            Obligatory value:    ['1']

                            https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-data-signal-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
                    nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
                        nxp_name='signal',
                        nxp_type='NX_POSINT',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-data-signal-attribute',
                        nxp_required='True',
                        enumeration=['1'],
                        )
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_x_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-x-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_size = SubSection(sub_section=nxf_x_pixel_size.m_def,repeats=True,
                    nxp_name='x_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-x-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_y_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-y-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_pixel_size = SubSection(sub_section=nxf_y_pixel_size.m_def,repeats=True,
                    nxp_name='y_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-y-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-distance-field',
                    nxp_required='True',
                    )
                class nxf_time_of_flight(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-time-of-flight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                    nxp_name='time_of_flight',
                    nxp_units='NX_TIME_OF_FLIGHT',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-time-of-flight-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_orientation_matrix(NXobject):
                '''
                    The orientation matrix according to Busing and             Levy
                    conventions. This is not strictly necessary as             the UB can
                    always be derived from the data.  But             let us bow to common
                    usage which includes thie             UB nearly always.
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-orientation-matrix-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_orientation_matrix = SubSection(sub_section=nxf_orientation_matrix.m_def,repeats=True,
                nxp_name='orientation_matrix',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-orientation-matrix-field',
                nxp_required='True',
                )
            class nxf_unit_cell(NXobject):
                '''
                    The unit cell, a, b, c, alpha, beta, gamma.             Again, not
                    strictly necessary, but normally written.
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-unit-cell-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_unit_cell = SubSection(sub_section=nxf_unit_cell.m_def,repeats=True,
                nxp_name='unit_cell',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-unit-cell-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-group',
            nxp_required='True',
            )
        class nxg_control(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
Count to a preset value based on either clock time (timer) or received
                    monitor counts           (monitor).   Possible values:
                    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-preset-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
use these attributes  ``primary=1 signal=1``
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-data-field',
                nxp_required='True',
                )
            class nxf_time_of_flight(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-time-of-flight-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                nxp_name='time_of_flight',
                nxp_units='NX_TIME_OF_FLIGHT',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-time-of-flight-field',
                nxp_required='True',
                )
        nxg_control = SubSection(sub_section=nxg_control.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_name='control',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-group',
            nxp_required='True',
            )
        class nxg_name(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-name-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_name = SubSection(sub_section=nxg_name.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='name',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-name-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-group',
        nxp_required='True',
        )

class NXxnb(NXxbase):
    '''
        This definition covers the common parts of all monochromatic single crystal raw
        data application definitions.
        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXxnb',
        nxp_extends='NXxbase',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXxnb']

                https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-definition-field',
            nxp_required='True',
            enumeration=['NXxnb'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_polar_angle(NXobject):
                    '''
                        The polar_angle (gamma) of the detector for each scan point.
                        https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_axis='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_tilt_angle(NXobject):
                    '''
                        The angle by which the detector has been tilted out of the
                        scattering plane.
                        https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-tilt-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_tilt_angle = SubSection(sub_section=nxf_tilt_angle.m_def,repeats=True,
                    nxp_name='tilt_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_axis='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-tilt-angle-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_rotation_angle(NXobject):
                '''
                    This is an array holding the sample rotation angle at each
                    scan point
                    https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_axis='1',
                nxp_primary='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-sample-group',
            nxp_required='True',
            )
        class nxg_name(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-name-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_name = SubSection(sub_section=nxg_name.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='name',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-name-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-group',
        nxp_required='True',
        )

class NXxasproc(NXobject):
    '''
        Processed data from XAS. This is energy versus I(incoming)/I(absorbed).
        https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXxasproc',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_entry(NXobject):
            '''
                NeXus convention is to use "entry1", "entry2", ...                  for
                analysis software to locate each entry.
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-entry-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_entry = SubSection(sub_section=nxa_entry.m_def,repeats=True,
            nxp_name='entry',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-entry-attribute',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-title-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXxasproc']

                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-definition-field',
            nxp_required='True',
            enumeration=['NXxasproc'],
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-sample-name-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-sample-group',
            nxp_required='True',
            )
        class nxg_XAS_data_reduction(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
            class nxf_program(NXobject):
                '''
Name of the program used for reconstruction
                    https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-program-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_program = SubSection(sub_section=nxf_program.m_def,repeats=True,
                nxp_name='program',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-program-field',
                nxp_required='True',
                )
            class nxf_version(NXobject):
                '''
Version of the program used
                    https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-version-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_version = SubSection(sub_section=nxf_version.m_def,repeats=True,
                nxp_name='version',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-version-field',
                nxp_required='True',
                )
            class nxf_date(NXobject):
                '''
Date and time of reconstruction processing.
                    https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-date-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxf_date = SubSection(sub_section=nxf_date.m_def,repeats=True,
                nxp_name='date',
                nxp_type='NX_DATE_TIME',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-date-field',
                nxp_required='True',
                )
            class nxg_parameters(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-parameters-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
                class nxf_raw_file(NXobject):
                    '''
Original raw data file this data was derived from
                        https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-parameters-raw-file-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_raw_file = SubSection(sub_section=nxf_raw_file.m_def,repeats=True,
                    nxp_name='raw_file',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-parameters-raw-file-field',
                    nxp_required='True',
                    )
            nxg_parameters = SubSection(sub_section=nxg_parameters.m_def,repeats=True,
                nxp_type='NXparameters',
                nxp_name='parameters',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-parameters-group',
                nxp_required='True',
                )
        nxg_XAS_data_reduction = SubSection(sub_section=nxg_XAS_data_reduction.m_def,repeats=True,
            nxp_type='NXprocess',
            nxp_name='XAS_data_reduction',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            class nxf_energy(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-energy-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                nxp_name='energy',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-energy-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
                    This is corrected and calibrated I(incoming)/I(absorbed). So it is the
                    absorption.                     Expect attribute  ``signal=1``
                    https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-data-field',
                nxp_required='True',
                )
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-group',
        nxp_required='True',
        )

class NXstxm(NXobject):
    '''
        Application definition for a STXM instrument.                       The
        interferometer           position measurements, monochromator photon energy values
        and           detector measurements are all treated as NXdetectors and stored
        within the NXinstrument group as lists of values stored in
        chronological order. The NXdata group then holds another version           of the
        data in a regular 3D array (NumE by NumY by NumX, for a           total of nP
        points in a sample image stack type scan). The former           data values should
        be stored with a minimum loss of precision, while           the latter values can
        be simplified and/or approximated in order to           fit the constraints of a
        regular 3D array. 'Line scans' and 'point spectra'           are just sample_image
        scan types with reduced dimensions in the same way            as single images
        have reduced E dimensions compared to image 'stacks'.
        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXstxm',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-end-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXstxm']

                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_type='NX_CHAR',
            nxp_minOccurs='1',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-definition-field',
            nxp_required='True',
            enumeration=['NXstxm'],
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-probe-field',
                    nxp_required='True',
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_minOccurs='1',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_monochromator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-monochromator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                class nxf_energy(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-monochromator-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                    nxp_name='energy',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-monochromator-energy-field',
                    nxp_required='True',
                    )
            nxg_monochromator = SubSection(sub_section=nxg_monochromator.m_def,repeats=True,
                nxp_type='NXmonochromator',
                nxp_name='monochromator',
                nxp_minOccurs='1',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-monochromator-group',
                nxp_required='True',
                )
            class nxg_DETECTOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_NUMBER',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
            nxg_DETECTOR = SubSection(sub_section=nxg_DETECTOR.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_minOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-detector-group',
                nxp_required='True',
                )
            class nxg_sample_x(NXobject):
                '''
Measurements of the sample position from the x-axis interferometer.
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-x-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-x-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-x-data-field',
                    nxp_required='True',
                    )
            nxg_sample_x = SubSection(sub_section=nxg_sample_x.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='sample_x',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-x-group',
                nxp_optional='True',
                )
            class nxg_sample_y(NXobject):
                '''
Measurements of the sample position from the y-axis interferometer.
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-y-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-y-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-y-data-field',
                    nxp_required='True',
                    )
            nxg_sample_y = SubSection(sub_section=nxg_sample_y.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='sample_y',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-y-group',
                nxp_optional='True',
                )
            class nxg_sample_z(NXobject):
                '''
Measurements of the sample position from the z-axis interferometer.
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-z-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-z-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-z-data-field',
                    nxp_required='True',
                    )
            nxg_sample_z = SubSection(sub_section=nxg_sample_z.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='sample_z',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-z-group',
                nxp_optional='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_minOccurs='1',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_rotation_angle(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-sample-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            class nxf_stxm_scan_type(NXobject):
                '''
Label for typical scan types as a convenience for humans.
                    Each label corresponds to a specific set of axes being scanned
                    to produce a data array of shape:                                  *
                    sample point spectrum: (photon_energy,)                 * sample line
                    spectrum: (photon_energy, sample_y/sample_x)                 * sample
                    image: (sample_y, sample_x)                 * sample image stack:
                    (photon_energy, sample_y, sample_x)                 * sample focus:
                    (zoneplate_z, sample_y/sample_x)                 * osa image: (osa_y,
                    osa_x)                 * osa focus: (zoneplate_z, osa_y/osa_x)
                    * detector image: (detector_y, detector_x)
                    The "generic scan" string is to be used when none of the
                    other choices are appropriate.                   Possible values:
                    ['sample point spectrum','sample line spectrum','sample image','sample
                    image stack','sample focus','osa image','osa focus','detector
                    image','generic scan']

                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-stxm-scan-type-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_stxm_scan_type = SubSection(sub_section=nxf_stxm_scan_type.m_def,repeats=True,
                nxp_name='stxm_scan_type',
                nxp_minOccurs='1',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-stxm-scan-type-field',
                nxp_required='True',
                enumeration=['sample point spectrum','sample line spectrum','sample image','sample image stack','sample focus','osa image','osa focus','detector image','generic scan'],
                )
            class nxf_data(NXobject):
                '''
Detectors that provide more than one value per scan point should be
                    summarised               to a single value per scan point for this
                    array in order to simplify plotting.                              Note
                    that 'Line scans' and focus type scans measure along one spatial
                    dimension               but are not restricted to being parallel to
                    the X or Y axes. Such scans                should therefore use a
                    single dimension for the positions along the spatial
                    line. The 'sample_x' and 'sample_y' fields should then contain lists
                    of the               x- and y-positions and should both have the
                    'axis' attribute pointing to the same dimension.
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_NUMBER',
                nxp_signal='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-data-field',
                nxp_required='True',
                )
            class nxf_energy(NXobject):
                '''
List of photon energies of the X-ray beam. If scanned through multiple
                    values,               then an 'axis' attribute will be required to
                    link the field to the appropriate data array dimension.
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-energy-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                nxp_name='energy',
                nxp_type='NX_FLOAT',
                nxp_minOccurs='1',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-energy-field',
                nxp_required='True',
                )
            class nxf_sample_y(NXobject):
                '''
List of Y positions on the sample. If scanned through multiple values,
                    then an 'axis' attribute will be required to link the field to the
                    appropriate data array dimension.
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-sample-y-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_sample_y = SubSection(sub_section=nxf_sample_y.m_def,repeats=True,
                nxp_name='sample_y',
                nxp_type='NX_FLOAT',
                nxp_minOccurs='1',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-sample-y-field',
                nxp_required='True',
                )
            class nxf_sample_x(NXobject):
                '''
List of X positions on the sample. If scanned through multiple values,
                    then an 'axis' attribute will be required to link the field to the
                    appropriate data array dimension.
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-sample-x-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_sample_x = SubSection(sub_section=nxf_sample_x.m_def,repeats=True,
                nxp_name='sample_x',
                nxp_type='NX_FLOAT',
                nxp_minOccurs='1',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-sample-x-field',
                nxp_required='True',
                )
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-group',
            nxp_required='True',
            )
        class nxg_control(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-control-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_data(NXobject):
                '''
Values to use to normalise for time-variations in photon flux.
                    Typically, the synchrotron storage ring               electron beam
                    current is used as a proxy for the X-ray beam intensity. Array must
                    have same shape as the               NXdata groups.
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-control-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-control-data-field',
                nxp_required='True',
                )
        nxg_control = SubSection(sub_section=nxg_control.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_name='control',
            nxp_minOccurs='0',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-control-group',
            nxp_optional='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-group',
        nxp_required='True',
        )

class NXiqproc(NXobject):
    '''
Application definition for any :math:`I(Q)` data.
        https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXiqproc',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_entry(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-entry-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_entry = SubSection(sub_section=nxa_entry.m_def,repeats=True,
            nxp_name='entry',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-entry-attribute',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-title-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXiqproc']

                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-definition-field',
            nxp_required='True',
            enumeration=['NXiqproc'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Name of the instrument from which this data was reduced.
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-name-field',
                nxp_required='True',
                )
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray','electron']

                        https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray','electron'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-sample-name-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-sample-group',
            nxp_required='True',
            )
        class nxg_reduction(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
            class nxf_program(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-program-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_program = SubSection(sub_section=nxf_program.m_def,repeats=True,
                nxp_name='program',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-program-field',
                nxp_required='True',
                )
            class nxf_version(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-version-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_version = SubSection(sub_section=nxf_version.m_def,repeats=True,
                nxp_name='version',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-version-field',
                nxp_required='True',
                )
            class nxg_input(NXobject):
                '''
Input parameters for the reduction program used
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-input-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
                class nxf_filenames(NXobject):
                    '''
Raw data files used to generate this I(Q)
                        https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-input-filenames-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_filenames = SubSection(sub_section=nxf_filenames.m_def,repeats=True,
                    nxp_name='filenames',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-input-filenames-field',
                    nxp_required='True',
                    )
            nxg_input = SubSection(sub_section=nxg_input.m_def,repeats=True,
                nxp_type='NXparameters',
                nxp_name='input',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-input-group',
                nxp_required='True',
                )
            class nxg_output(NXobject):
                '''
Eventual output parameters from the data reduction program used
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-output-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
            nxg_output = SubSection(sub_section=nxg_output.m_def,repeats=True,
                nxp_type='NXparameters',
                nxp_name='output',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-output-group',
                nxp_required='True',
                )
        nxg_reduction = SubSection(sub_section=nxg_reduction.m_def,repeats=True,
            nxp_type='NXprocess',
            nxp_name='reduction',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            class nxf_data(NXobject):
                '''
                    This is I(Q). The client has to analyse the dimensions
                    of I(Q). Often, multiple I(Q) for various environment
                    conditions are measured; that would be the first
                    dimension. Q can be multidimensional, this accounts for
                    the further dimensions in the data
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_signal='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-data-field',
                nxp_required='True',
                )
            class nxf_variable(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-variable-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_varied_variable(NXobject):
                    '''
The real name of the varied variable in the first dim of data,
                        temperature, P, MF etc...
                        https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-variable-varied-variable-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_varied_variable = SubSection(sub_section=nxa_varied_variable.m_def,repeats=True,
                    nxp_name='varied_variable',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-variable-varied-variable-attribute',
                    nxp_required='True',
                    )
            nxf_variable = SubSection(sub_section=nxf_variable.m_def,repeats=True,
                nxp_name='variable',
                nxp_type='NX_NUMBER',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-variable-field',
                nxp_required='True',
                )
            class nxf_qx(NXobject):
                '''
Values for the first dimension of Q
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-qx-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_qx = SubSection(sub_section=nxf_qx.m_def,repeats=True,
                nxp_name='qx',
                nxp_type='NX_NUMBER',
                nxp_axis='2',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-qx-field',
                nxp_required='True',
                )
            class nxf_qy(NXobject):
                '''
Values for the second dimension of Q
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-qy-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_qy = SubSection(sub_section=nxf_qy.m_def,repeats=True,
                nxp_name='qy',
                nxp_type='NX_NUMBER',
                nxp_axis='3',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-qy-field',
                nxp_required='True',
                )
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-group',
        nxp_required='True',
        )

class NXcanSAS(NXobject):
    '''
        Implementation of the canSAS standard to store reduced small-angle scattering data
        of any dimension.                  .. index:: canSAS                  For more
        details, see:                  * http://www.cansas.org/         *
        http://www.cansas.org/formats/canSAS1d/1.1/doc/         *
        http://cansas-org.github.io/canSAS2012/         *
        https://github.com/canSAS-org/NXcanSAS_examples                  The minimum
        requirements for *reduced* small-angle scattering data          as described by
        canSAS are summarized in the following figure:                  ..
        _canSAS_2012_minimum:                  .. figure:: canSAS/2012-minimum.png
        :width: 60%                        The minimum requirements for *reduced*
        small-angle scattering data.            (:download:`full image
        <canSAS/2012-minimum.png>`)            See :ref:`below <NXcanSAS_minimum>` for the
        minimum required             information for a NeXus data file            written
        to the NXcanSAS specification.                  .. rubric::  Implementation of
        canSAS standard in NeXus                  This application definition is an
        implementation of the canSAS         standard for storing both one-dimensional and
        multi-dimensional          *reduced* small-angle scattering data.

        * NXcanSAS is for reduced SAS data and metadata to be stored together in one file.
        * *Reduced* SAS data consists of :math:`I(\\vec{Q})` or :math:`I(|\\vec{Q}|)`
        * External file links are not to be used for the reduced data.          * A good
        practice/practise is, at least, to include a reference to how the data was
        acquired and processed.  Yet this is not a requirement.         * There is no need
        for NXcanSAS to refer to any raw data.

        The canSAS data format has a structure similar to NeXus, not identical.         To
        allow canSAS data to be expressed in NeXus, yet identifiable         by the canSAS
        standard, an additional group attribute ``canSAS_class``         was introduced.
        Here is the mapping of some common groups.                  ===============
        ============  ==========================         group (*)        NX_class
        canSAS_class         ===============  ============  ==========================
        sasentry         NXentry       SASentry         sasdata          NXdata
        SASdata         sasdetector      NXdetector    SASdetector         sasinstrument
        NXinstrument  SASinstrument         sasnote          NXnote        SASnote
        sasprocess       NXprocess     SASprocess         sasprocessnote   NXcollection
        SASprocessnote         sastransmission  NXdata        SAStransmission_spectrum
        sassample        NXsample      SASsample         sassource        NXsource
        SASsource         ===============  ============  ==========================
        (*) The name of each group is a suggestion,         not a fixed requirement and is
        chosen as fits each data file.           See the section on defining
        :ref:`NXDL group and field names <RegExpName>`.                  Refer to the
        NeXus Coordinate System drawing (:ref:`Design-CoordinateSystem`)         for
        choice and direction of :math:`x`, :math:`y`, and :math:`z` axes.
        .. _NXcanSAS_minimum:                  .. rubric:: The minimum required
        information for a NeXus data file            written to the NXcanSAS
        specification.                  .. literalinclude:: canSAS/minimum-required.txt
        :tab-width: 4            :linenos:            :language: text

        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXcanSAS',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            .. index:: NXcanSAS (applications); SASentry              Place the canSAS
            ``SASentry`` group as a child of a NeXus ``NXentry`` group       (when data
            from multiple techniques are being stored)       or as a replacement for the
            ``NXentry`` group.

            Note: It is required for all numerical objects to provide       a *units*
            attribute that describes the engineering units.        Use the Unidata UDunits
            [#]_ specification        as this is compatible with various community
            standards.              .. [#] The UDunits specification also includes
            instructions for derived units.
            https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_default(NXobject):
            '''
                .. index:: plotting
                Declares which :ref:`NXdata` group                          contains the
                data to be shown by default.                         It is needed to
                resolve ambiguity when more than one :ref:`NXdata` group exists.
                The value is the name of the default :ref:`NXdata` group.
                Usually, this will be the name of the first *SASdata* group.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-default-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
            nxp_name='default',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-default-attribute',
            nxp_optional='True',
            )
        class nxa_canSAS_class(NXobject):
            '''
                Official canSAS group: **SASentry**           Obligatory value:
                ['SASentry']

                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-cansas-class-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
            nxp_name='canSAS_class',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-cansas-class-attribute',
            nxp_required='True',
            enumeration=['SASentry'],
            )
        class nxa_version(NXobject):
            '''
                Describes the version of the canSAS standard used to write this data.
                This must be a text (not numerical) representation. Such as::
                @version="1.1"

                Obligatory value:    ['1.1']

                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-version-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
            nxp_name='version',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-version-attribute',
            nxp_required='True',
            enumeration=['1.1'],
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this subentry conforms.  Obligatory
                value:    ['NXcanSAS']

                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-definition-field',
            nxp_required='True',
            enumeration=['NXcanSAS'],
            )
        class nxf_title(NXobject):
            '''
                Title of this *SASentry*.           Make it so that you can recognize the
                data by its title.         Could be the name of the sample,         the
                name for the measured data, or something else representative.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_minOccurs='1',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-title-field',
            nxp_required='True',
            )
        class nxf_run(NXobject):
            '''
                Run identification for this *SASentry*.          For many facilities, this
                is an integer, such as en experiment number.          Use multiple
                instances of ``run`` as needed, keeping         in mind that HDF5 requires
                unique names for all entities         in a group.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-run-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            class nxa_name(NXobject):
                '''
                    Optional string attribute to identify this particular *run*.
                    Could use this to associate (correlate) multiple *SASdata* elements
                    with *run* elements.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-run-name-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_name = SubSection(sub_section=nxa_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-run-name-attribute',
                nxp_optional='True',
                )
        nxf_run = SubSection(sub_section=nxf_run.m_def,repeats=True,
            nxp_name='run',
            nxp_minOccurs='1',
            nxp_maxOccurs='unbounded',
            nxp_nameType='any',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-run-field',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                A *SASData* group contains a single reduced small-angle scattering data
                set          that can be represented as :math:`I(\\vec{Q})` or
                :math:`I(|\\vec{Q}|)`.                  *Q* can be either a vector
                (:math:`\\vec{Q}`) or a vector magnitude (:math:`|\\vec{Q}|`)
                The name of each *SASdata* group must be unique within a SASentry group.
                Suggest using names such as ``sasdata01``.                  NOTE:  For the
                first *SASdata* group, be sure to write the chosen name          into the
                `SASentry/@default` attribute, as in::
                SASentry/@default="sasdata01"                  A *SASdata* group has
                several attributes:                  * I_axes         * Q_indices
                * Mask_indices                  To indicate the dependency relationships
                of other varied parameters,          use attributes similar to
                ``@Mask_indices`` (such as ``@Temperature_indices``         or
                ``@Pressure_indices``).
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            class nxa_canSAS_class(NXobject):
                '''
Official canSAS group: :index:`NXcanSAS (applications); SASdata`
                    Obligatory value:    ['SASdata']

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-cansas-class-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                nxp_name='canSAS_class',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-cansas-class-attribute',
                nxp_required='True',
                enumeration=['SASdata'],
                )
            class nxa_signal(NXobject):
                '''
                    Name of the default data field.           Obligatory value:    ['I']

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-signal-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
                nxp_name='signal',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-signal-attribute',
                nxp_required='True',
                enumeration=['I'],
                )
            class nxa_I_axes(NXobject):
                '''
                    String array that defines the independent data fields used in
                    the default plot for all of the dimensions of the *signal* field
                    (the *signal* field is the field in this group that is named by
                    the ``signal`` attribute of this group).            One entry is
                    provided for every dimension of the ``I`` data object.
                    Such as::                        @I_axes="Temperature", "Time",
                    "Pressure", "Q", "Q"                      Since there are five items
                    in the list, the intensity field of this example           ``I`` must
                    be a five-dimensional array (rank=5).
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-axes-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_I_axes = SubSection(sub_section=nxa_I_axes.m_def,repeats=True,
                nxp_name='I_axes',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-axes-attribute',
                nxp_required='True',
                )
            class nxa_Q_indices(NXobject):
                '''
                    Integer or integer array that describes which indices            (of
                    the :math:`I` data object) are used to            reference the ``Q``
                    data object. The items in this array            use zero-based
                    indexing.  Such as::                          @Q_indices=1,3,4
                    which indicates that ``Q`` requires three indices           from the
                    :math:`I` data object: one for time and           two for Q position.
                    Thus, in this example, the           ``Q`` data is time-dependent:
                    :math:`\\vec{Q}(t)`.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-indices-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxa_Q_indices = SubSection(sub_section=nxa_Q_indices.m_def,repeats=True,
                nxp_name='Q_indices',
                nxp_type='NX_INT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-indices-attribute',
                nxp_required='True',
                )
            class nxa_mask(NXobject):
                '''
                    Name of the data mask field.                      .. see:
                    https://github.com/nexusformat/definitions/issues/533
                    The data *mask* must have the same shape as the *data* field.
                    Positions in the mask correspond to positions in the *data* field.
                    The value of the mask field may be either a boolean array
                    where ``false`` means *no mask* and ``true`` means *mask*           or
                    a more descriptive array as as defined in :ref:`NXdetector`.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-mask-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_mask = SubSection(sub_section=nxa_mask.m_def,repeats=True,
                nxp_name='mask',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-mask-attribute',
                nxp_required='True',
                )
            class nxa_Mask_indices(NXobject):
                '''
                    Integer or integer array that describes which indices           (of
                    the :math:`I` data object) are used to            reference the
                    ``Mask`` data object.  The items in this           array use
                    zero-based indexing.  Such as::
                    @Mask_indices=3,4                      which indicates that Q requires
                    two indices           from the :math:`I` data object for Q position.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-mask-indices-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_Mask_indices = SubSection(sub_section=nxa_Mask_indices.m_def,repeats=True,
                nxp_name='Mask_indices',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-mask-indices-attribute',
                nxp_optional='True',
                )
            class nxa_timestamp(NXobject):
                '''
                    ISO-8601 time [#iso8601]_
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-timestamp-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxa_timestamp = SubSection(sub_section=nxa_timestamp.m_def,repeats=True,
                nxp_name='timestamp',
                nxp_type='NX_DATE_TIME',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-timestamp-attribute',
                nxp_optional='True',
                )
            class nxf_Q(NXobject):
                '''
                    .. index:: NXcanSAS (applications); Q
                    Array of :math:`Q` data to accompany :math:`I`.
                    .. figure:: canSAS/Q-geometry.jpg                 :width: 60%
                    The :math:`\\vec{Q}` geometry.                 (:download:`full image
                    <canSAS/Q-geometry.jpg>`)                      :math:`Q` may be
                    represented as either           the three-dimensional scattering
                    vector :math:`\\vec{Q}`           or the magnitude of the scattering
                    vector, :math:`|\\vec{Q}|`.                      .. math::  |\\vec{Q}| =
                    (4\\pi/\\lambda) sin(\\theta)                       When we write
                    :math:`Q`, we may refer to either or both of
                    :math:`|\\vec{Q}|`            or :math:`\\vec{Q}`,  depending on the
                    context.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_units(NXobject):
                    '''
                        Engineering units to use when expressing             :math:`Q` and
                        related terms.                          Data expressed in other
                        units will generate             a warning from validation software
                        and may not              be processed by some analysis software
                        packages.             Possible values:
                        ['1/m','1/nm','1/angstrom']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-units-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                    nxp_name='units',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-units-attribute',
                    nxp_required='True',
                    enumeration=['1/m','1/nm','1/angstrom'],
                    )
                class nxa_uncertainties(NXobject):
                    '''
                        (optional: for numerical arrays)                           Names
                        the dataset (in this SASdata group) that provides the
                        uncertainty to be used for data analysis.               The name
                        of the dataset containing the :math:`Q` uncertainty             is
                        flexible.  The name must be unique in the *SASdata* group.
                        .. comment                see:
                        https://github.com/canSAS-org/canSAS2012/issues/7
                        Such as::
                        @uncertainties="Q_uncertainties"                          The
                        *uncertainties* field will have the same *shape* (dimensions)
                        as the Q field.                          These values are the
                        estimates of uncertainty of each Q. By default,              this
                        will be interpreted to be the estimated standard deviation.
                        In special cases, when a standard deviation cannot possibly be
                        used,              its value can specify another measure of
                        distribution width.                          There may also be a
                        subdirectory (optional) with constituent              components.

                        .. note:: To report distribution in reported :math:`Q` values,
                        use the ``@resolutions`` attribute.  It is possible for both
                        ``@resolutions`` and ``uncertainties`` to be reported.

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-uncertainties-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_uncertainties = SubSection(sub_section=nxa_uncertainties.m_def,repeats=True,
                    nxp_name='uncertainties',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-uncertainties-attribute',
                    nxp_optional='True',
                    )
                class nxa_resolutions(NXobject):
                    '''
                        .. index:: NXcanSAS (applications); resolutions
                        (optional: for numerical arrays)                           Names
                        the dataset (in this SASdata group) containing the :math:`Q`
                        resolution.             The name of the dataset containing the
                        :math:`Q` resolution             is flexible.  The name must be
                        unique in the *SASdata* group.                          .. comment
                        see: https://github.com/canSAS-org/canSAS2012/issues/7
                        The *resolutions* field will have the same *shape* (dimensions)
                        as the Q field.                          Generally, this is the
                        principal resolution of each :math:`Q`.             Names the data
                        object (in this SASdata group) that provides the
                        :math:`Q` resolution to be used for data analysis.  Such as::
                        @resolutions="Qdev"                          To specify
                        two-dimensional resolution for slit-smearing geometry,
                        such as (*dQw*, *dQl*), use a string array, such as::
                        @resolutions="dQw", "dQl"                          There may also
                        be a subdirectory (optional) with constituent
                        components.                          This pattern will demonstrate
                        how to introduce further as-yet              unanticipated terms
                        related to the data.                          .. comment
                        see:
                        https://github.com/nexusformat/definitions/issues/492#issuecomment-262813907
                        By default, the values of the resolutions data object are assumed
                        to be             one standard deviation of any function used to
                        approximate the              resolution function. This equates to
                        the width of the gaussian              distribution if a Gaussian
                        is chosen.  See the ``@resolutions_description``
                        attribute.                          .. note:: To report
                        uncertainty in reported :math:`Q` values,                 use the
                        ``@uncertainties`` attribute.  It is possible for both
                        ``@resolutions`` and ``uncertainties`` to be reported.
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-resolutions-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_resolutions = SubSection(sub_section=nxa_resolutions.m_def,repeats=True,
                    nxp_name='resolutions',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-resolutions-attribute',
                    nxp_optional='True',
                    )
                class nxa_resolutions_description(NXobject):
                    '''
                        (optional)              Generally, this describes the :math:`Q`
                        ``@resolutions`` data object.             By default, the value is
                        assumed to be "Gaussian".  These are             suggestions:
                        * Gaussian             * Lorentzian             * Square :
                        note that the full width of the square would be ~2.9 times
                        the standard deviation specified in the vector             *
                        Triangular             * Sawtooth-outward : vertical edge pointing
                        to larger Q             * Sawtooth-inward vertical edge pointing
                        to smaller Q             * Bin : range of values contributing
                        (for example, when 2-D detector data have been reduced
                        to a 1-D :math:`I(|Q|)` dataset)                          For
                        other meanings, it may be necessary to provide further details
                        such as the function used to assess the resolution.             In
                        such cases, use additional datasets or a :ref:`NXnote` subgroup
                        to include that detail.
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-resolutions-description-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_resolutions_description = SubSection(sub_section=nxa_resolutions_description.m_def,repeats=True,
                    nxp_name='resolutions_description',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-resolutions-description-attribute',
                    nxp_optional='True',
                    )
            nxf_Q = SubSection(sub_section=nxf_Q.m_def,repeats=True,
                nxp_name='Q',
                nxp_type='NX_NUMBER',
                nxp_units='NX_PER_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-field',
                nxp_required='True',
                )
            class nxf_I(NXobject):
                '''
                    .. index:: NXcanSAS (applications); I
                    Array of intensity (:math:`I`) data.                      The
                    intensity may be represented in one of these forms:
                    **absolute units**: :math:`d\\Sigma/d\\Omega(Q)`           differential
                    cross-section           per unit volume per unit solid angle (such as:
                    1/cm/sr or 1/m/sr)                      **absolute units**:
                    :math:`d\\sigma/d\\Omega(Q)`           differential cross-section
                    per unit atom per unit solid angle (such as: cm^2 or m^2)
                    **arbitrary units**: :math:`I(Q)`           usually a ratio of two
                    detectors            but units are meaningless (such as: a.u. or
                    counts)                      This presents a few problems
                    for analysis software to sort out when reading the data.
                    Fortunately, it is possible to analyze the *units* to determine which
                    type of           intensity is being reported and make choices at the
                    time the file is read. But this is           an area for consideration
                    and possible improvement.                      One problem arises with
                    software that automatically converts data into some canonical
                    units used by that software. The software should not convert units
                    between these different           types of intensity indiscriminately.
                    A second problem is that when arbitrary units are used, then the set
                    of possible           analytical results is restricted.  With such
                    units, no meaningful volume fraction            or number density can
                    be determined directly from :math:`I(Q)`.                      In some
                    cases, it is possible to apply a factor to convert the arbitrary
                    units to an absolute scale.  This should be considered as a
                    possibility            of the analysis process.
                    Where this documentation says *typical units*, it is possible that
                    small-angle           data may be presented in other units and still
                    be consistent with NeXus.           See the :ref:`design-units`
                    section.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_units(NXobject):
                    '''
                        Engineering units to use when expressing             :math:`I` and
                        intensity-related terms.                          Data expressed
                        in other units (or missing a ``@units`` attribute)
                        will be treated as ``arbitrary`` by some software packages.
                        For software using the UDUNITS-2 library, ``arbitrary`` will be
                        changed to ``unknown`` for handling with that library.
                        Possible values:    ['1/m','1/cm','m2/g','cm2/g','arbitrary']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-units-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                    nxp_name='units',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-units-attribute',
                    nxp_required='True',
                    enumeration=['1/m','1/cm','m2/g','cm2/g','arbitrary'],
                    )
                class nxa_uncertainties(NXobject):
                    '''
                        (optional: for numerical arrays)                           Names
                        the dataset (in this SASdata group) that provides the
                        uncertainty of :math:`I` to be used for data analysis.
                        The name of the dataset containing the :math:`I` uncertainty
                        is flexible.  The name must be unique in the *SASdata* group.
                        .. comment                see:
                        https://github.com/canSAS-org/canSAS2012/issues/7
                        Generally, this is the estimate of the uncertainty of each
                        :math:`I`.             Typically the estimated standard deviation.
                        *Idev* is the canonical name from the 1D standard.
                        The NXcanSAS standard allows for the name to be described using
                        this attribute.             Such as::
                        @uncertainties="Idev"
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-uncertainties-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_uncertainties = SubSection(sub_section=nxa_uncertainties.m_def,repeats=True,
                    nxp_name='uncertainties',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-uncertainties-attribute',
                    nxp_optional='True',
                    )
                class nxa_scaling_factor(NXobject):
                    '''
                        (optional)              Names the field (a.k.a. dataset) that
                        contains a factor             to multiply ``I``.  By default, this
                        value is unity.             Should an uncertainty be associated
                        with the scaling factor             field, the field containing
                        that uncertainty would be              designated via the
                        ``uncertainties`` attribute.               Such as::
                        I : NX_NUMBER                   @uncertainties="Idev" : NX_CHAR
                        @scaling_factor="I_scaling" : NX_CHAR               Idev :
                        NX_NUMBER               I_scaling : NX_NUMBER
                        @uncertainties="I_scaling_dev" : NX_CHAR
                        I_scaling_dev : NX_NUMBER                          The exact names
                        for ``I_scaling`` and ``I_scaling_dev`` are not
                        defined by NXcanSAS.  The user has the flexibility to use names
                        different than those shown in this example.
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-scaling-factor-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_scaling_factor = SubSection(sub_section=nxa_scaling_factor.m_def,repeats=True,
                    nxp_name='scaling_factor',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-scaling-factor-attribute',
                    nxp_optional='True',
                    )
            nxf_I = SubSection(sub_section=nxf_I.m_def,repeats=True,
                nxp_name='I',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-field',
                nxp_required='True',
                )
            class nxf_Idev(NXobject):
                '''
                    .. index:: NXcanSAS (applications); Idev
                    Estimated **uncertainty** (usually standard deviation)           in
                    :math:`I`.  Must have the same units as :math:`I`.

                    When present, the name of this field is also            recorded in
                    the *uncertainties* attribute of *I*, as in::
                    I/@uncertainties="Idev"

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-idev-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_units(NXobject):
                    '''
                        Engineering units to use when expressing             :math:`I` and
                        intensity-related terms.                          Data expressed
                        in other units (or missing a ``@units`` attribute)
                        will generate a warning from any validation process
                        and will be treated as ``arbitrary`` by some analysis software
                        packages.                          For software using the
                        UDUNITS-2 library, ``arbitrary`` will be             changed to
                        ``unknown`` for handling with that library.             Possible
                        values:    ['1/m','1/cm','m2/g','cm2/g','arbitrary']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-idev-units-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                    nxp_name='units',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-idev-units-attribute',
                    nxp_required='True',
                    enumeration=['1/m','1/cm','m2/g','cm2/g','arbitrary'],
                    )
            nxf_Idev = SubSection(sub_section=nxf_Idev.m_def,repeats=True,
                nxp_name='Idev',
                nxp_type='NX_NUMBER',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-idev-field',
                nxp_optional='True',
                )
            class nxf_Qdev(NXobject):
                '''
                    .. index:: NXcanSAS (applications); Qdev
                    Estimated :math:`Q` **resolution** (usually standard deviation).
                    Must have the same units as :math:`Q`.                      When
                    present, the name of this field is also            recorded in the
                    *resolutions* attribute of *Q*,            as in::
                    Q/@resolutions="Qdev"

                    or::

                    Q/@resolutions="dQw", "dQl"

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qdev-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_units(NXobject):
                    '''
                        Engineering units to use when expressing             :math:`Q` and
                        related terms.                          Data expressed in other
                        units may not be processed by some              software packages.
                        Possible values:    ['1/m','1/nm','1/angstrom']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qdev-units-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                    nxp_name='units',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qdev-units-attribute',
                    nxp_required='True',
                    enumeration=['1/m','1/nm','1/angstrom'],
                    )
            nxf_Qdev = SubSection(sub_section=nxf_Qdev.m_def,repeats=True,
                nxp_name='Qdev',
                nxp_type='NX_NUMBER',
                nxp_units='NX_PER_LENGTH',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qdev-field',
                nxp_optional='True',
                )
            class nxf_dQw(NXobject):
                '''
                    .. index:: NXcanSAS (applications); dQw                      :math:`Q`
                    **resolution** along the axis of scanning            (the
                    high-resolution *slit width* direction).            Useful for
                    defining resolution data from            slit-smearing instruments
                    such as Bonse-Hart geometry.           Must have the same units as
                    :math:`Q`.                      When present, the name of this field
                    is also            recorded in the *resolutions* attribute of *Q*,
                    as in::                          Q/@resolutions="dQw", "dQl"
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dqw-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_units(NXobject):
                    '''
                        Engineering units to use when expressing             :math:`Q` and
                        related terms.                          Data expressed in other
                        units may not be processed by some              software packages.
                        Possible values:    ['1/m','1/nm','1/angstrom']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dqw-units-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                    nxp_name='units',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dqw-units-attribute',
                    nxp_required='True',
                    enumeration=['1/m','1/nm','1/angstrom'],
                    )
            nxf_dQw = SubSection(sub_section=nxf_dQw.m_def,repeats=True,
                nxp_name='dQw',
                nxp_type='NX_NUMBER',
                nxp_units='NX_PER_LENGTH',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dqw-field',
                nxp_optional='True',
                )
            class nxf_dQl(NXobject):
                '''
                    .. index:: NXcanSAS (applications); dQl                      :math:`Q`
                    **resolution** perpendicular to the axis of scanning            (the
                    low-resolution *slit length* direction).            Useful for
                    defining resolution data from            slit-smearing instruments
                    such as Bonse-Hart geometry.           Must have the same units as
                    :math:`Q`.                      When present, the name of this field
                    is also            recorded in the *resolutions* attribute of *Q*,
                    as in::                          Q/@resolutions="dQw", "dQl"
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dql-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_units(NXobject):
                    '''
                        Engineering units to use when expressing             :math:`Q` and
                        related terms.                          Data expressed in other
                        units may not be processed by some              software packages.
                        Possible values:    ['1/m','1/nm','1/angstrom']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dql-units-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                    nxp_name='units',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dql-units-attribute',
                    nxp_required='True',
                    enumeration=['1/m','1/nm','1/angstrom'],
                    )
            nxf_dQl = SubSection(sub_section=nxf_dQl.m_def,repeats=True,
                nxp_name='dQl',
                nxp_type='NX_NUMBER',
                nxp_units='NX_PER_LENGTH',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dql-field',
                nxp_optional='True',
                )
            class nxf_Qmean(NXobject):
                '''
                    Mean value of :math:`Q` for this data point.            Useful when
                    describing data that has been            binned from higher-resolution
                    data.                       It is expected that ``Q`` is provided
                    and that both ``Q`` and ``Qmean`` will have the same units.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qmean-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_units(NXobject):
                    '''
                        Engineering units to use when expressing             :math:`Q` and
                        related terms.                          Data expressed in other
                        units may not be processed by some              software packages.
                        Possible values:    ['1/m','1/nm','1/angstrom']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qmean-units-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                    nxp_name='units',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qmean-units-attribute',
                    nxp_required='True',
                    enumeration=['1/m','1/nm','1/angstrom'],
                    )
            nxf_Qmean = SubSection(sub_section=nxf_Qmean.m_def,repeats=True,
                nxp_name='Qmean',
                nxp_minOccurs='0',
                nxp_units='NX_PER_LENGTH',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qmean-field',
                nxp_optional='True',
                )
            class nxf_ShadowFactor(NXobject):
                '''
                    A numerical factor applied to pixels affected by the beam stop
                    penumbra.            Used in data files from NIST/NCNR instruments.
                    See:  J.G. Barker and J.S. Pedersen (1995) *J. Appl. Cryst.* **28**,
                    105-114.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-shadowfactor-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_ShadowFactor = SubSection(sub_section=nxf_ShadowFactor.m_def,repeats=True,
                nxp_name='ShadowFactor',
                nxp_minOccurs='0',
                nxp_units='NX_DIMENSIONLESS',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-shadowfactor-field',
                nxp_optional='True',
                )
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-group',
            nxp_required='True',
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                Description of the small-angle scattering instrument.
                Consider, carefully, the relevance to the SAS data analysis process
                when adding subgroups in this **NXinstrument** group.  Additional
                information         can be added but will likely be ignored by
                standardized data anlysis processes.                  The NeXus
                :ref:`NXbeam` base class may be added as a subgroup of this
                **NXinstrument**         group *or* as a subgroup of the **NXsample**
                group to describe properties of the beam at any          point downstream
                from the source.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxa_canSAS_class(NXobject):
                '''
Official canSAS group: :index:`NXcanSAS (applications); SASinstrument`
                    Obligatory value:    ['SASinstrument']

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-cansas-class-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                nxp_name='canSAS_class',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-cansas-class-attribute',
                nxp_required='True',
                enumeration=['SASinstrument'],
                )
            class nxg_APERTURE(NXobject):
                '''
                    :ref:`NXaperture` is generic and limits the variation in data files.
                    Possible NeXus base class alternatives are: :ref:`NXpinhole` or
                    :ref:`NXslit`.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXaperture.m_def,repeats=True)
                class nxa_canSAS_class(NXobject):
                    '''
Official canSAS group: :index:`NXcanSAS (applications);
                        SASaperture`  Obligatory value:    ['SASaperture']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-cansas-class-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                    nxp_name='canSAS_class',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-cansas-class-attribute',
                    nxp_required='True',
                    enumeration=['SASaperture'],
                    )
                class nxf_shape(NXobject):
                    '''
                        describe the type of aperture (pinhole, 4-blade slit, Soller slit,
                        ...)
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-shape-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_shape = SubSection(sub_section=nxf_shape.m_def,repeats=True,
                    nxp_name='shape',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-shape-field',
                    nxp_required='True',
                    )
                class nxf_x_gap(NXobject):
                    '''
opening along the :math:`x` axis
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-x-gap-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_x_gap = SubSection(sub_section=nxf_x_gap.m_def,repeats=True,
                    nxp_name='x_gap',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-x-gap-field',
                    nxp_optional='True',
                    )
                class nxf_y_gap(NXobject):
                    '''
opening along the :math:`y` axis
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-y-gap-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_y_gap = SubSection(sub_section=nxf_y_gap.m_def,repeats=True,
                    nxp_name='y_gap',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-y-gap-field',
                    nxp_optional='True',
                    )
            nxg_APERTURE = SubSection(sub_section=nxg_APERTURE.m_def,repeats=True,
                nxp_type='NXaperture',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-group',
                nxp_optional='True',
                )
            class nxg_COLLIMATOR(NXobject):
                '''
                    Description of a collimating element (defines the divergence of the
                    beam) in the instrument.                      To document a slit,
                    pinhole, or the beam, refer to the            documentation of the
                    ``NXinstrument`` group above.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXcollimator.m_def,repeats=True)
                class nxa_canSAS_class(NXobject):
                    '''
Official canSAS group: :index:`NXcanSAS (applications);
                        SAScollimation`  Obligatory value:    ['SAScollimation']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-cansas-class-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                    nxp_name='canSAS_class',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-cansas-class-attribute',
                    nxp_required='True',
                    enumeration=['SAScollimation'],
                    )
                class nxf_length(NXobject):
                    '''
Amount/length of collimation inserted (as on a SANS instrument)
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-length-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_length = SubSection(sub_section=nxf_length.m_def,repeats=True,
                    nxp_name='length',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-length-field',
                    nxp_optional='True',
                    )
                class nxf_distance(NXobject):
                    '''
Distance from this collimation element to the sample
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-distance-field',
                    nxp_optional='True',
                    )
            nxg_COLLIMATOR = SubSection(sub_section=nxg_COLLIMATOR.m_def,repeats=True,
                nxp_type='NXcollimator',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-group',
                nxp_optional='True',
                )
            class nxg_DETECTOR(NXobject):
                '''
                    Description of a detector in the instrument.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxa_canSAS_class(NXobject):
                    '''
Official canSAS group: :index:`NXcanSAS (applications);
                        SASdetector`  Obligatory value:    ['SASdetector']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-cansas-class-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                    nxp_name='canSAS_class',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-cansas-class-attribute',
                    nxp_required='True',
                    enumeration=['SASdetector'],
                    )
                class nxf_name(NXobject):
                    '''
Identifies the name of this detector
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-name-field',
                    nxp_required='True',
                    )
                class nxf_SDD(NXobject):
                    '''
                        Distance between sample and detector.
                        Note: In NXdetector, the ``distance`` field records the
                        distance to the previous component ... most often the sample.
                        This use is the same as ``SDD`` for most SAS
                        instruments but not all.  For example, Bonse-Hart cameras
                        have one or more crystals between the sample and detector.
                        We define here the field ``SDD`` to document without
                        ambiguity the distance between sample and detector.
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-sdd-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_SDD = SubSection(sub_section=nxf_SDD.m_def,repeats=True,
                    nxp_name='SDD',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-sdd-field',
                    nxp_optional='True',
                    )
                class nxf_slit_length(NXobject):
                    '''
                        Slit length of the instrument for this detector,
                        expressed in the same units as :math:`Q`.
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-slit-length-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_slit_length = SubSection(sub_section=nxf_slit_length.m_def,repeats=True,
                    nxp_name='slit_length',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_PER_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-slit-length-field',
                    nxp_optional='True',
                    )
                class nxf_x_position(NXobject):
                    '''
Location of the detector in :math:`x`
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-x-position-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_x_position = SubSection(sub_section=nxf_x_position.m_def,repeats=True,
                    nxp_name='x_position',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-x-position-field',
                    nxp_optional='True',
                    )
                class nxf_y_position(NXobject):
                    '''
Location of the detector in :math:`y`
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-y-position-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_y_position = SubSection(sub_section=nxf_y_position.m_def,repeats=True,
                    nxp_name='y_position',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-y-position-field',
                    nxp_optional='True',
                    )
                class nxf_roll(NXobject):
                    '''
Rotation of the detector about the :math:`z` axis (roll)
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-roll-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_roll = SubSection(sub_section=nxf_roll.m_def,repeats=True,
                    nxp_name='roll',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-roll-field',
                    nxp_optional='True',
                    )
                class nxf_pitch(NXobject):
                    '''
Rotation of the detector about the :math:`x` axis (roll)
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-pitch-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_pitch = SubSection(sub_section=nxf_pitch.m_def,repeats=True,
                    nxp_name='pitch',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-pitch-field',
                    nxp_optional='True',
                    )
                class nxf_yaw(NXobject):
                    '''
Rotation of the detector about the :math:`y` axis (yaw)
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-yaw-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_yaw = SubSection(sub_section=nxf_yaw.m_def,repeats=True,
                    nxp_name='yaw',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-yaw-field',
                    nxp_optional='True',
                    )
                class nxf_beam_center_x(NXobject):
                    '''
                        Position of the beam center on the detector.
                        This is the x position where the direct beam would hit the
                        detector plane.             This is a length and can be outside of
                        the actual             detector.  The length can be in physical
                        units or pixels             as documented by the units attribute.
                        The value can be any             real number (positive, zero, or
                        negative).
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-beam-center-x-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_beam_center_x = SubSection(sub_section=nxf_beam_center_x.m_def,repeats=True,
                    nxp_name='beam_center_x',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-beam-center-x-field',
                    nxp_optional='True',
                    )
                class nxf_beam_center_y(NXobject):
                    '''
                        Position of the beam center on the detector.
                        This is the y position where the direct beam would hit the
                        detector plane.             This is a length and can be outside of
                        the actual             detector.  The length can be in physical
                        units or pixels             as documented by the units attribute.
                        The value can be any             real number (positive, zero, or
                        negative).
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-beam-center-y-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_beam_center_y = SubSection(sub_section=nxf_beam_center_y.m_def,repeats=True,
                    nxp_name='beam_center_y',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-beam-center-y-field',
                    nxp_optional='True',
                    )
                class nxf_x_pixel_size(NXobject):
                    '''
Size of each detector pixel. If it is scalar all pixels are the
                        same size
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-x-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_size = SubSection(sub_section=nxf_x_pixel_size.m_def,repeats=True,
                    nxp_name='x_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-x-pixel-size-field',
                    nxp_optional='True',
                    )
                class nxf_y_pixel_size(NXobject):
                    '''
Size of each detector pixel. If it is scalar all pixels are the
                        same size
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-y-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_pixel_size = SubSection(sub_section=nxf_y_pixel_size.m_def,repeats=True,
                    nxp_name='y_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-y-pixel-size-field',
                    nxp_optional='True',
                    )
            nxg_DETECTOR = SubSection(sub_section=nxg_DETECTOR.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-group',
                nxp_optional='True',
                )
            class nxg_SOURCE(NXobject):
                '''
                    Description of the radiation source.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxa_canSAS_class(NXobject):
                    '''
Official canSAS group: :index:`NXcanSAS (applications); SASsource`
                        Obligatory value:    ['SASsource']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-cansas-class-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                    nxp_name='canSAS_class',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-cansas-class-attribute',
                    nxp_required='True',
                    enumeration=['SASsource'],
                    )
                class nxf_radiation(NXobject):
                    '''
                        Name of the radiation used.             Note that this is **not**
                        the name of the facility!

                        This field contains a value from either the              ``probe``
                        or ``type`` fields in :ref:`NXsource`. Thus,              it is
                        redundant with existing NeXus structure.             Possible
                        values:    ['Spallation Neutron Source','Pulsed Reactor Neutron
                        Source','Reactor Neutron Source','Synchrotron X-ray
                        Source','Pulsed Muon Source','Rotating Anode X-ray','Fixed Tube
                        X-ray','UV Laser','Free-Electron Laser','Optical Laser','Ion
                        Source','UV Plasma
                        Source','neutron','x-ray','muon','electron','ultraviolet','visible
                        light','positron','proton']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-radiation-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_radiation = SubSection(sub_section=nxf_radiation.m_def,repeats=True,
                    nxp_name='radiation',
                    nxp_maxOccurs='1',
                    deprecated=''' DEPRECATED:
                    Use either (or both) ``probe`` or ``type`` fields from ``NXsource`` (issue #765)
                    ''',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-radiation-field',
                    nxp_required='True',
                    enumeration=['Spallation Neutron Source','Pulsed Reactor Neutron Source','Reactor Neutron Source','Synchrotron X-ray Source','Pulsed Muon Source','Rotating Anode X-ray','Fixed Tube X-ray','UV Laser','Free-Electron Laser','Optical Laser','Ion Source','UV Plasma Source','neutron','x-ray','muon','electron','ultraviolet','visible light','positron','proton'],
                    )
                class nxf_beam_shape(NXobject):
                    '''
Text description of the shape of the beam (incident on the
                        sample).
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-shape-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_beam_shape = SubSection(sub_section=nxf_beam_shape.m_def,repeats=True,
                    nxp_name='beam_shape',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-shape-field',
                    nxp_optional='True',
                    )
                class nxf_incident_wavelength(NXobject):
                    '''
wavelength (:math:`\\lambda`) of radiation incident on the sample
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-incident-wavelength-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_incident_wavelength = SubSection(sub_section=nxf_incident_wavelength.m_def,repeats=True,
                    nxp_name='incident_wavelength',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_WAVELENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-incident-wavelength-field',
                    nxp_optional='True',
                    )
                class nxf_wavelength_min(NXobject):
                    '''
                        Some facilities specify wavelength using a range.
                        This is the lowest wavelength in such a range.
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-wavelength-min-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_wavelength_min = SubSection(sub_section=nxf_wavelength_min.m_def,repeats=True,
                    nxp_name='wavelength_min',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_WAVELENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-wavelength-min-field',
                    nxp_optional='True',
                    )
                class nxf_wavelength_max(NXobject):
                    '''
                        Some facilities specify wavelength using a range.
                        This is the highest wavelength in such a range.
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-wavelength-max-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_wavelength_max = SubSection(sub_section=nxf_wavelength_max.m_def,repeats=True,
                    nxp_name='wavelength_max',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_WAVELENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-wavelength-max-field',
                    nxp_optional='True',
                    )
                class nxf_incident_wavelength_spread(NXobject):
                    '''
                        Some facilities specify wavelength using a range.
                        This is the width (FWHM) of such a range.
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-incident-wavelength-spread-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_incident_wavelength_spread = SubSection(sub_section=nxf_incident_wavelength_spread.m_def,repeats=True,
                    nxp_name='incident_wavelength_spread',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_WAVELENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-incident-wavelength-spread-field',
                    nxp_optional='True',
                    )
                class nxf_beam_size_x(NXobject):
                    '''
Size of the incident beam along the x axis.
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-size-x-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_beam_size_x = SubSection(sub_section=nxf_beam_size_x.m_def,repeats=True,
                    nxp_name='beam_size_x',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-size-x-field',
                    nxp_optional='True',
                    )
                class nxf_beam_size_y(NXobject):
                    '''
Size of the incident beam along the y axis.
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-size-y-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_beam_size_y = SubSection(sub_section=nxf_beam_size_y.m_def,repeats=True,
                    nxp_name='beam_size_y',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-size-y-field',
                    nxp_optional='True',
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-group',
                nxp_optional='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_minOccurs='0',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-group',
            nxp_optional='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                Description of the sample.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxa_canSAS_class(NXobject):
                '''
Official canSAS group: :index:`NXcanSAS (applications); SASsample`
                    Obligatory value:    ['SASsample']

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-cansas-class-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                nxp_name='canSAS_class',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-cansas-class-attribute',
                nxp_required='True',
                enumeration=['SASsample'],
                )
            class nxf_name(NXobject):
                '''
**ID**: Text string that identifies this sample.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_thickness(NXobject):
                '''
Thickness of this sample
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-thickness-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_thickness = SubSection(sub_section=nxf_thickness.m_def,repeats=True,
                nxp_name='thickness',
                nxp_type='NX_FLOAT',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-thickness-field',
                nxp_optional='True',
                )
            class nxf_transmission(NXobject):
                '''
                    Transmission (:math:`I/I_0`) of this sample.            There is no
                    *units* attribute as this number is dimensionless.
                    Note: the ability to store a transmission *spectrum*,
                    instead of a single value, is provided elsewhere in the structure,
                    in the *SAStransmission_spectrum* element.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-transmission-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_transmission = SubSection(sub_section=nxf_transmission.m_def,repeats=True,
                nxp_name='transmission',
                nxp_type='NX_NUMBER',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_units='NX_DIMENSIONLESS',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-transmission-field',
                nxp_optional='True',
                )
            class nxf_temperature(NXobject):
                '''
Temperature of this sample.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-temperature-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
                nxp_name='temperature',
                nxp_type='NX_NUMBER',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_units='NX_TEMPERATURE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-temperature-field',
                nxp_optional='True',
                )
            class nxf_details(NXobject):
                '''
Any additional sample details.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-details-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_details = SubSection(sub_section=nxf_details.m_def,repeats=True,
                nxp_name='details',
                nxp_minOccurs='0',
                nxp_maxOccurs='unbounded',
                nxp_nameType='any',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-details-field',
                nxp_optional='True',
                )
            class nxf_x_position(NXobject):
                '''
Location of the sample in :math:`x`
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-x-position-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_x_position = SubSection(sub_section=nxf_x_position.m_def,repeats=True,
                nxp_name='x_position',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_type='NX_NUMBER',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-x-position-field',
                nxp_optional='True',
                )
            class nxf_y_position(NXobject):
                '''
Location of the sample in :math:`y`
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-y-position-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_y_position = SubSection(sub_section=nxf_y_position.m_def,repeats=True,
                nxp_name='y_position',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_type='NX_NUMBER',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-y-position-field',
                nxp_optional='True',
                )
            class nxf_roll(NXobject):
                '''
Rotation of the sample about the :math:`z` axis (roll)
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-roll-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_roll = SubSection(sub_section=nxf_roll.m_def,repeats=True,
                nxp_name='roll',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_type='NX_NUMBER',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-roll-field',
                nxp_optional='True',
                )
            class nxf_pitch(NXobject):
                '''
Rotation of the sample about the :math:`x` axis (roll)
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-pitch-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_pitch = SubSection(sub_section=nxf_pitch.m_def,repeats=True,
                nxp_name='pitch',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_type='NX_NUMBER',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-pitch-field',
                nxp_optional='True',
                )
            class nxf_yaw(NXobject):
                '''
Rotation of the sample about the :math:`y` axis (yaw)
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-yaw-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_yaw = SubSection(sub_section=nxf_yaw.m_def,repeats=True,
                nxp_name='yaw',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_type='NX_NUMBER',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-yaw-field',
                nxp_optional='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_minOccurs='0',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-group',
            nxp_optional='True',
            )
        class nxg_PROCESS(NXobject):
            '''
                Description of a processing or analysis step.                  Add
                additional fields as needed to describe value(s) of any          variable,
                parameter, or term related to the *SASprocess* step.         Be sure to
                include *units* attributes for all numerical fields.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
            class nxa_canSAS_class(NXobject):
                '''
Official canSAS group: :index:`NXcanSAS (applications); SASprocess`
                    Obligatory value:    ['SASprocess']

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-cansas-class-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                nxp_name='canSAS_class',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-cansas-class-attribute',
                nxp_required='True',
                enumeration=['SASprocess'],
                )
            class nxf_name(NXobject):
                '''
Optional name for this data processing or analysis step
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-name-field',
                nxp_optional='True',
                )
            class nxf_date(NXobject):
                '''
                    Optional date for this data processing or analysis step. [#iso8601]_
                    .. [#iso8601]  ISO-8601 standard time representation.
                    NeXus dates and times are reported in ISO-8601
                    (e.g., ``yyyy-mm-ddThh:mm:ss``)                                  or
                    modified ISO-8601 (e.g., ``yyyy-mm-dd hh:mm:ss``).
                    See: http://www.w3.org/TR/NOTE-datetime
                    or http://en.wikipedia.org/wiki/ISO_8601 for more details.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-date-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxf_date = SubSection(sub_section=nxf_date.m_def,repeats=True,
                nxp_name='date',
                nxp_type='NX_DATE_TIME',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-date-field',
                nxp_optional='True',
                )
            class nxf_description(NXobject):
                '''
Optional description for this data processing or analysis step
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-description-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                nxp_name='description',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-description-field',
                nxp_optional='True',
                )
            class nxf_term(NXobject):
                '''
                    Specifies the value of a single variable, parameter,            or
                    term (while defined here as a string, it could be a number)
                    related to the *SASprocess* step.                      Note:
                    The name *term* is not required, it could take any name,           as
                    long as the name is unique within this group.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-term-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_term = SubSection(sub_section=nxf_term.m_def,repeats=True,
                nxp_name='term',
                nxp_minOccurs='0',
                nxp_maxOccurs='unbounded',
                nxp_nameType='any',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-term-field',
                nxp_optional='True',
                )
            class nxg_NOTE(NXobject):
                '''
                    Any additional notes or subprocessing steps will be documented here.
                    An **NXnote** group can be added to any NeXus group at or below the
                    **NXentry** group.  It is shown here as a suggestion of a good place
                    to *consider* its use.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-note-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            nxg_NOTE = SubSection(sub_section=nxg_NOTE.m_def,repeats=True,
                nxp_type='NXnote',
                nxp_minOccurs='0',
                nxp_maxOccurs='unbounded',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-note-group',
                nxp_optional='True',
                )
            class nxg_COLLECTION(NXobject):
                '''
                    Describes anything about *SASprocess* that is not already described.
                    Any content not defined in the canSAS standard can be placed at this
                    point.

                    Note:           The name of this group is flexible, it could take any
                    name,           as long as it is unique within the **NXprocess**
                    group.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-collection-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
                class nxa_canSAS_class(NXobject):
                    '''
                        Official canSAS group: :index:`NXcanSAS (applications);
                        SASprocessnote`             Obligatory value:
                        ['SASprocessnote']

                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-collection-cansas-class-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                    nxp_name='canSAS_class',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-collection-cansas-class-attribute',
                    nxp_required='True',
                    enumeration=['SASprocessnote'],
                    )
            nxg_COLLECTION = SubSection(sub_section=nxg_COLLECTION.m_def,repeats=True,
                nxp_type='NXcollection',
                nxp_minOccurs='0',
                nxp_maxOccurs='unbounded',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-collection-group',
                nxp_optional='True',
                )
        nxg_PROCESS = SubSection(sub_section=nxg_PROCESS.m_def,repeats=True,
            nxp_type='NXprocess',
            nxp_minOccurs='0',
            nxp_maxOccurs='unbounded',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-group',
            nxp_optional='True',
            )
        class nxg_COLLECTION(NXobject):
            '''
                Free form description of anything not covered by other elements.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-collection-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
            class nxa_canSAS_class(NXobject):
                '''
                    Official canSAS group: :index:`NXcanSAS (applications); SASnote`
                    Obligatory value:    ['SASnote']

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-collection-cansas-class-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                nxp_name='canSAS_class',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-collection-cansas-class-attribute',
                nxp_required='True',
                enumeration=['SASnote'],
                )
        nxg_COLLECTION = SubSection(sub_section=nxg_COLLECTION.m_def,repeats=True,
            nxp_type='NXcollection',
            nxp_minOccurs='0',
            nxp_maxOccurs='unbounded',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-collection-group',
            nxp_optional='True',
            )
        class nxg_TRANSMISSION_SPECTRUM(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            class nxa_canSAS_class(NXobject):
                '''
Official canSAS group: :index:`NXcanSAS (applications);
                    SAStransmission_spectrum`  Obligatory value:
                    ['SAStransmission_spectrum']

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-cansas-class-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_canSAS_class = SubSection(sub_section=nxa_canSAS_class.m_def,repeats=True,
                nxp_name='canSAS_class',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-cansas-class-attribute',
                nxp_required='True',
                enumeration=['SAStransmission_spectrum'],
                )
            class nxa_signal(NXobject):
                '''
                    Name of the default data field.           Obligatory value:    ['T']

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-signal-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
                nxp_name='signal',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-signal-attribute',
                nxp_required='True',
                enumeration=['T'],
                )
            class nxa_T_axes(NXobject):
                '''
                    Obligatory value:    ['T']

                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-axes-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_T_axes = SubSection(sub_section=nxa_T_axes.m_def,repeats=True,
                nxp_name='T_axes',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-axes-attribute',
                nxp_required='True',
                enumeration=['T'],
                )
            class nxa_name(NXobject):
                '''
                    Identify what type of spectrum is being described.           It is
                    expected that this value will take either of these two values:
                    ======  ==============================================           value
                    meaning           ======
                    ==============================================           sample
                    measurement with the sample and container           can
                    measurement with just the container           ======
                    ==============================================
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-name-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_name = SubSection(sub_section=nxa_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-name-attribute',
                nxp_required='True',
                )
            class nxa_timestamp(NXobject):
                '''
                    ISO-8601 time [#iso8601]_
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-timestamp-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxa_timestamp = SubSection(sub_section=nxa_timestamp.m_def,repeats=True,
                nxp_name='timestamp',
                nxp_type='NX_DATE_TIME',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-timestamp-attribute',
                nxp_optional='True',
                )
            class nxf_lambda(NXobject):
                '''
                    Wavelength of the radiation.                      This array is of the
                    same shape as ``T`` and ``Tdev``.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-lambda-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_lambda = SubSection(sub_section=nxf_lambda.m_def,repeats=True,
                nxp_name='lambda',
                nxp_type='NX_NUMBER',
                nxp_units='NX_WAVELENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-lambda-field',
                nxp_required='True',
                )
            class nxf_T(NXobject):
                '''
                    Transmission values (:math:`I/I_0`)           as a function of
                    wavelength.                      This array is of the same shape as
                    ``lambda`` and ``Tdev``.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_uncertainties(NXobject):
                    '''
                        Names the dataset (in this SASdata group) that provides the
                        uncertainty of each transmission :math:`T` to be used for data
                        analysis.               The name of the dataset containing the
                        :math:`T` uncertainty             is expected to be ``Tdev``.
                        .. comment                see:
                        https://github.com/canSAS-org/canSAS2012/issues/7
                        Typically:                              @uncertainties="Tdev"
                        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-uncertainties-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_uncertainties = SubSection(sub_section=nxa_uncertainties.m_def,repeats=True,
                    nxp_name='uncertainties',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-uncertainties-attribute',
                    nxp_required='True',
                    )
            nxf_T = SubSection(sub_section=nxf_T.m_def,repeats=True,
                nxp_name='T',
                nxp_type='NX_NUMBER',
                nxp_units='NX_DIMENSIONLESS',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-field',
                nxp_required='True',
                )
            class nxf_Tdev(NXobject):
                '''
                    .. index:: NXcanSAS (applications); Tdev
                    Estimated uncertainty (usually standard deviation)           in
                    :math:`T`.  Must have the same units as :math:`T`.
                    This is the field is named in the *uncertainties* attribute of *T*, as
                    in::                          T/@uncertainties="Tdev"
                    This array is of the same shape as ``lambda`` and ``T``.
                    https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-tdev-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_Tdev = SubSection(sub_section=nxf_Tdev.m_def,repeats=True,
                nxp_name='Tdev',
                nxp_type='NX_NUMBER',
                nxp_units='NX_DIMENSIONLESS',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-tdev-field',
                nxp_required='True',
                )
        nxg_TRANSMISSION_SPECTRUM = SubSection(sub_section=nxg_TRANSMISSION_SPECTRUM.m_def,repeats=True,
            nxp_name='TRANSMISSION_SPECTRUM',
            nxp_type='NXdata',
            nxp_minOccurs='0',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-group',
            nxp_optional='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-group',
        nxp_required='True',
        )

class NXreftof(NXobject):
    '''
This is an application definition for raw data from a TOF reflectometer.
        https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXreftof',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-end-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXreftof']

                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-definition-field',
            nxp_required='True',
            enumeration=['NXreftof'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-name-field',
                nxp_required='True',
                )
            class nxg_chopper(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-chopper-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdisk_chopper.m_def,repeats=True)
                class nxf_distance(NXobject):
                    '''
Distance between chopper and sample
                        https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-chopper-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-chopper-distance-field',
                    nxp_required='True',
                    )
            nxg_chopper = SubSection(sub_section=nxg_chopper.m_def,repeats=True,
                nxp_type='NXdisk_chopper',
                nxp_name='chopper',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-chopper-group',
                nxp_required='True',
                )
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_time_of_flight(NXobject):
                    '''
                        Array of time values for each bin in a time-of-flight
                        measurement
                        https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-time-of-flight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                    nxp_name='time_of_flight',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TIME_OF_FLIGHT',
                    nxp_axis='3',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-time-of-flight-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-distance-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_x_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-x-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_size = SubSection(sub_section=nxf_x_pixel_size.m_def,repeats=True,
                    nxp_name='x_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-x-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_y_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-y-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_pixel_size = SubSection(sub_section=nxf_y_pixel_size.m_def,repeats=True,
                    nxp_name='y_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-y-pixel-size-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_rotation_angle(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-group',
            nxp_required='True',
            )
        class nxg_control(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time (timer)
                    or received monitor counts (monitor).             Possible values:
                    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-preset-field',
                nxp_required='True',
                )
            class nxf_integral(NXobject):
                '''
Total integral monitor counts
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-integral-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_integral = SubSection(sub_section=nxf_integral.m_def,repeats=True,
                nxp_name='integral',
                nxp_type='NX_INT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-integral-field',
                nxp_required='True',
                )
            class nxf_time_of_flight(NXobject):
                '''
Time channels
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-time-of-flight-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                nxp_name='time_of_flight',
                nxp_type='NX_FLOAT',
                nxp_units='NX_TIME_OF_FLIGHT',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-time-of-flight-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
Monitor counts in each time channel
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_signal='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-data-field',
                nxp_required='True',
                )
        nxg_control = SubSection(sub_section=nxg_control.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_name='control',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-group',
        nxp_required='True',
        )

class NXrefscan(NXobject):
    '''
        This is an application definition for a monochromatic scanning reflectometer.

        It does not have the information to calculate the resolution     since it does not
        have any apertures.
        https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXrefscan',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-end-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXrefscan']

                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-definition-field',
            nxp_required='True',
            enumeration=['NXrefscan'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray','electron']

                        https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray','electron'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_monochromator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-monochromator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                class nxf_wavelength(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-monochromator-wavelength-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
                    nxp_name='wavelength',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_WAVELENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-monochromator-wavelength-field',
                    nxp_required='True',
                    )
            nxg_monochromator = SubSection(sub_section=nxg_monochromator.m_def,repeats=True,
                nxp_type='NXmonochromator',
                nxp_name='monochromator',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-monochromator-group',
                nxp_required='True',
                )
            class nxg_DETECTOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_axis='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
            nxg_DETECTOR = SubSection(sub_section=nxg_DETECTOR.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_rotation_angle(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-group',
            nxp_required='True',
            )
        class nxg_control(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time (timer)
                    or received monitor counts (monitor).             Possible values:
                    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-preset-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
Monitor counts for each step
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-data-field',
                nxp_required='True',
                )
        nxg_control = SubSection(sub_section=nxg_control.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_name='control',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-group',
        nxp_required='True',
        )

class NXsastof(NXobject):
    '''
        raw, 2-D SAS data with an area detector with a time-of-flight source          It
        covers all raw data from any SAS techniques     that use an area detector     at a
        time-of-flight source.
        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXsastof',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_entry(NXobject):
            '''
NeXus convention is to use "entry1", "entry2", ... for analysis software
                to locate each entry
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-entry-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_entry = SubSection(sub_section=nxa_entry.m_def,repeats=True,
            nxp_name='entry',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-entry-attribute',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXsastof']

                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-definition-field',
            nxp_required='True',
            enumeration=['NXsastof'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Name of the instrument actually used to perform the experiment
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-name-field',
                nxp_required='True',
                )
            class nxg_source(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
type of radiation source
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
Name of the radiation source
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray']

                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray'],
                    )
            nxg_source = SubSection(sub_section=nxg_source.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_name='source',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_collimator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXcollimator.m_def,repeats=True)
                class nxg_geometry(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    class nxg_shape(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        class nxf_shape(NXobject):
                            '''
                                Possible values:    ['nxcylinder','nxbox']

                                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-shape-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_shape = SubSection(sub_section=nxf_shape.m_def,repeats=True,
                            nxp_name='shape',
                            nxp_type='NX_CHAR',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-shape-field',
                            nxp_required='True',
                            enumeration=['nxcylinder','nxbox'],
                            )
                        class nxf_size(NXobject):
                            '''
The collimation length
                                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-size-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_size = SubSection(sub_section=nxf_size.m_def,repeats=True,
                            nxp_name='size',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-size-field',
                            nxp_required='True',
                            )
                    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
                        nxp_type='NXshape',
                        nxp_name='shape',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-group',
                        nxp_required='True',
                        )
                nxg_geometry = SubSection(sub_section=nxg_geometry.m_def,repeats=True,
                    nxp_type='NXgeometry',
                    nxp_name='geometry',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-group',
                    nxp_required='True',
                    )
            nxg_collimator = SubSection(sub_section=nxg_collimator.m_def,repeats=True,
                nxp_type='NXcollimator',
                nxp_name='collimator',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-group',
                nxp_required='True',
                )
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        This is area detector data, of number of x-pixel versus
                        number of y-pixels. Since the beam center is to be
                        determined as a step of data reduction, it is not necessary
                        to document or assume the position of the beam center in
                        acquired data.
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_NUMBER',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_time_of_flight(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-time-of-flight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                    nxp_name='time_of_flight',
                    nxp_units='NX_TIME_OF_FLIGHT',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-time-of-flight-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
The distance between detector and sample
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-distance-field',
                    nxp_required='True',
                    )
                class nxf_x_pixel_size(NXobject):
                    '''
Physical size of a pixel in x-direction
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-x-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_size = SubSection(sub_section=nxf_x_pixel_size.m_def,repeats=True,
                    nxp_name='x_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-x-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_y_pixel_size(NXobject):
                    '''
Size of a pixel in y direction
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-y-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_pixel_size = SubSection(sub_section=nxf_y_pixel_size.m_def,repeats=True,
                    nxp_name='y_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-y-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_azimuthal_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-azimuthal-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
                    nxp_name='azimuthal_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-azimuthal-angle-field',
                    nxp_required='True',
                    )
                class nxf_rotation_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-rotation-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                    nxp_name='rotation_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-rotation-angle-field',
                    nxp_required='True',
                    )
                class nxf_aequatorial_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-aequatorial-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_aequatorial_angle = SubSection(sub_section=nxf_aequatorial_angle.m_def,repeats=True,
                    nxp_name='aequatorial_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-aequatorial-angle-field',
                    nxp_required='True',
                    )
                class nxf_beam_center_x(NXobject):
                    '''
                        This is the x position where the direct beam would hit the
                        detector. This is a                        length, not a pixel
                        position, and can be outside of the actual detector.
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-beam-center-x-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_beam_center_x = SubSection(sub_section=nxf_beam_center_x.m_def,repeats=True,
                    nxp_name='beam_center_x',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-beam-center-x-field',
                    nxp_required='True',
                    )
                class nxf_beam_center_y(NXobject):
                    '''
                        This is the y position where the direct beam would hit the
                        detector. This is a                          length, not a pixel
                        position, and can be outside of the actual detector.
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-beam-center-y-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_beam_center_y = SubSection(sub_section=nxf_beam_center_y.m_def,repeats=True,
                    nxp_name='beam_center_y',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-beam-center-y-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_aequatorial_angle(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-aequatorial-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_aequatorial_angle = SubSection(sub_section=nxf_aequatorial_angle.m_def,repeats=True,
                nxp_name='aequatorial_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-aequatorial-angle-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-group',
            nxp_required='True',
            )
        class nxg_control(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
Count to a preset value based on either clock time (timer) or received
                    monitor counts (monitor).   Possible values:    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-preset-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_primary='1',
                nxp_signal='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-data-field',
                nxp_required='True',
                )
            class nxf_time_of_flight(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-time-of-flight-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                nxp_name='time_of_flight',
                nxp_units='NX_TIME_OF_FLIGHT',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-time-of-flight-field',
                nxp_required='True',
                )
        nxg_control = SubSection(sub_section=nxg_control.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_name='control',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-data-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-group',
        nxp_required='True',
        )

class NXxlaueplate(NXxlaue):
    '''
        raw data from a single crystal Laue camera, extends :ref:`NXxlaue`          This
        is the application definition for raw data from a single crystal Laue      camera
        with an image plate as a detector. It extends :ref:`NXxlaue`.
        https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXxlaueplate',
        nxp_extends='NXxlaue',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXxlaueplate']

                https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-definition-field',
            nxp_required='True',
            enumeration=['NXxlaueplate'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_diameter(NXobject):
                    '''
The diameter of a cylindrical detector
                        https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-detector-diameter-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_diameter = SubSection(sub_section=nxf_diameter.m_def,repeats=True,
                    nxp_name='diameter',
                    nxp_units='NX_LENGTH',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-detector-diameter-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-group',
        nxp_required='True',
        )

class NXsqom(NXobject):
    '''
        This is the application definition for S(Q,OM) processed data.           As this
        kind of data is in     general not on a rectangular grid after data reduction, it
        is stored as Q,E positions plus their     intensity, table like. It is the task of
        a possible visualisation program to regrid this data in     a sensible way.
        https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXsqom',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_entry(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-entry-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_entry = SubSection(sub_section=nxa_entry.m_def,repeats=True,
            nxp_name='entry',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-entry-attribute',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-title-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXsqom']

                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-definition-field',
            nxp_required='True',
            enumeration=['NXsqom'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Name of the instrument from which this data was reduced.
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-name-field',
                nxp_required='True',
                )
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray','electron']

                        https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray','electron'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-sample-name-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-sample-group',
            nxp_required='True',
            )
        class nxg_reduction(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
            class nxf_program(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-program-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_program = SubSection(sub_section=nxf_program.m_def,repeats=True,
                nxp_name='program',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-program-field',
                nxp_required='True',
                )
            class nxf_version(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-version-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_version = SubSection(sub_section=nxf_version.m_def,repeats=True,
                nxp_name='version',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-version-field',
                nxp_required='True',
                )
            class nxg_input(NXobject):
                '''
Input parameters for the reduction program used
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-input-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
                class nxf_filenames(NXobject):
                    '''
Raw data files used to generate this I(Q)
                        https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-input-filenames-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_filenames = SubSection(sub_section=nxf_filenames.m_def,repeats=True,
                    nxp_name='filenames',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-input-filenames-field',
                    nxp_required='True',
                    )
            nxg_input = SubSection(sub_section=nxg_input.m_def,repeats=True,
                nxp_type='NXparameters',
                nxp_name='input',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-input-group',
                nxp_required='True',
                )
            class nxg_output(NXobject):
                '''
Eventual output parameters from the data reduction program used
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-output-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
            nxg_output = SubSection(sub_section=nxg_output.m_def,repeats=True,
                nxp_type='NXparameters',
                nxp_name='output',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-output-group',
                nxp_required='True',
                )
        nxg_reduction = SubSection(sub_section=nxg_reduction.m_def,repeats=True,
            nxp_type='NXprocess',
            nxp_name='reduction',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            class nxf_data(NXobject):
                '''
This is the intensity for each point in QE
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_signal='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-data-field',
                nxp_required='True',
                )
            class nxf_qx(NXobject):
                '''
Positions for the first dimension of Q
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qx-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_qx = SubSection(sub_section=nxf_qx.m_def,repeats=True,
                nxp_name='qx',
                nxp_axis='1',
                nxp_type='NX_NUMBER',
                nxp_units='NX_WAVENUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qx-field',
                nxp_required='True',
                )
            class nxf_qy(NXobject):
                '''
Positions for the the second dimension of Q
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qy-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_qy = SubSection(sub_section=nxf_qy.m_def,repeats=True,
                nxp_name='qy',
                nxp_axis='1',
                nxp_type='NX_NUMBER',
                nxp_units='NX_WAVENUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qy-field',
                nxp_required='True',
                )
            class nxf_qz(NXobject):
                '''
Positions for the the third dimension of Q
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qz-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_qz = SubSection(sub_section=nxf_qz.m_def,repeats=True,
                nxp_name='qz',
                nxp_axis='1',
                nxp_type='NX_NUMBER',
                nxp_units='NX_WAVENUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qz-field',
                nxp_required='True',
                )
            class nxf_en(NXobject):
                '''
Values for the energy transfer for each point
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-en-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_en = SubSection(sub_section=nxf_en.m_def,repeats=True,
                nxp_name='en',
                nxp_axis='1',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ENERGY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-en-field',
                nxp_required='True',
                )
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-group',
        nxp_required='True',
        )

class NXsas(NXobject):
    '''
        raw, monochromatic 2-D SAS data with an area detector

        This is an application definition for raw data (not processed or reduced data)
        from a 2-D small angle scattering instrument collected with a monochromatic
        beam and an area detector. It is meant to be suitable both for neutron SANS
        and X-ray SAXS data.           It covers all raw data from any monochromatic SAS
        techniques that     use an area detector: SAS, WSAS, grazing incidence, GISAS

        It covers all raw data from any SAS techniques     that use an area detector
        and a monochromatic beam.
        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXsas',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_entry(NXobject):
            '''
                NeXus convention is to use ``entry1``, ``entry2``, ...
                for analysis software to locate each entry
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-entry-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_entry = SubSection(sub_section=nxa_entry.m_def,repeats=True,
            nxp_name='entry',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-entry-attribute',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-end-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXsas']

                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-definition-field',
            nxp_required='True',
            enumeration=['NXsas'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Name of the instrument actually used to perform the experiment
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-name-field',
                nxp_required='True',
                )
            class nxg_source(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
type of radiation source
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
Name of the radiation source
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray']

                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray'],
                    )
            nxg_source = SubSection(sub_section=nxg_source.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_name='source',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_monochromator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                class nxf_wavelength(NXobject):
                    '''
The wavelength of the radiation
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-wavelength-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
                    nxp_name='wavelength',
                    nxp_units='NX_WAVELENGTH',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-wavelength-field',
                    nxp_required='True',
                    )
                class nxf_wavelength_spread(NXobject):
                    '''
                        delta_lambda/lambda (:math:`\\Delta\\lambda/\\lambda`):
                        Important for resolution calculations
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-wavelength-spread-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_wavelength_spread = SubSection(sub_section=nxf_wavelength_spread.m_def,repeats=True,
                    nxp_name='wavelength_spread',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-wavelength-spread-field',
                    nxp_required='True',
                    )
            nxg_monochromator = SubSection(sub_section=nxg_monochromator.m_def,repeats=True,
                nxp_type='NXmonochromator',
                nxp_name='monochromator',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-group',
                nxp_required='True',
                )
            class nxg_collimator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXcollimator.m_def,repeats=True)
                class nxg_geometry(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    class nxg_shape(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        class nxf_shape(NXobject):
                            '''
                                Possible values:    ['nxcylinder','nxbox']

                                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-shape-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_shape = SubSection(sub_section=nxf_shape.m_def,repeats=True,
                            nxp_name='shape',
                            nxp_type='NX_CHAR',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-shape-field',
                            nxp_required='True',
                            enumeration=['nxcylinder','nxbox'],
                            )
                        class nxf_size(NXobject):
                            '''
The collimation length
                                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-size-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_size = SubSection(sub_section=nxf_size.m_def,repeats=True,
                            nxp_name='size',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-size-field',
                            nxp_required='True',
                            )
                    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
                        nxp_type='NXshape',
                        nxp_name='shape',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-group',
                        nxp_required='True',
                        )
                nxg_geometry = SubSection(sub_section=nxg_geometry.m_def,repeats=True,
                    nxp_type='NXgeometry',
                    nxp_name='geometry',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-group',
                    nxp_required='True',
                    )
            nxg_collimator = SubSection(sub_section=nxg_collimator.m_def,repeats=True,
                nxp_type='NXcollimator',
                nxp_name='collimator',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-group',
                nxp_required='True',
                )
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        This is area detector data, of number of x-pixel versus
                        number of y-pixels. Since the beam center is to be
                        determined as a step of data reduction, it is not necessary
                        to document or assume the position of the beam center in
                        acquired data.
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_NUMBER',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
The distance between detector and sample
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-distance-field',
                    nxp_required='True',
                    )
                class nxf_x_pixel_size(NXobject):
                    '''
Physical size of a pixel in x-direction
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-x-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_size = SubSection(sub_section=nxf_x_pixel_size.m_def,repeats=True,
                    nxp_name='x_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-x-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_y_pixel_size(NXobject):
                    '''
Size of a pixel in y direction
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-y-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_pixel_size = SubSection(sub_section=nxf_y_pixel_size.m_def,repeats=True,
                    nxp_name='y_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-y-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_azimuthal_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-azimuthal-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
                    nxp_name='azimuthal_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-azimuthal-angle-field',
                    nxp_required='True',
                    )
                class nxf_rotation_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-rotation-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                    nxp_name='rotation_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-rotation-angle-field',
                    nxp_required='True',
                    )
                class nxf_aequatorial_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-aequatorial-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_aequatorial_angle = SubSection(sub_section=nxf_aequatorial_angle.m_def,repeats=True,
                    nxp_name='aequatorial_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-aequatorial-angle-field',
                    nxp_required='True',
                    )
                class nxf_beam_center_x(NXobject):
                    '''
                        This is the x position where the direct beam would hit the
                        detector. This is a                                 length, not a
                        pixel position, and can be outside of the actual detector.
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-beam-center-x-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_beam_center_x = SubSection(sub_section=nxf_beam_center_x.m_def,repeats=True,
                    nxp_name='beam_center_x',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-beam-center-x-field',
                    nxp_required='True',
                    )
                class nxf_beam_center_y(NXobject):
                    '''
                        This is the y position where the direct beam would hit the
                        detector. This is a                                 length, not a
                        pixel position, and can be outside of the actual detector.
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-beam-center-y-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_beam_center_y = SubSection(sub_section=nxf_beam_center_y.m_def,repeats=True,
                    nxp_name='beam_center_y',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-beam-center-y-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_aequatorial_angle(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-aequatorial-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_aequatorial_angle = SubSection(sub_section=nxf_aequatorial_angle.m_def,repeats=True,
                nxp_name='aequatorial_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-aequatorial-angle-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-group',
            nxp_required='True',
            )
        class nxg_control(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time
                    (timer) or received monitor counts (monitor).            Possible
                    values:    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-preset-field',
                nxp_required='True',
                )
            class nxf_integral(NXobject):
                '''
Total integral monitor counts
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-integral-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_integral = SubSection(sub_section=nxf_integral.m_def,repeats=True,
                nxp_name='integral',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-integral-field',
                nxp_required='True',
                )
        nxg_control = SubSection(sub_section=nxg_control.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_name='control',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-data-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-group',
        nxp_required='True',
        )

class NXtas(NXobject):
    '''
        This is an application definition for a triple axis spectrometer.           It is
        for the trademark scan of the TAS, the Q-E scan.      For your alignment scans use
        the rules in :ref:`NXscan`.
        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXtas',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXtas']

                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-definition-field',
            nxp_required='True',
            enumeration=['NXtas'],
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray']

                        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_monochromator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                class nxf_ei(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-ei-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_ei = SubSection(sub_section=nxf_ei.m_def,repeats=True,
                    nxp_name='ei',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ENERGY',
                    nxp_axis='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-ei-field',
                    nxp_required='True',
                    )
                class nxf_rotation_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-rotation-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                    nxp_name='rotation_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-rotation-angle-field',
                    nxp_required='True',
                    )
            nxg_monochromator = SubSection(sub_section=nxg_monochromator.m_def,repeats=True,
                nxp_type='NXcrystal',
                nxp_name='monochromator',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-group',
                nxp_required='True',
                )
            class nxg_analyser(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                class nxf_ef(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-ef-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_ef = SubSection(sub_section=nxf_ef.m_def,repeats=True,
                    nxp_name='ef',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ENERGY',
                    nxp_axis='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-ef-field',
                    nxp_required='True',
                    )
                class nxf_rotation_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-rotation-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                    nxp_name='rotation_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-rotation-angle-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-polar-angle-field',
                    nxp_required='True',
                    )
            nxg_analyser = SubSection(sub_section=nxg_analyser.m_def,repeats=True,
                nxp_type='NXcrystal',
                nxp_name='analyser',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-group',
                nxp_required='True',
                )
            class nxg_DETECTOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
            nxg_DETECTOR = SubSection(sub_section=nxg_DETECTOR.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_qh(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-qh-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_qh = SubSection(sub_section=nxf_qh.m_def,repeats=True,
                nxp_name='qh',
                nxp_type='NX_FLOAT',
                nxp_units='NX_DIMENSIONLESS',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-qh-field',
                nxp_required='True',
                )
            class nxf_qk(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-qk-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_qk = SubSection(sub_section=nxf_qk.m_def,repeats=True,
                nxp_name='qk',
                nxp_type='NX_FLOAT',
                nxp_units='NX_DIMENSIONLESS',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-qk-field',
                nxp_required='True',
                )
            class nxf_ql(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-ql-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_ql = SubSection(sub_section=nxf_ql.m_def,repeats=True,
                nxp_name='ql',
                nxp_type='NX_FLOAT',
                nxp_units='NX_DIMENSIONLESS',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-ql-field',
                nxp_required='True',
                )
            class nxf_en(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-en-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_en = SubSection(sub_section=nxf_en.m_def,repeats=True,
                nxp_name='en',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ENERGY',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-en-field',
                nxp_required='True',
                )
            class nxf_rotation_angle(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
            class nxf_polar_angle(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-polar-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                nxp_name='polar_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-polar-angle-field',
                nxp_required='True',
                )
            class nxf_sgu(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-sgu-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_sgu = SubSection(sub_section=nxf_sgu.m_def,repeats=True,
                nxp_name='sgu',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-sgu-field',
                nxp_required='True',
                )
            class nxf_sgl(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-sgl-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_sgl = SubSection(sub_section=nxf_sgl.m_def,repeats=True,
                nxp_name='sgl',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-sgl-field',
                nxp_required='True',
                )
            class nxf_unit_cell(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-unit-cell-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_unit_cell = SubSection(sub_section=nxf_unit_cell.m_def,repeats=True,
                nxp_name='unit_cell',
                nxp_type='NX_FLOAT',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-unit-cell-field',
                nxp_required='True',
                )
            class nxf_orientation_matrix(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-orientation-matrix-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_orientation_matrix = SubSection(sub_section=nxf_orientation_matrix.m_def,repeats=True,
                nxp_name='orientation_matrix',
                nxp_type='NX_FLOAT',
                nxp_units='NX_DIMENSIONLESS',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-orientation-matrix-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-group',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time (timer)
                    or received monitor counts (monitor).             Possible values:
                    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-preset-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
Total integral monitor counts
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-data-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
One of the ei,ef,qh,qk,ql,en should get a primary=1 attribute to denote
                the main scan axis
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-group',
        nxp_required='True',
        )

class NXtofsingle(NXobject):
    '''
This is a application definition for raw data from a generic TOF instrument
        https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXtofsingle',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXtofsingle']

                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-definition-field',
            nxp_required='True',
            enumeration=['NXtofsingle'],
            )
        class nxf_duration(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-duration-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
            nxp_name='duration',
            nxp_type='NX_FLOAT',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-duration-field',
            nxp_required='True',
            )
        class nxf_pre_sample_flightpath(NXobject):
            '''
                This is the flight path before the sample position. This can be determined
                by a chopper,         by the moderator or the source itself. In other
                words: it the distance to the component         which gives the T0 signal
                to the detector electronics. If another component in the
                NXinstrument hierarchy provides this information, this should be a link.
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-pre-sample-flightpath-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_pre_sample_flightpath = SubSection(sub_section=nxf_pre_sample_flightpath.m_def,repeats=True,
            nxp_name='pre_sample_flightpath',
            nxp_type='NX_FLOAT',
            nxp_units='NX_LENGTH',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-pre-sample-flightpath-field',
            nxp_required='True',
            )
        class nxg_user(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-user-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-user-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-user-name-field',
                nxp_required='True',
                )
        nxg_user = SubSection(sub_section=nxg_user.m_def,repeats=True,
            nxp_type='NXuser',
            nxp_name='user',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-user-group',
            nxp_required='True',
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
Distance to sample for the center of the detector
                        https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-distance-field',
                    nxp_required='True',
                    )
                class nxf_time_of_flight(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-time-of-flight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                    nxp_name='time_of_flight',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TIME_OF_FLIGHT',
                    nxp_axis='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-time-of-flight-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
polar angle for each detector element
                        https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_azimuthal_angle(NXobject):
                    '''
azimuthal angle for each detector element
                        https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-azimuthal-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
                    nxp_name='azimuthal_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-azimuthal-angle-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_nature(NXobject):
                '''
                    Possible values:    ['powder','liquid','single crystal']

                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-nature-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_nature = SubSection(sub_section=nxf_nature.m_def,repeats=True,
                nxp_name='nature',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-nature-field',
                nxp_required='True',
                enumeration=['powder','liquid','single crystal'],
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-group',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time (timer)
                    or received monitor counts (monitor).             Possible values:
                    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-preset-field',
                nxp_required='True',
                )
            class nxf_distance(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-distance-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                nxp_name='distance',
                nxp_type='NX_FLOAT',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-distance-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_signal='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-data-field',
                nxp_required='True',
                )
            class nxf_time_of_flight(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-time-of-flight-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                nxp_name='time_of_flight',
                nxp_type='NX_FLOAT',
                nxp_units='NX_TIME_OF_FLIGHT',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-time-of-flight-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-group',
        nxp_required='True',
        )

class NXfluo(NXobject):
    '''
        This is an application definition for raw data from an X-ray fluorescence
        experiment
        https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXfluo',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
                Official NeXus NXDL schema to which this file conforms.
                Obligatory value:    ['NXfluo']

                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-definition-field',
            nxp_required='True',
            enumeration=['NXfluo'],
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Obligatory value:    ['x-ray']

                        https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['x-ray'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_monochromator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-monochromator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                class nxf_wavelength(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-monochromator-wavelength-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
                    nxp_name='wavelength',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-monochromator-wavelength-field',
                    nxp_required='True',
                    )
            nxg_monochromator = SubSection(sub_section=nxg_monochromator.m_def,repeats=True,
                nxp_type='NXmonochromator',
                nxp_name='monochromator',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-monochromator-group',
                nxp_required='True',
                )
            class nxg_fluorescence(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_axes='energy',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-data-field',
                    nxp_required='True',
                    )
                class nxf_energy(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                    nxp_name='energy',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-energy-field',
                    nxp_required='True',
                    )
            nxg_fluorescence = SubSection(sub_section=nxg_fluorescence.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='fluorescence',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-sample-name-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-sample-group',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time (timer)
                    or received monitor counts (monitor).             Possible values:
                    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-preset-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-data-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-group',
        nxp_required='True',
        )

class NXxeuler(NXxbase):
    '''
        raw data from a :index:`four-circle diffractometer` with an :index:`eulerian
        cradle`, extends :ref:`NXxbase`              It extends :ref:`NXxbase`, so the
        full definition is the content        of :ref:`NXxbase` plus the data defined
        here. All four angles are        logged in order to support arbitrary scans in
        reciprocal space.
        https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXxeuler',
        nxp_extends='NXxbase',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXxeuler']

                https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-definition-field',
            nxp_required='True',
            enumeration=['NXxeuler'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_polar_angle(NXobject):
                    '''
                        The polar_angle (two theta) where the detector is placed
                        at each scan point.
                        https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_axis='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_rotation_angle(NXobject):
                '''
                    This is an array holding the sample rotation angle at each
                    scan point
                    https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
            class nxf_chi(NXobject):
                '''
                    This is an array holding the chi angle of the eulerian
                    cradle at each scan point
                    https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-chi-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_chi = SubSection(sub_section=nxf_chi.m_def,repeats=True,
                nxp_name='chi',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-chi-field',
                nxp_required='True',
                )
            class nxf_phi(NXobject):
                '''
                    This is an array holding the phi rotation of the eulerian
                    cradle at each scan point
                    https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-phi-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_phi = SubSection(sub_section=nxf_phi.m_def,repeats=True,
                nxp_name='phi',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_signal='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-phi-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-group',
            nxp_required='True',
            )
        class nxg_name(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-name-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_name = SubSection(sub_section=nxg_name.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='name',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-name-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-group',
        nxp_required='True',
        )

class NXxrot(NXxbase):
    '''
        This definition covers the common parts of all monochromatic single crystal raw
        data application definitions.
        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXxrot',
        nxp_extends='NXxbase',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms.  Obligatory value:
                ['NXxrot']

                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-definition-field',
            nxp_required='True',
            enumeration=['NXxrot'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_polar_angle(NXobject):
                    '''
The polar_angle (two theta) where the detector is placed.
                        https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_beam_center_x(NXobject):
                    '''
                        This is the x position where the direct beam would hit the
                        detector. This is a               length, not a pixel position,
                        and can be outside of the actual detector.
                        https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-beam-center-x-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_beam_center_x = SubSection(sub_section=nxf_beam_center_x.m_def,repeats=True,
                    nxp_name='beam_center_x',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-beam-center-x-field',
                    nxp_required='True',
                    )
                class nxf_beam_center_y(NXobject):
                    '''
                        This is the y position where the direct beam would hit the
                        detector. This is a                 length, not a pixel position,
                        and can be outside of the actual detector.
                        https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-beam-center-y-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_beam_center_y = SubSection(sub_section=nxf_beam_center_y.m_def,repeats=True,
                    nxp_name='beam_center_y',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-beam-center-y-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-group',
                nxp_required='True',
                )
            class nxg_attenuator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-attenuator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXattenuator.m_def,repeats=True)
                class nxf_attenuator_transmission(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-attenuator-attenuator-transmission-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_attenuator_transmission = SubSection(sub_section=nxf_attenuator_transmission.m_def,repeats=True,
                    nxp_name='attenuator_transmission',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-attenuator-attenuator-transmission-field',
                    nxp_required='True',
                    )
            nxg_attenuator = SubSection(sub_section=nxg_attenuator.m_def,repeats=True,
                nxp_type='NXattenuator',
                nxp_name='attenuator',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-attenuator-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_rotation_angle(NXobject):
                '''
This is an array holding the sample rotation start angle at each  scan
                    point
                    https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
            class nxf_rotation_angle_step(NXobject):
                '''
This is an array holding the step made for sample rotation angle at
                    each  scan point
                    https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-rotation-angle-step-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle_step = SubSection(sub_section=nxf_rotation_angle_step.m_def,repeats=True,
                nxp_name='rotation_angle_step',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-rotation-angle-step-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-group',
            nxp_required='True',
            )
        class nxg_name(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-name-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_name = SubSection(sub_section=nxg_name.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='name',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-name-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-group',
        nxp_required='True',
        )

class NXtofraw(NXobject):
    '''
This is an application definition for raw data from a generic TOF instrument
        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXtofraw',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXtofraw']

                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-definition-field',
            nxp_required='True',
            enumeration=['NXtofraw'],
            )
        class nxf_duration(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-duration-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
            nxp_name='duration',
            nxp_type='NX_FLOAT',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-duration-field',
            nxp_required='True',
            )
        class nxf_run_number(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-run-number-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxf_run_number = SubSection(sub_section=nxf_run_number.m_def,repeats=True,
            nxp_name='run_number',
            nxp_type='NX_INT',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-run-number-field',
            nxp_required='True',
            )
        class nxf_pre_sample_flightpath(NXobject):
            '''
                This is the flight path before the sample position. This can be determined
                by a chopper,         by the moderator, or the source itself. In other
                words: it is the distance to the component         which gives the T0
                signal to the detector electronics. If another component in the
                NXinstrument hierarchy provides this information, this should be a link.
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-pre-sample-flightpath-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_pre_sample_flightpath = SubSection(sub_section=nxf_pre_sample_flightpath.m_def,repeats=True,
            nxp_name='pre_sample_flightpath',
            nxp_type='NX_FLOAT',
            nxp_units='NX_LENGTH',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-pre-sample-flightpath-field',
            nxp_required='True',
            )
        class nxg_user(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-user-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-user-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-user-name-field',
                nxp_required='True',
                )
        nxg_user = SubSection(sub_section=nxg_user.m_def,repeats=True,
            nxp_type='NXuser',
            nxp_name='user',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-user-group',
            nxp_required='True',
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_detector_number(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-detector-number-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_detector_number = SubSection(sub_section=nxf_detector_number.m_def,repeats=True,
                    nxp_name='detector_number',
                    nxp_type='NX_INT',
                    nxp_axis='2',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-detector-number-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
distance to sample for each detector
                        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-distance-field',
                    nxp_required='True',
                    )
                class nxf_time_of_flight(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-time-of-flight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                    nxp_name='time_of_flight',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TIME_OF_FLIGHT',
                    nxp_axis='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-time-of-flight-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
polar angle for each detector element
                        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_azimuthal_angle(NXobject):
                    '''
polar angle for each detector element
                        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-azimuthal-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
                    nxp_name='azimuthal_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-azimuthal-angle-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_nature(NXobject):
                '''
                    Possible values:    ['powder','liquid','single crystal']

                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-nature-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_nature = SubSection(sub_section=nxf_nature.m_def,repeats=True,
                nxp_name='nature',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-nature-field',
                nxp_required='True',
                enumeration=['powder','liquid','single crystal'],
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-group',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time (timer)
                    or received monitor counts (monitor).             Possible values:
                    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-preset-field',
                nxp_required='True',
                )
            class nxf_distance(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-distance-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                nxp_name='distance',
                nxp_type='NX_FLOAT',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-distance-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_signal='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-data-field',
                nxp_required='True',
                )
            class nxf_time_of_flight(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-time-of-flight-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                nxp_name='time_of_flight',
                nxp_type='NX_FLOAT',
                nxp_units='NX_TIME_OF_FLIGHT',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-time-of-flight-field',
                nxp_required='True',
                )
            class nxf_integral_counts(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-integral-counts-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_integral_counts = SubSection(sub_section=nxf_integral_counts.m_def,repeats=True,
                nxp_name='integral_counts',
                nxp_type='NX_INT',
                nxp_units='NX_UNITLESS',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-integral-counts-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-group',
        nxp_required='True',
        )

class NXxkappa(NXxbase):
    '''
        This definition covers the common parts of all monochromatic single crystal raw
        data application definitions.
        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXxkappa',
        nxp_extends='NXxbase',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXxkappa']

                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-definition-field',
            nxp_required='True',
            enumeration=['NXxkappa'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_polar_angle(NXobject):
                    '''
The polar_angle (two theta) at each scan point
                        https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_rotation_angle(NXobject):
                '''
                    This is an array holding the sample rotation angle at each
                    scan point
                    https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
            class nxf_kappa(NXobject):
                '''
                    This is an array holding the kappa angle at each scan point
                    https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-kappa-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_kappa = SubSection(sub_section=nxf_kappa.m_def,repeats=True,
                nxp_name='kappa',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-kappa-field',
                nxp_required='True',
                )
            class nxf_phi(NXobject):
                '''
                    This is an array holding the phi angle at each scan point
                    https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-phi-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_phi = SubSection(sub_section=nxf_phi.m_def,repeats=True,
                nxp_name='phi',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-phi-field',
                nxp_required='True',
                )
            class nxf_alpha(NXobject):
                '''
This holds the inclination angle of the kappa arm.
                    https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-alpha-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_alpha = SubSection(sub_section=nxf_alpha.m_def,repeats=True,
                nxp_name='alpha',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-alpha-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-group',
            nxp_required='True',
            )
        class nxg_name(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-name-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_name = SubSection(sub_section=nxg_name.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='name',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-name-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-group',
        nxp_required='True',
        )

class NXindirecttof(NXtofraw):
    '''
This is an application definition for raw data from a generic TOF instrument
        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXindirecttof',
        nxp_extends='NXtofraw',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXindirecttof']

                https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-definition-field',
            nxp_required='True',
            enumeration=['NXindirecttof'],
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_analyser(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                class nxf_energy(NXobject):
                    '''
analyzed energy
                        https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                    nxp_name='energy',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ENERGY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-energy-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
polar angle towards sample
                        https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
distance from sample
                        https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-distance-field',
                    nxp_required='True',
                    )
            nxg_analyser = SubSection(sub_section=nxg_analyser.m_def,repeats=True,
                nxp_type='NXmonochromator',
                nxp_name='analyser',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-group',
        nxp_required='True',
        )

class NXmx(NXobject):
    '''
        functional application definition for macromolecular crystallography
        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXmx',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            Note, it is recommended that ``file_name`` and ``file_time`` are included
            as attributes at the root of a file that includes  :ref:`NXmx`. See
            :ref:`NXroot`.
            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_version(NXobject):
            '''
                Describes the version of the NXmx definition used to write this data.
                This must be a text (not numerical) representation. Such as::

                @version="1.0"                                   Obligatory value:
                ['1.0']

                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-version-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
            nxp_name='version',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-version-attribute',
            nxp_optional='True',
            enumeration=['1.0'],
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_type='NX_CHAR',
            nxp_minOccurs='0',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-title-field',
            nxp_optional='True',
            )
        class nxf_start_time(NXobject):
            '''
                ISO 8601 time/date of the first data point collected in UTC,
                using the Z suffix to avoid confusion with local time.
                Note that the time zone of the beamline should be provided in
                NXentry/NXinstrument/time_zone.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_end_time(NXobject):
            '''
                ISO 8601 time/date of the last data point collected in UTC,
                using the Z suffix to avoid confusion with local time.
                Note that the time zone of the beamline should be provided in
                NXentry/NXinstrument/time_zone. This field should only be
                filled when the value is accurately observed. If the data
                collection aborts or otherwise prevents accurate recording of
                the end_time, this field should be omitted.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_minOccurs='0',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-end-time-field',
            nxp_optional='True',
            )
        class nxf_end_time_estimated(NXobject):
            '''
                ISO 8601 time/date of the last data point collected in UTC,
                using the Z suffix to avoid confusion with local time.
                Note that the time zone of the beamline should be provided in
                NXentry/NXinstrument/time_zone.  This field may be filled
                with a value estimated before an observed value is available.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-end-time-estimated-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time_estimated = SubSection(sub_section=nxf_end_time_estimated.m_def,repeats=True,
            nxp_name='end_time_estimated',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-end-time-estimated-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXmx']

                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-definition-field',
            nxp_required='True',
            enumeration=['NXmx'],
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            class nxf_data(NXobject):
                '''
                    For a dimension-2 detector, the rank of the data array will be 3.
                    For a dimension-3 detector, the rank of the data array will be 4.
                    This allows for the introduction of the frame number as the
                    first index.
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-data-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-data-data-field',
                )
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-data-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_depends_on(NXobject):
                '''
                    This is a requirement to describe for any scan experiment.

                    The axis on which the sample position depends may be stored
                    anywhere, but is normally stored in the NXtransformations
                    group within the NXsample group.

                    If there is no goniometer, e.g. with a jet, depends_on
                    should be set to "."
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-depends-on-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_depends_on = SubSection(sub_section=nxf_depends_on.m_def,repeats=True,
                nxp_name='depends_on',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-depends-on-field',
                nxp_required='True',
                )
            class nxf_temperature(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-temperature-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
                nxp_name='temperature',
                nxp_units='NX_TEMPERATURE',
                nxp_type='NX_NUMBER',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-temperature-field',
                nxp_optional='True',
                )
            class nxg_TRANSFORMATIONS(NXobject):
                '''
                    This is the recommended location for sample goniometer
                    and other related axes.

                    This is a requirement to describe for any scan experiment.
                    The reason it is optional is mainly to accommodate XFEL
                    single shot exposures.

                    Use of the depends_on field and the NXtransformations group is
                    strongly recommended.  As noted above this should be an absolute
                    requirement to have for any scan experiment.

                    The reason it is optional is mainly to accommodate XFEL
                    single shot exposures.
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-transformations-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
            nxg_TRANSFORMATIONS = SubSection(sub_section=nxg_TRANSFORMATIONS.m_def,repeats=True,
                nxp_type='NXtransformations',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-transformations-group',
                nxp_optional='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-group',
            nxp_required='True',
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
                    Name of instrument.  Consistency with the controlled
                    vocabulary beamline naming in
                    https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_diffrn_source.pdbx_synchrotron_beamline.html
                    and
                    https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_diffrn_source.type.html
                    is highly recommended.
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                class nxa_short_name(NXobject):
                    '''
Short name for instrument, perhaps the acronym.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-name-short-name-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_short_name = SubSection(sub_section=nxa_short_name.m_def,repeats=True,
                    nxp_name='short_name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-name-short-name-attribute',
                    nxp_required='True',
                    )
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_minOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-name-field',
                nxp_required='True',
                )
            class nxf_time_zone(NXobject):
                '''
                    ISO 8601 time_zone offset from UTC.
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-time-zone-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxf_time_zone = SubSection(sub_section=nxf_time_zone.m_def,repeats=True,
                nxp_name='time_zone',
                nxp_type='NX_DATE_TIME',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-time-zone-field',
                )
            class nxg_ATTENUATOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-attenuator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXattenuator.m_def,repeats=True)
                class nxf_attenuator_transmission(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-attenuator-attenuator-transmission-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_attenuator_transmission = SubSection(sub_section=nxf_attenuator_transmission.m_def,repeats=True,
                    nxp_name='attenuator_transmission',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_UNITLESS',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-attenuator-attenuator-transmission-field',
                    nxp_optional='True',
                    )
            nxg_ATTENUATOR = SubSection(sub_section=nxg_ATTENUATOR.m_def,repeats=True,
                nxp_type='NXattenuator',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-attenuator-group',
                nxp_optional='True',
                )
            class nxg_DETECTOR_GROUP(NXobject):
                '''
                    Optional logical grouping of detectors.

                    Each detector is represented as an NXdetector
                    with its own detector data array.  Each detector data array
                    may be further decomposed into array sections by use of
                    NXdetector_module groups.  Detectors can be grouped logically
                    together using NXdetector_group. Groups can be further grouped
                    hierarchically in a single NXdetector_group (for example, if
                    there are multiple detectors at an endstation or multiple
                    endstations at a facility).  Alternatively, multiple
                    NXdetector_groups can be provided.

                    The groups are defined hierarchically, with names given
                    in the group_names field, unique identifying indices given
                    in the field group_index, and the level in the hierarchy
                    given in the group_parent field.  For example if an x-ray
                    detector group, DET, consists of four detectors in a
                    rectangular array::

                    DTL     DTR
                    DLL    DLR

                    We could have::

                    group_names: ["DET", "DTL", "DTR", "DLL", "DLR"]
                    group_index: [1, 2, 3, 4, 5]
                    group_parent:  [-1, 1, 1, 1, 1]

                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector_group.m_def,repeats=True)
                class nxf_group_names(NXobject):
                    '''
                        An array of the names of the detectors or the names of
                        hierarchical groupings of detectors.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-names-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_group_names = SubSection(sub_section=nxf_group_names.m_def,repeats=True,
                    nxp_name='group_names',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-names-field',
                    nxp_required='True',
                    )
                class nxf_group_index(NXobject):
                    '''
                        An array of unique identifiers for detectors or groupings
                        of detectors.

                        Each ID is a unique ID for the corresponding detector or group
                        named in the field group_names.  The IDs are positive integers
                        starting with 1.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-index-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_group_index = SubSection(sub_section=nxf_group_index.m_def,repeats=True,
                    nxp_name='group_index',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-index-field',
                    nxp_required='True',
                    )
                class nxf_group_parent(NXobject):
                    '''
                        An array of the hierarchical levels of the parents of detectors
                        or groupings of detectors.

                        A top-level grouping has parent level -1.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-parent-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_group_parent = SubSection(sub_section=nxf_group_parent.m_def,repeats=True,
                    nxp_name='group_parent',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-parent-field',
                    nxp_required='True',
                    )
            nxg_DETECTOR_GROUP = SubSection(sub_section=nxg_DETECTOR_GROUP.m_def,repeats=True,
                nxp_type='NXdetector_group',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group',
                )
            class nxg_DETECTOR(NXobject):
                '''
                    Normally the detector group will have the name ``detector``.
                    However, in the case of multiple detectors, each detector
                    needs a uniquely named NXdetector.
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_depends_on(NXobject):
                    '''
                        NeXus path to the detector positioner axis that most directly
                        supports the detector.  In the case of a single-module
                        detector, the detector axis chain may start here.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-depends-on-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_depends_on = SubSection(sub_section=nxf_depends_on.m_def,repeats=True,
                    nxp_name='depends_on',
                    nxp_minOccurs='0',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-depends-on-field',
                    nxp_optional='True',
                    )
                class nxf_data(NXobject):
                    '''
                        For a dimension-2 detector, the rank of the data array will be 3.
                        For a dimension-3 detector, the rank of the data array will be 4.
                        This allows for the introduction of the frame number as the
                        first index.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_NUMBER',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-data-field',
                    )
                class nxf_description(NXobject):
                    '''
                        name/manufacturer/model/etc. information.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-description-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                    nxp_name='description',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-description-field',
                    )
                class nxf_time_per_channel(NXobject):
                    '''
                        For a time-of-flight detector this is the scaling
                        factor to convert from the numeric value reported to
                        the flight time for a given measurement.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-time-per-channel-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_time_per_channel = SubSection(sub_section=nxf_time_per_channel.m_def,repeats=True,
                    nxp_name='time_per_channel',
                    nxp_units='NX_TIME',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-time-per-channel-field',
                    nxp_optional='True',
                    )
                class nxf_distance(NXobject):
                    '''
                        Distance from the sample to the beam center.
                        Normally this value is for guidance only, the proper
                        geometry can be found following the depends_on axis chain,
                        But in appropriate cases where the dectector distance
                        to the sample is observable independent of the axis
                        chain, that may take precedence over the axis chain
                        calculation.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-distance-field',
                    )
                class nxf_distance_derived(NXobject):
                    '''
                        Boolean to indicate if the distance is a derived, rather than
                        a primary observation.  If distance_derived true or is not
                        specified,
                        the distance is assumed to be derived from delector axis
                        specifications.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-distance-derived-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                nxf_distance_derived = SubSection(sub_section=nxf_distance_derived.m_def,repeats=True,
                    nxp_name='distance_derived',
                    nxp_type='NX_BOOLEAN',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-distance-derived-field',
                    )
                class nxf_dead_time(NXobject):
                    '''
                        Detector dead time.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-dead-time-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_dead_time = SubSection(sub_section=nxf_dead_time.m_def,repeats=True,
                    nxp_name='dead_time',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TIME',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-dead-time-field',
                    nxp_optional='True',
                    )
                class nxf_count_time(NXobject):
                    '''
                        Elapsed actual counting time.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-count-time-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_count_time = SubSection(sub_section=nxf_count_time.m_def,repeats=True,
                    nxp_name='count_time',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_TIME',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-count-time-field',
                    )
                class nxf_beam_center_derived(NXobject):
                    '''
                        Boolean to indicate if the distance is a derived, rather than
                        a primary observation.  If true or not provided, that value of
                        beam_center_derived is assumed to be true.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-derived-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                nxf_beam_center_derived = SubSection(sub_section=nxf_beam_center_derived.m_def,repeats=True,
                    nxp_name='beam_center_derived',
                    nxp_type='NX_BOOLEAN',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-derived-field',
                    nxp_optional='True',
                    )
                class nxf_beam_center_x(NXobject):
                    '''
                        This is the x position where the direct beam would hit the
                        detector. This is a length and can be outside of the actual
                        detector. The length can be in physical units or pixels as
                        documented by the units attribute.  Normally, this should
                        be derived from the axis chain, but the direct specification
                        may take precedence if it is not a derived quantity.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-x-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_beam_center_x = SubSection(sub_section=nxf_beam_center_x.m_def,repeats=True,
                    nxp_name='beam_center_x',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-x-field',
                    )
                class nxf_beam_center_y(NXobject):
                    '''
                        This is the y position where the direct beam would hit the
                        detector. This is a length and can be outside of the actual
                        detector. The length can be in physical units or pixels as
                        documented by the units attribute.  Normally, this should
                        be derived from the axis chain, but the direct specification
                        may take precedence if it is not a derived quantity.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-y-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_beam_center_y = SubSection(sub_section=nxf_beam_center_y.m_def,repeats=True,
                    nxp_name='beam_center_y',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-y-field',
                    )
                class nxf_angular_calibration_applied(NXobject):
                    '''
                        True when the angular calibration has been applied in the
                        electronics, false otherwise.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-angular-calibration-applied-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                nxf_angular_calibration_applied = SubSection(sub_section=nxf_angular_calibration_applied.m_def,repeats=True,
                    nxp_name='angular_calibration_applied',
                    nxp_type='NX_BOOLEAN',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-angular-calibration-applied-field',
                    nxp_optional='True',
                    )
                class nxf_angular_calibration(NXobject):
                    '''
Angular calibration data.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-angular-calibration-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_angular_calibration = SubSection(sub_section=nxf_angular_calibration.m_def,repeats=True,
                    nxp_name='angular_calibration',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-angular-calibration-field',
                    nxp_optional='True',
                    )
                class nxf_flatfield_applied(NXobject):
                    '''
                        True when the flat field correction has been applied in the
                        electronics, false otherwise.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-applied-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                nxf_flatfield_applied = SubSection(sub_section=nxf_flatfield_applied.m_def,repeats=True,
                    nxp_name='flatfield_applied',
                    nxp_type='NX_BOOLEAN',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-applied-field',
                    nxp_optional='True',
                    )
                class nxf_flatfield(NXobject):
                    '''
                        Flat field correction data.  If provided, it is recommended
                        that it be compressed.

                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_flatfield = SubSection(sub_section=nxf_flatfield.m_def,repeats=True,
                    nxp_name='flatfield',
                    nxp_type='NX_NUMBER',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-field',
                    nxp_optional='True',
                    )
                class nxf_flatfield_error(NXobject):
                    '''
                        *** Deprecated form.  Use plural form ***
                        Errors of the flat field correction data.  If provided, it is
                        recommended
                        that it be compressed.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-error-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_flatfield_error = SubSection(sub_section=nxf_flatfield_error.m_def,repeats=True,
                    nxp_name='flatfield_error',
                    nxp_type='NX_NUMBER',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-error-field',
                    nxp_optional='True',
                    )
                class nxf_flatfield_errors(NXobject):
                    '''
                        Errors of the flat field correction data.  If provided, it is
                        recommended
                        that it be compressed.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-errors-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_flatfield_errors = SubSection(sub_section=nxf_flatfield_errors.m_def,repeats=True,
                    nxp_name='flatfield_errors',
                    nxp_type='NX_NUMBER',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-errors-field',
                    nxp_optional='True',
                    )
                class nxf_pixel_mask_applied(NXobject):
                    '''
                        True when the pixel mask correction has been applied in the
                        electronics, false otherwise.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-pixel-mask-applied-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                nxf_pixel_mask_applied = SubSection(sub_section=nxf_pixel_mask_applied.m_def,repeats=True,
                    nxp_name='pixel_mask_applied',
                    nxp_type='NX_BOOLEAN',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-pixel-mask-applied-field',
                    nxp_optional='True',
                    )
                class nxf_pixel_mask(NXobject):
                    '''
                        The 32-bit pixel mask for the detector. Can be either one mask
                        for the whole dataset (i.e. an array with indices i, j) or
                        each frame can have its own mask (in which case it would be
                        an array with indices nP, i, j).

                        Contains a bit field for each pixel to signal dead,
                        blind, high or otherwise unwanted or undesirable pixels.
                        They have the following meaning:

                        * bit 0: gap (pixel with no sensor)
                        * bit 1: dead
                        * bit 2: under-responding
                        * bit 3: over-responding
                        * bit 4: noisy
                        * bit 5: -undefined-
                        * bit 6: pixel is part of a cluster of problematic pixels (bit set
                        in addition to others)
                        * bit 7: -undefined-
                        * bit 8: user defined mask (e.g. around beamstop)
                        * bits 9-30: -undefined-
                        * bit 31: virtual pixel (corner pixel with interpolated value)

                        Normal data analysis software would not take pixels into account
                        when a bit in (mask & 0x0000FFFF) is set. Tag bit in the upper
                        two bytes would indicate special pixel properties that normally
                        would not be a sole reason to reject the intensity value (unless
                        lower bits are set.

                        If the full bit depths is not required, providing a
                        mask with fewer bits is permissible.

                        If needed, additional pixel masks can be specified by
                        including additional entries named pixel_mask_N, where
                        N is an integer. For example, a general bad pixel mask
                        could be specified in pixel_mask that indicates noisy
                        and dead pixels, and an additional pixel mask from
                        experiment-specific shadowing could be specified in
                        pixel_mask_2. The cumulative mask is the bitwise OR
                        of pixel_mask and any pixel_mask_N entries.

                        If provided, it is recommended that it be compressed.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-pixel-mask-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_pixel_mask = SubSection(sub_section=nxf_pixel_mask.m_def,repeats=True,
                    nxp_name='pixel_mask',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-pixel-mask-field',
                    )
                class nxf_countrate_correction_applied(NXobject):
                    '''
                        True when a count-rate correction has already been applied in
                        the data recorded here, false otherwise.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-countrate-correction-applied-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                nxf_countrate_correction_applied = SubSection(sub_section=nxf_countrate_correction_applied.m_def,repeats=True,
                    nxp_name='countrate_correction_applied',
                    nxp_type='NX_BOOLEAN',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-countrate-correction-applied-field',
                    nxp_optional='True',
                    )
                class nxf_bit_depth_readout(NXobject):
                    '''
                        How many bits the electronics record per pixel.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-bit-depth-readout-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_bit_depth_readout = SubSection(sub_section=nxf_bit_depth_readout.m_def,repeats=True,
                    nxp_name='bit_depth_readout',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-bit-depth-readout-field',
                    )
                class nxf_detector_readout_time(NXobject):
                    '''
                        Time it takes to read the detector (typically milliseconds).
                        This is important to know for time resolved experiments.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-readout-time-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_detector_readout_time = SubSection(sub_section=nxf_detector_readout_time.m_def,repeats=True,
                    nxp_name='detector_readout_time',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TIME',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-readout-time-field',
                    nxp_optional='True',
                    )
                class nxf_frame_time(NXobject):
                    '''
                        This is time for each frame. This is exposure_time + readout
                        time.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-frame-time-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_frame_time = SubSection(sub_section=nxf_frame_time.m_def,repeats=True,
                    nxp_name='frame_time',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TIME',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-frame-time-field',
                    nxp_optional='True',
                    )
                class nxf_gain_setting(NXobject):
                    '''
                        The gain setting of the detector. This influences background.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-gain-setting-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_gain_setting = SubSection(sub_section=nxf_gain_setting.m_def,repeats=True,
                    nxp_name='gain_setting',
                    nxp_type='NX_CHAR',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-gain-setting-field',
                    nxp_optional='True',
                    )
                class nxf_saturation_value(NXobject):
                    '''
                        The value at which the detector goes into saturation.
                        Data above this value is known to be invalid.

                        For example, given a saturation_value and an underload_value,
                        the valid pixels are those less than or equal to the
                        saturation_value and greater than or equal to the underload_value.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-saturation-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_saturation_value = SubSection(sub_section=nxf_saturation_value.m_def,repeats=True,
                    nxp_name='saturation_value',
                    nxp_type='NX_INT',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-saturation-value-field',
                    nxp_optional='True',
                    )
                class nxf_underload_value(NXobject):
                    '''
                        The lowest value at which pixels for this detector
                        would be reasonably be measured.

                        For example, given a saturation_value and an underload_value,
                        the valid pixels are those less than or equal to the
                        saturation_value and greater than or equal to the underload_value.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-underload-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_underload_value = SubSection(sub_section=nxf_underload_value.m_def,repeats=True,
                    nxp_name='underload_value',
                    nxp_type='NX_INT',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-underload-value-field',
                    nxp_optional='True',
                    )
                class nxf_sensor_material(NXobject):
                    '''
                        At times, radiation is not directly sensed by the detector.
                        Rather, the detector might sense the output from some
                        converter like a scintillator.
                        This is the name of this converter material.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-sensor-material-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_sensor_material = SubSection(sub_section=nxf_sensor_material.m_def,repeats=True,
                    nxp_name='sensor_material',
                    nxp_type='NX_CHAR',
                    nxp_minOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-sensor-material-field',
                    nxp_required='True',
                    )
                class nxf_sensor_thickness(NXobject):
                    '''
                        At times, radiation is not directly sensed by the detector.
                        Rather, the detector might sense the output from some
                        converter like a scintillator. This is the thickness of this
                        converter material.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-sensor-thickness-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_sensor_thickness = SubSection(sub_section=nxf_sensor_thickness.m_def,repeats=True,
                    nxp_name='sensor_thickness',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-sensor-thickness-field',
                    nxp_required='True',
                    )
                class nxf_threshold_energy(NXobject):
                    '''
                        Single photon counter detectors can be adjusted for a certain
                        energy range in which they work optimally. This is the energy
                        setting for this.  If the detector supports multiple thresholds,
                        this is an array.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-threshold-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_threshold_energy = SubSection(sub_section=nxf_threshold_energy.m_def,repeats=True,
                    nxp_name='threshold_energy',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ENERGY',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-threshold-energy-field',
                    nxp_optional='True',
                    )
                class nxf_type(NXobject):
                    '''
                        Description of type such as scintillator,
                        ccd, pixel, image
                        plate, CMOS, ...
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-type-field',
                    nxp_optional='True',
                    )
                class nxg_TRANSFORMATIONS(NXobject):
                    '''
                        Location for axes (transformations) to do with the
                        detector.  In the case of a single-module detector, the
                        axes of the detector axis chain may be stored here.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-transformations-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
                nxg_TRANSFORMATIONS = SubSection(sub_section=nxg_TRANSFORMATIONS.m_def,repeats=True,
                    nxp_type='NXtransformations',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-transformations-group',
                    nxp_optional='True',
                    )
                class nxg_COLLECTION(NXobject):
                    '''
                        Suggested container for detailed non-standard detector
                        information like corrections applied automatically or
                        performance settings.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-collection-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
                nxg_COLLECTION = SubSection(sub_section=nxg_COLLECTION.m_def,repeats=True,
                    nxp_type='NXcollection',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-collection-group',
                    nxp_optional='True',
                    )
                class nxg_DETECTOR_MODULE(NXobject):
                    '''
                        Many detectors consist of multiple smaller modules that are
                        operated in sync and store their data in a common dataset.
                        To allow consistent parsing of the experimental geometry,
                        this application definiton requires all detectors to
                        define a detector module, even if there is only one.

                        This group specifies the hyperslab of data in the data
                        array associated with the detector that contains the
                        data for this module.  If the module is associated with
                        a full data array, rather than with a hyperslab within
                        a larger array, then a single module should be defined,
                        spanning the entire array.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXdetector_module.m_def,repeats=True)
                    class nxf_data_origin(NXobject):
                        '''
                            A dimension-2 or dimension-3 field which gives the indices
                            of the origin of the hyperslab of data for this module in the
                            main area detector image in the parent NXdetector module.

                            The data_origin is 0-based.

                            The frame number dimension (nP) is omitted.  Thus the
                            data_origin field for a dimension-2 dataset with indices (nP,
                            i, j)
                            will be an array with indices (i, j), and for a dimension-3
                            dataset with indices (nP, i, j, k) will be an array with
                            indices
                            (i, j, k).

                            The :ref:`order <Design-ArrayStorageOrder>` of indices (i, j
                            or i, j, k) is slow to fast.
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-origin-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxf_data_origin = SubSection(sub_section=nxf_data_origin.m_def,repeats=True,
                        nxp_name='data_origin',
                        nxp_type='NX_INT',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-origin-field',
                        nxp_required='True',
                        )
                    class nxf_data_size(NXobject):
                        '''
                            Two or three values for the size of the module in pixels in
                            each direction. Dimensionality and order of indices is the
                            same as for data_origin.
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-size-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxf_data_size = SubSection(sub_section=nxf_data_size.m_def,repeats=True,
                        nxp_name='data_size',
                        nxp_type='NX_INT',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-size-field',
                        nxp_required='True',
                        )
                    class nxf_data_stride(NXobject):
                        '''
                            Two or three values for the stride of the module in pixels in
                            each direction.  By default the stride is [1,1] or [1,1,1],
                            and this is the most likely case.  This optional field is
                            included for completeness.
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-stride-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxf_data_stride = SubSection(sub_section=nxf_data_stride.m_def,repeats=True,
                        nxp_name='data_stride',
                        nxp_type='NX_INT',
                        nxp_minOccurs='0',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-stride-field',
                        nxp_optional='True',
                        )
                    class nxf_module_offset(NXobject):
                        '''
                            Offset of the module in regards to the origin of the detector
                            in an
                            arbitrary direction.
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        class nxa_transformation_type(NXobject):
                            '''
                                Obligatory value:    ['translation']

                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-transformation-type-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxa_transformation_type = SubSection(sub_section=nxa_transformation_type.m_def,repeats=True,
                            nxp_name='transformation_type',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-transformation-type-attribute',
                            nxp_required='True',
                            enumeration=['translation'],
                            )
                        class nxa_vector(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-vector-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        nxa_vector = SubSection(sub_section=nxa_vector.m_def,repeats=True,
                            nxp_name='vector',
                            nxp_type='NX_NUMBER',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-vector-attribute',
                            nxp_required='True',
                            )
                        class nxa_offset(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-offset-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        nxa_offset = SubSection(sub_section=nxa_offset.m_def,repeats=True,
                            nxp_name='offset',
                            nxp_type='NX_NUMBER',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-offset-attribute',
                            nxp_required='True',
                            )
                        class nxa_depends_on(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-depends-on-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxa_depends_on = SubSection(sub_section=nxa_depends_on.m_def,repeats=True,
                            nxp_name='depends_on',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-depends-on-attribute',
                            nxp_required='True',
                            )
                    nxf_module_offset = SubSection(sub_section=nxf_module_offset.m_def,repeats=True,
                        nxp_name='module_offset',
                        nxp_units='NX_LENGTH',
                        nxp_type='NX_NUMBER',
                        nxp_minOccurs='0',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-field',
                        nxp_optional='True',
                        )
                    class nxf_fast_pixel_direction(NXobject):
                        '''
                            Values along the direction of :ref:`fastest varying
                            <Design-ArrayStorageOrder>`
                            pixel direction.  The direction itself is given through the
                            vector
                            attribute.
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        class nxa_transformation_type(NXobject):
                            '''
                                Obligatory value:    ['translation']

                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-transformation-type-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxa_transformation_type = SubSection(sub_section=nxa_transformation_type.m_def,repeats=True,
                            nxp_name='transformation_type',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-transformation-type-attribute',
                            nxp_required='True',
                            enumeration=['translation'],
                            )
                        class nxa_vector(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-vector-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        nxa_vector = SubSection(sub_section=nxa_vector.m_def,repeats=True,
                            nxp_name='vector',
                            nxp_type='NX_NUMBER',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-vector-attribute',
                            nxp_required='True',
                            )
                        class nxa_offset(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-offset-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        nxa_offset = SubSection(sub_section=nxa_offset.m_def,repeats=True,
                            nxp_name='offset',
                            nxp_type='NX_NUMBER',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-offset-attribute',
                            nxp_required='True',
                            )
                        class nxa_depends_on(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-depends-on-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxa_depends_on = SubSection(sub_section=nxa_depends_on.m_def,repeats=True,
                            nxp_name='depends_on',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-depends-on-attribute',
                            nxp_required='True',
                            )
                    nxf_fast_pixel_direction = SubSection(sub_section=nxf_fast_pixel_direction.m_def,repeats=True,
                        nxp_name='fast_pixel_direction',
                        nxp_units='NX_LENGTH',
                        nxp_type='NX_NUMBER',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-field',
                        nxp_required='True',
                        )
                    class nxf_slow_pixel_direction(NXobject):
                        '''
                            Values along the direction of :ref:`slowest varying
                            <Design-ArrayStorageOrder>`
                            pixel direction. The direction itself is given through the
                            vector
                            attribute.
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        class nxa_transformation_type(NXobject):
                            '''
                                Obligatory value:    ['translation']

                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-transformation-type-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxa_transformation_type = SubSection(sub_section=nxa_transformation_type.m_def,repeats=True,
                            nxp_name='transformation_type',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-transformation-type-attribute',
                            nxp_required='True',
                            enumeration=['translation'],
                            )
                        class nxa_vector(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-vector-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        nxa_vector = SubSection(sub_section=nxa_vector.m_def,repeats=True,
                            nxp_name='vector',
                            nxp_type='NX_NUMBER',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-vector-attribute',
                            nxp_required='True',
                            )
                        class nxa_offset(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-offset-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        nxa_offset = SubSection(sub_section=nxa_offset.m_def,repeats=True,
                            nxp_name='offset',
                            nxp_type='NX_NUMBER',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-offset-attribute',
                            nxp_required='True',
                            )
                        class nxa_depends_on(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-depends-on-attribute
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxa_depends_on = SubSection(sub_section=nxa_depends_on.m_def,repeats=True,
                            nxp_name='depends_on',
                            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-depends-on-attribute',
                            nxp_required='True',
                            )
                    nxf_slow_pixel_direction = SubSection(sub_section=nxf_slow_pixel_direction.m_def,repeats=True,
                        nxp_name='slow_pixel_direction',
                        nxp_type='NX_NUMBER',
                        nxp_units='NX_LENGTH',
                        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-field',
                        nxp_required='True',
                        )
                nxg_DETECTOR_MODULE = SubSection(sub_section=nxg_DETECTOR_MODULE.m_def,repeats=True,
                    nxp_type='NXdetector_module',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='unbounded',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-group',
                    nxp_required='True',
                    )
            nxg_DETECTOR = SubSection(sub_section=nxg_DETECTOR.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group',
                nxp_required='True',
                )
            class nxg_BEAM(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXbeam.m_def,repeats=True)
                class nxf_incident_wavelength(NXobject):
                    '''
                        In the case of a monchromatic beam this is the scalar
                        wavelength.

                        Several other use cases are permitted, depending on the
                        presence or absence of other incident_wavelength_X
                        fields.

                        In the case of a polychromatic beam this is an array of
                        length **m** of wavelengths, with the relative weights
                        in ``incident_wavelength_weights``.

                        In the case of a monochromatic beam that varies shot-
                        to-shot, this is an array of wavelengths, one for each
                        recorded shot. Here, ``incident_wavelength_weights`` and
                        incident_wavelength_spread are not set.

                        In the case of a polychromatic beam that varies shot-to-
                        shot, this is an array of length **m** with the relative
                        weights in ``incident_wavelength_weights`` as a 2D array.

                        In the case of a polychromatic beam that varies shot-to-
                        shot and where the channels also vary, this is a 2D array
                        of dimensions **nP** by **m** (slow to fast) with the
                        relative weights in ``incident_wavelength_weights`` as a 2D
                        array.

                        Note, :ref:`variants <Design-Variants>` are a good way
                        to represent several of these use cases in a single dataset,
                        e.g. if a calibrated, single-value wavelength value is
                        available along with the original spectrum from which it
                        was calibrated.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_incident_wavelength = SubSection(sub_section=nxf_incident_wavelength.m_def,repeats=True,
                    nxp_name='incident_wavelength',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_WAVELENGTH',
                    nxp_minOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-field',
                    nxp_required='True',
                    )
                class nxf_incident_wavelength_weight(NXobject):
                    '''
                        In the case of a polychromatic beam this is an array of
                        length **m** of the relative weights of the corresponding
                        wavelengths in incident_wavelength.

                        In the case of a polychromatic beam that varies shot-to-
                        shot, this is a 2D array of dimensions **nP** by **m**
                        (slow to fast) of the relative weights of the
                        corresponding wavelengths in incident_wavelength.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-weight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_incident_wavelength_weight = SubSection(sub_section=nxf_incident_wavelength_weight.m_def,repeats=True,
                    nxp_name='incident_wavelength_weight',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='0',
                    deprecated=''' DEPRECATED:
                    use incident_wavelength_weights, see https://github.com/nexusformat/definitions/issues/837
                    ''',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-weight-field',
                    nxp_optional='True',
                    )
                class nxf_incident_wavelength_weights(NXobject):
                    '''
                        In the case of a polychromatic beam this is an array of
                        length **m** of the relative weights of the corresponding
                        wavelengths in ``incident_wavelength``.

                        In the case of a polychromatic beam that varies shot-to-
                        shot, this is a 2D array of dimensions **np** by **m**
                        (slow to fast) of the relative weights of the
                        corresponding wavelengths in ``incident_wavelength``.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-weights-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_incident_wavelength_weights = SubSection(sub_section=nxf_incident_wavelength_weights.m_def,repeats=True,
                    nxp_name='incident_wavelength_weights',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-weights-field',
                    nxp_optional='True',
                    )
                class nxf_incident_wavelength_spread(NXobject):
                    '''
                        The wavelength spread FWHM for the corresponding
                        wavelength(s) in incident_wavelength.

                        In the case of shot-to-shot variation in the wavelength
                        spread, this is a 2D array of dimension **nP** by
                        **m** (slow to fast) of the spreads of the
                        corresponding wavelengths in incident_wavelength.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-spread-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_incident_wavelength_spread = SubSection(sub_section=nxf_incident_wavelength_spread.m_def,repeats=True,
                    nxp_name='incident_wavelength_spread',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_WAVELENGTH',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-spread-field',
                    nxp_optional='True',
                    )
                class nxf_flux(NXobject):
                    '''
                        Flux density incident on beam plane area in photons
                        per second per unit area.

                        In the case of a beam that varies in flux shot-to-shot,
                        this is an array of values, one for each recorded shot.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-flux-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_flux = SubSection(sub_section=nxf_flux.m_def,repeats=True,
                    nxp_name='flux',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_FLUX',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-flux-field',
                    nxp_optional='True',
                    )
                class nxf_total_flux(NXobject):
                    '''
                        Flux incident on beam plane in photons per second.

                        In the case of a beam that varies in total flux shot-to-shot,
                        this is an array of values, one for each recorded shot.
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-total-flux-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_total_flux = SubSection(sub_section=nxf_total_flux.m_def,repeats=True,
                    nxp_name='total_flux',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_FREQUENCY',
                    nxp_minOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-total-flux-field',
                    nxp_required='True',
                    )
                class nxf_incident_beam_size(NXobject):
                    '''
                        Two-element array of FWHM (if Gaussian or Airy function) or
                        diameters (if top hat) or widths (if rectangular) of the beam
                        in the order x, y
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-beam-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_incident_beam_size = SubSection(sub_section=nxf_incident_beam_size.m_def,repeats=True,
                    nxp_name='incident_beam_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-beam-size-field',
                    )
                class nxf_profile(NXobject):
                    '''
                        The beam profile, Gaussian, Airy function, top-hat or
                        rectangular.  The profile is given in the plane of
                        incidence of the beam on the sample.
                        Possible values:    ['Gaussian','Airy','top-hat','rectangular']

                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-profile-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_profile = SubSection(sub_section=nxf_profile.m_def,repeats=True,
                    nxp_name='profile',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-profile-field',
                    enumeration=['Gaussian','Airy','top-hat','rectangular'],
                    )
                class nxf_incident_polarisation_stokes(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-polarisation-stokes-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_incident_polarisation_stokes = SubSection(sub_section=nxf_incident_polarisation_stokes.m_def,repeats=True,
                    nxp_name='incident_polarisation_stokes',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-polarisation-stokes-field',
                    )
                class nxg_incident_wavelength_spectrum(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-spectrum-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
                nxg_incident_wavelength_spectrum = SubSection(sub_section=nxg_incident_wavelength_spectrum.m_def,repeats=True,
                    nxp_name='incident_wavelength_spectrum',
                    nxp_type='NXdata',
                    nxp_minOccurs='0',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-spectrum-group',
                    nxp_optional='True',
                    )
            nxg_BEAM = SubSection(sub_section=nxg_BEAM.m_def,repeats=True,
                nxp_type='NXbeam',
                nxp_minOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SOURCE(NXobject):
            '''
                The neutron or x-ray storage ring/facility. Note, the NXsource base class
                has many more fields available, but at present we only require the name.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
                    Name of source.  Consistency with the naming in
                    https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_diffrn_source.pdbx_synchrotron_site.html
                    controlled vocabulary is highly recommended.
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                class nxa_short_name(NXobject):
                    '''
short name for source, perhaps the acronym
                        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-name-short-name-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_short_name = SubSection(sub_section=nxa_short_name.m_def,repeats=True,
                    nxp_name='short_name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-name-short-name-attribute',
                    nxp_optional='True',
                    )
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_minOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-name-field',
                nxp_required='True',
                )
        nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
            nxp_type='NXsource',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-group',
        nxp_required='True',
        )

class NXspe(NXobject):
    '''
NXSPE Inelastic Format.  Application definition for NXSPE file format.
        https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXspe',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_program_name(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-program-name-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_program_name = SubSection(sub_section=nxf_program_name.m_def,repeats=True,
            nxp_name='program_name',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-program-name-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms.  Possible values:
                ['NXSPE','NXspe']

                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            class nxa_version(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-definition-version-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
                nxp_name='version',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-definition-version-attribute',
                nxp_required='True',
                )
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-definition-field',
            nxp_required='True',
            enumeration=['NXSPE','NXspe'],
            )
        class nxg_NXSPE_info(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
            class nxf_fixed_energy(NXobject):
                '''
The fixed energy used for this file.
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-fixed-energy-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_fixed_energy = SubSection(sub_section=nxf_fixed_energy.m_def,repeats=True,
                nxp_name='fixed_energy',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ENERGY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-fixed-energy-field',
                nxp_required='True',
                )
            class nxf_ki_over_kf_scaling(NXobject):
                '''
Indicates whether ki/kf scaling has been applied or not.
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-ki-over-kf-scaling-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
            nxf_ki_over_kf_scaling = SubSection(sub_section=nxf_ki_over_kf_scaling.m_def,repeats=True,
                nxp_name='ki_over_kf_scaling',
                nxp_type='NX_BOOLEAN',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-ki-over-kf-scaling-field',
                nxp_required='True',
                )
            class nxf_psi(NXobject):
                '''
Orientation angle as expected in DCS-MSlice
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-psi-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_psi = SubSection(sub_section=nxf_psi.m_def,repeats=True,
                nxp_name='psi',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-psi-field',
                nxp_required='True',
                )
        nxg_NXSPE_info = SubSection(sub_section=nxg_NXSPE_info.m_def,repeats=True,
            nxp_type='NXcollection',
            nxp_name='NXSPE_info',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            class nxf_azimuthal(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-azimuthal-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_azimuthal = SubSection(sub_section=nxf_azimuthal.m_def,repeats=True,
                nxp_name='azimuthal',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-azimuthal-field',
                nxp_required='True',
                )
            class nxf_azimuthal_width(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-azimuthal-width-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_azimuthal_width = SubSection(sub_section=nxf_azimuthal_width.m_def,repeats=True,
                nxp_name='azimuthal_width',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-azimuthal-width-field',
                nxp_required='True',
                )
            class nxf_polar(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-polar-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_polar = SubSection(sub_section=nxf_polar.m_def,repeats=True,
                nxp_name='polar',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-polar-field',
                nxp_required='True',
                )
            class nxf_polar_width(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-polar-width-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_polar_width = SubSection(sub_section=nxf_polar_width.m_def,repeats=True,
                nxp_name='polar_width',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-polar-width-field',
                nxp_required='True',
                )
            class nxf_distance(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-distance-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                nxp_name='distance',
                nxp_type='NX_FLOAT',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-distance-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-data-field',
                nxp_required='True',
                )
            class nxf_error(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-error-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_error = SubSection(sub_section=nxf_error.m_def,repeats=True,
                nxp_name='error',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-error-field',
                nxp_required='True',
                )
            class nxf_energy(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-energy-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                nxp_name='energy',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ENERGY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-energy-field',
                nxp_required='True',
                )
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-group',
            nxp_required='True',
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-name-field',
                nxp_required='True',
                )
            class nxg_FERMI_CHOPPER(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-fermi-chopper-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXfermi_chopper.m_def,repeats=True)
                class nxf_energy(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-fermi-chopper-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                    nxp_name='energy',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_ENERGY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-fermi-chopper-energy-field',
                    nxp_required='True',
                    )
            nxg_FERMI_CHOPPER = SubSection(sub_section=nxg_FERMI_CHOPPER.m_def,repeats=True,
                nxp_type='NXfermi_chopper',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-fermi-chopper-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_rotation_angle(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_NUMBER',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
            class nxf_seblock(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-seblock-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_seblock = SubSection(sub_section=nxf_seblock.m_def,repeats=True,
                nxp_name='seblock',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-seblock-field',
                nxp_required='True',
                )
            class nxf_temperature(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-temperature-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
                nxp_name='temperature',
                nxp_type='NX_NUMBER',
                nxp_units='NX_TEMPERATURE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-temperature-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-group',
        nxp_required='True',
        )

class NXarchive(NXobject):
    '''
        This is a definition for data to be archived by ICAT
        (http://www.icatproject.org/).                  .. text from the icatproject.org
        site                          the database (with supporting software) that
        provides an                  interface to all ISIS experimental data and will
        provide                  a mechanism to link all aspects of ISIS research from
        proposal through to publication.
        https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXarchive',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_index(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-index-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_index = SubSection(sub_section=nxa_index.m_def,repeats=True,
            nxp_name='index',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-index-attribute',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-title-field',
            nxp_required='True',
            )
        class nxf_experiment_identifier(NXobject):
            '''
unique identifier for the experiment
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-experiment-identifier-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_experiment_identifier = SubSection(sub_section=nxf_experiment_identifier.m_def,repeats=True,
            nxp_name='experiment_identifier',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-experiment-identifier-field',
            nxp_required='True',
            )
        class nxf_experiment_description(NXobject):
            '''
Brief description of the experiment and its objectives
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-experiment-description-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_experiment_description = SubSection(sub_section=nxf_experiment_description.m_def,repeats=True,
            nxp_name='experiment_description',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-experiment-description-field',
            nxp_required='True',
            )
        class nxf_collection_identifier(NXobject):
            '''
ID of user or DAQ define group of data files
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-identifier-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_collection_identifier = SubSection(sub_section=nxf_collection_identifier.m_def,repeats=True,
            nxp_name='collection_identifier',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-identifier-field',
            nxp_required='True',
            )
        class nxf_collection_description(NXobject):
            '''
Brief summary of the collection, including grouping criteria
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-description-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_collection_description = SubSection(sub_section=nxf_collection_description.m_def,repeats=True,
            nxp_name='collection_description',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-description-field',
            nxp_required='True',
            )
        class nxf_entry_identifier(NXobject):
            '''
unique identifier for this measurement as provided by the facility
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-entry-identifier-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_entry_identifier = SubSection(sub_section=nxf_entry_identifier.m_def,repeats=True,
            nxp_name='entry_identifier',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-entry-identifier-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-end-time-field',
            nxp_required='True',
            )
        class nxf_duration(NXobject):
            '''
TODO: needs documentation
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-duration-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
            nxp_name='duration',
            nxp_type='NX_FLOAT',
            nxp_units='NX_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-duration-field',
            nxp_required='True',
            )
        class nxf_collection_time(NXobject):
            '''
TODO: needs documentation
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_collection_time = SubSection(sub_section=nxf_collection_time.m_def,repeats=True,
            nxp_name='collection_time',
            nxp_type='NX_FLOAT',
            nxp_units='NX_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-time-field',
            nxp_required='True',
            )
        class nxf_run_cycle(NXobject):
            '''
TODO: needs documentation
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-run-cycle-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_run_cycle = SubSection(sub_section=nxf_run_cycle.m_def,repeats=True,
            nxp_name='run_cycle',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-run-cycle-field',
            nxp_required='True',
            )
        class nxf_revision(NXobject):
            '''
revision ID of this file, may be after recalibration, reprocessing etc.
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-revision-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_revision = SubSection(sub_section=nxf_revision.m_def,repeats=True,
            nxp_name='revision',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-revision-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXarchive']

                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-definition-field',
            nxp_required='True',
            enumeration=['NXarchive'],
            )
        class nxf_program(NXobject):
            '''
The program and version used for generating this file
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-program-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            class nxa_version(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-program-version-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_version = SubSection(sub_section=nxa_version.m_def,repeats=True,
                nxp_name='version',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-program-version-attribute',
                nxp_required='True',
                )
        nxf_program = SubSection(sub_section=nxf_program.m_def,repeats=True,
            nxp_name='program',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-program-field',
            nxp_required='True',
            )
        class nxf_release_date(NXobject):
            '''
when this file is to be released into PD
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-release-date-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_release_date = SubSection(sub_section=nxf_release_date.m_def,repeats=True,
            nxp_name='release_date',
            nxp_type='NX_CHAR',
            nxp_units='NX_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-release-date-field',
            nxp_required='True',
            )
        class nxg_user(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-name-field',
                nxp_required='True',
                )
            class nxf_role(NXobject):
                '''
role of the user
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-role-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_role = SubSection(sub_section=nxf_role.m_def,repeats=True,
                nxp_name='role',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-role-field',
                nxp_required='True',
                )
            class nxf_facility_user_id(NXobject):
                '''
ID of the user in the facility burocracy database
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-facility-user-id-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_facility_user_id = SubSection(sub_section=nxf_facility_user_id.m_def,repeats=True,
                nxp_name='facility_user_id',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-facility-user-id-field',
                nxp_required='True',
                )
        nxg_user = SubSection(sub_section=nxg_user.m_def,repeats=True,
            nxp_type='NXuser',
            nxp_name='user',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-group',
            nxp_required='True',
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-name-field',
                nxp_required='True',
                )
            class nxf_description(NXobject):
                '''
Brief description of the instrument
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-description-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                nxp_name='description',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-description-field',
                nxp_required='True',
                )
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        Possible values:    ['Spallation Neutron Source','Pulsed Reactor
                        Neutron Source','Reactor Neutron Source','Synchrotron X-Ray
                        Source','Pulsed Muon Source','Rotating Anode X-Ray','Fixed Tube
                        X-Ray']

                        https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-type-field',
                    nxp_required='True',
                    enumeration=['Spallation Neutron Source','Pulsed Reactor Neutron Source','Reactor Neutron Source','Synchrotron X-Ray Source','Pulsed Muon Source','Rotating Anode X-Ray','Fixed Tube X-Ray'],
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray','electron']

                        https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray','electron'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_sample_id(NXobject):
                '''
Unique database id of the sample
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-sample-id-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_sample_id = SubSection(sub_section=nxf_sample_id.m_def,repeats=True,
                nxp_name='sample_id',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-sample-id-field',
                nxp_required='True',
                )
            class nxf_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-description-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                nxp_name='description',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-description-field',
                nxp_required='True',
                )
            class nxf_type(NXobject):
                '''
                    Possible values:    ['sample','sample+can','calibration
                    sample','normalisation sample','simulated
                    data','none','sample_environment']

                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-type-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                nxp_name='type',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-type-field',
                nxp_required='True',
                enumeration=['sample','sample+can','calibration sample','normalisation sample','simulated data','none','sample_environment'],
                )
            class nxf_chemical_formula(NXobject):
                '''
Chemical formula formatted according to CIF conventions
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-chemical-formula-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_chemical_formula = SubSection(sub_section=nxf_chemical_formula.m_def,repeats=True,
                nxp_name='chemical_formula',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-chemical-formula-field',
                nxp_required='True',
                )
            class nxf_preparation_date(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-preparation-date-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_preparation_date = SubSection(sub_section=nxf_preparation_date.m_def,repeats=True,
                nxp_name='preparation_date',
                nxp_type='NX_CHAR',
                nxp_units='NX_TIME',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-preparation-date-field',
                nxp_required='True',
                )
            class nxf_situation(NXobject):
                '''
                    Description of the environment the sample is in:
                    air, vacuum, oxidizing atmosphere, dehydrated, etc.
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-situation-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_situation = SubSection(sub_section=nxf_situation.m_def,repeats=True,
                nxp_name='situation',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-situation-field',
                nxp_required='True',
                )
            class nxf_temperature(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-temperature-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
                nxp_name='temperature',
                nxp_type='NX_FLOAT',
                nxp_units='NX_TEMPERATURE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-temperature-field',
                nxp_required='True',
                )
            class nxf_magnetic_field(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-magnetic-field-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_magnetic_field = SubSection(sub_section=nxf_magnetic_field.m_def,repeats=True,
                nxp_name='magnetic_field',
                nxp_type='NX_FLOAT',
                nxp_units='NX_CURRENT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-magnetic-field-field',
                nxp_required='True',
                )
            class nxf_electric_field(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-electric-field-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_electric_field = SubSection(sub_section=nxf_electric_field.m_def,repeats=True,
                nxp_name='electric_field',
                nxp_type='NX_FLOAT',
                nxp_units='NX_VOLTAGE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-electric-field-field',
                nxp_required='True',
                )
            class nxf_stress_field(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-stress-field-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_stress_field = SubSection(sub_section=nxf_stress_field.m_def,repeats=True,
                nxp_name='stress_field',
                nxp_type='NX_FLOAT',
                nxp_units='NX_UNITLESS',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-stress-field-field',
                nxp_required='True',
                )
            class nxf_pressure(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-pressure-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_pressure = SubSection(sub_section=nxf_pressure.m_def,repeats=True,
                nxp_name='pressure',
                nxp_type='NX_FLOAT',
                nxp_units='NX_PRESSURE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-pressure-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-group',
        nxp_required='True',
        )

class NXmonopd(NXobject):
    '''
        Monochromatic Neutron and X-Ray Powder diffractometer                   Instrument
        definition for a powder diffractometer at a monochromatic neutron          or
        X-ray beam. This is both suited for a powder diffractometer          with a single
        detector or a powder diffractometer with a position          sensitive detector.
        https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXmonopd',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXmonopd']

                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-definition-field',
            nxp_required='True',
            enumeration=['NXmonopd'],
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray','electron']

                        https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray','electron'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_CRYSTAL(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-crystal-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                class nxf_wavelength(NXobject):
                    '''
Optimum diffracted wavelength
                        https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-crystal-wavelength-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
                    nxp_name='wavelength',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_WAVELENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-crystal-wavelength-field',
                    nxp_required='True',
                    )
            nxg_CRYSTAL = SubSection(sub_section=nxg_CRYSTAL.m_def,repeats=True,
                nxp_type='NXcrystal',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-crystal-group',
                nxp_required='True',
                )
            class nxg_DETECTOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_polar_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_axis='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_data(NXobject):
                    '''
                        detector signal (usually counts) are already
                        corrected for detector efficiency
                        https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
            nxg_DETECTOR = SubSection(sub_section=nxg_DETECTOR.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_rotation_angle(NXobject):
                '''
                    Optional rotation angle for the case when the powder diagram
                    has been obtained through an omega-2theta scan like from a
                    traditional single detector powder diffractometer
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-group',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time (timer)
                    or received monitor counts (monitor).                   Possible
                    values:    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-preset-field',
                nxp_required='True',
                )
            class nxf_integral(NXobject):
                '''
Total integral monitor counts
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-integral-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_integral = SubSection(sub_section=nxf_integral.m_def,repeats=True,
                nxp_name='integral',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-integral-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-group',
        nxp_required='True',
        )

class NXtofnpd(NXobject):
    '''
This is a application definition for raw data from a TOF neutron powder
        diffractometer
        https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXtofnpd',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXtofnpd']

                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-definition-field',
            nxp_required='True',
            enumeration=['NXtofnpd'],
            )
        class nxf_pre_sample_flightpath(NXobject):
            '''
                This is the flight path before the sample position. This can be determined
                by a chopper,         by the moderator or the source itself. In other
                words: it the distance to the component         which gives the T0 signal
                to the detector electronics. If another component in the
                NXinstrument hierarchy provides this information, this should be a link.
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-pre-sample-flightpath-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_pre_sample_flightpath = SubSection(sub_section=nxf_pre_sample_flightpath.m_def,repeats=True,
            nxp_name='pre_sample_flightpath',
            nxp_type='NX_FLOAT',
            nxp_units='NX_LENGTH',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-pre-sample-flightpath-field',
            nxp_required='True',
            )
        class nxg_user(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-user-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-user-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-user-name-field',
                nxp_required='True',
                )
        nxg_user = SubSection(sub_section=nxg_user.m_def,repeats=True,
            nxp_type='NXuser',
            nxp_name='user',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-user-group',
            nxp_required='True',
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_detector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_detector_number(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-detector-number-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_detector_number = SubSection(sub_section=nxf_detector_number.m_def,repeats=True,
                    nxp_name='detector_number',
                    nxp_type='NX_INT',
                    nxp_axis='2',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-detector-number-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
distance to sample for each detector
                        https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-distance-field',
                    nxp_required='True',
                    )
                class nxf_time_of_flight(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-time-of-flight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                    nxp_name='time_of_flight',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TIME_OF_FLIGHT',
                    nxp_axis='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-time-of-flight-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
polar angle for each detector element
                        https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_azimuthal_angle(NXobject):
                    '''
azimuthal angle for each detector element
                        https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-azimuthal-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
                    nxp_name='azimuthal_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-azimuthal-angle-field',
                    nxp_required='True',
                    )
            nxg_detector = SubSection(sub_section=nxg_detector.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-sample-name-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-sample-group',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time (timer)
                    or received monitor counts (monitor).             Possible values:
                    ['monitor','timer']

                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
preset value for time or monitor
                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-preset-field',
                nxp_required='True',
                )
            class nxf_distance(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-distance-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                nxp_name='distance',
                nxp_type='NX_FLOAT',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-distance-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_INT',
                nxp_signal='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-data-field',
                nxp_required='True',
                )
            class nxf_time_of_flight(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-time-of-flight-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                nxp_name='time_of_flight',
                nxp_type='NX_FLOAT',
                nxp_units='NX_TIME_OF_FLIGHT',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-time-of-flight-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-group',
        nxp_required='True',
        )

class NXtomophase(NXobject):
    '''
        This is the application definition for x-ray or neutron tomography raw data with
        phase contrast variation at each point.               In tomography first
        some dark field images are measured, some bright field images and, of course the
        sample. In order        to properly sort the order of the images taken, a sequence
        number is stored with each image.
        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXtomophase',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-end-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXtomophase']

                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-definition-field',
            nxp_required='True',
            enumeration=['NXtomophase'],
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Possible values:    ['neutron','x-ray','electron']

                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['neutron','x-ray','electron'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_bright_field(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-data-field',
                    nxp_required='True',
                    )
                class nxf_sequence_number(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-sequence-number-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_sequence_number = SubSection(sub_section=nxf_sequence_number.m_def,repeats=True,
                    nxp_name='sequence_number',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-sequence-number-field',
                    nxp_required='True',
                    )
            nxg_bright_field = SubSection(sub_section=nxg_bright_field.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='bright_field',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-group',
                nxp_required='True',
                )
            class nxg_dark_field(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-data-field',
                    nxp_required='True',
                    )
                class nxf_sequence_number(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-sequence-number-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_sequence_number = SubSection(sub_section=nxf_sequence_number.m_def,repeats=True,
                    nxp_name='sequence_number',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-sequence-number-field',
                    nxp_required='True',
                    )
            nxg_dark_field = SubSection(sub_section=nxg_dark_field.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='dark_field',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-group',
                nxp_required='True',
                )
            class nxg_sample(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-data-field',
                    nxp_required='True',
                    )
                class nxf_sequence_number(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-sequence-number-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_sequence_number = SubSection(sub_section=nxf_sequence_number.m_def,repeats=True,
                    nxp_name='sequence_number',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-sequence-number-field',
                    nxp_required='True',
                    )
                class nxf_x_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-x-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_size = SubSection(sub_section=nxf_x_pixel_size.m_def,repeats=True,
                    nxp_name='x_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-x-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_y_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-y-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_pixel_size = SubSection(sub_section=nxf_y_pixel_size.m_def,repeats=True,
                    nxp_name='y_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-y-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
Distance between detector and sample
                        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-distance-field',
                    nxp_required='True',
                    )
            nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='sample',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-group',
                nxp_required='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_rotation_angle(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-rotation-angle-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_rotation_angle = SubSection(sub_section=nxf_rotation_angle.m_def,repeats=True,
                nxp_name='rotation_angle',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANGLE',
                nxp_axis='1',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-rotation-angle-field',
                nxp_required='True',
                )
            class nxf_x_translation(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-x-translation-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_x_translation = SubSection(sub_section=nxf_x_translation.m_def,repeats=True,
                nxp_name='x_translation',
                nxp_units='NX_LENGTH',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-x-translation-field',
                nxp_required='True',
                )
            class nxf_y_translation(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-y-translation-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_y_translation = SubSection(sub_section=nxf_y_translation.m_def,repeats=True,
                nxp_name='y_translation',
                nxp_units='NX_LENGTH',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-y-translation-field',
                nxp_required='True',
                )
            class nxf_z_translation(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-z-translation-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_z_translation = SubSection(sub_section=nxf_z_translation.m_def,repeats=True,
                nxp_name='z_translation',
                nxp_units='NX_LENGTH',
                nxp_type='NX_FLOAT',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-z-translation-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-group',
            nxp_required='True',
            )
        class nxg_control(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-control-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_integral(NXobject):
                '''
                    Total integral monitor counts for each measured frame. Allows a
                    correction for           fluctuations in the beam between frames.
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-control-integral-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_integral = SubSection(sub_section=nxf_integral.m_def,repeats=True,
                nxp_name='integral',
                nxp_type='NX_FLOAT',
                nxp_units='NX_ANY',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-control-integral-field',
                nxp_required='True',
                )
        nxg_control = SubSection(sub_section=nxg_control.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_name='control',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-control-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_name='data',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-data-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-group',
        nxp_required='True',
        )

class NXarpes(NXobject):
    '''
        This is an application definition for angular resolved photo electron
        spectroscopy.          It has been drawn up with hemispherical electron analysers
        in mind.
        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXarpes',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_entry(NXobject):
            '''
                NeXus convention is to use "entry1", "entry2", ...          for analysis
                software to locate each entry.
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-entry-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_entry = SubSection(sub_section=nxa_entry.m_def,repeats=True,
            nxp_name='entry',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-entry-attribute',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms.  Obligatory value:
                ['NXarpes']

                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-definition-field',
            nxp_required='True',
            enumeration=['NXarpes'],
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_SOURCE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-type-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        Obligatory value:    ['x-ray']

                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-probe-field',
                    nxp_required='True',
                    enumeration=['x-ray'],
                    )
            nxg_SOURCE = SubSection(sub_section=nxg_SOURCE.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-group',
                nxp_required='True',
                )
            class nxg_monochromator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-monochromator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                class nxf_energy(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-monochromator-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                    nxp_name='energy',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_ENERGY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-monochromator-energy-field',
                    nxp_required='True',
                    )
            nxg_monochromator = SubSection(sub_section=nxg_monochromator.m_def,repeats=True,
                nxp_type='NXmonochromator',
                nxp_name='monochromator',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-monochromator-group',
                nxp_required='True',
                )
            class nxg_analyser(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_NUMBER',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-data-field',
                    nxp_required='True',
                    )
                class nxf_lens_mode(NXobject):
                    '''
setting for the electron analyser lens
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-lens-mode-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_lens_mode = SubSection(sub_section=nxf_lens_mode.m_def,repeats=True,
                    nxp_name='lens_mode',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-lens-mode-field',
                    nxp_required='True',
                    )
                class nxf_acquisition_mode(NXobject):
                    '''
                        Possible values:    ['swept','fixed']

                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-acquisition-mode-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_acquisition_mode = SubSection(sub_section=nxf_acquisition_mode.m_def,repeats=True,
                    nxp_name='acquisition_mode',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-acquisition-mode-field',
                    nxp_required='True',
                    enumeration=['swept','fixed'],
                    )
                class nxf_entrance_slit_shape(NXobject):
                    '''
                        Possible values:    ['curved','straight']

                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-shape-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_entrance_slit_shape = SubSection(sub_section=nxf_entrance_slit_shape.m_def,repeats=True,
                    nxp_name='entrance_slit_shape',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-shape-field',
                    nxp_required='True',
                    enumeration=['curved','straight'],
                    )
                class nxf_entrance_slit_setting(NXobject):
                    '''
dial setting of the entrance slit
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-setting-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_entrance_slit_setting = SubSection(sub_section=nxf_entrance_slit_setting.m_def,repeats=True,
                    nxp_name='entrance_slit_setting',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_ANY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-setting-field',
                    nxp_required='True',
                    )
                class nxf_entrance_slit_size(NXobject):
                    '''
size of the entrance slit
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_entrance_slit_size = SubSection(sub_section=nxf_entrance_slit_size.m_def,repeats=True,
                    nxp_name='entrance_slit_size',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-size-field',
                    nxp_required='True',
                    )
                class nxf_pass_energy(NXobject):
                    '''
energy of the electrons on the mean path of the analyser
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-pass-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_pass_energy = SubSection(sub_section=nxf_pass_energy.m_def,repeats=True,
                    nxp_name='pass_energy',
                    nxp_units='NX_ENERGY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-pass-energy-field',
                    nxp_required='True',
                    )
                class nxf_time_per_channel(NXobject):
                    '''
todo: define more clearly
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-time-per-channel-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_time_per_channel = SubSection(sub_section=nxf_time_per_channel.m_def,repeats=True,
                    nxp_name='time_per_channel',
                    nxp_units='NX_TIME',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-time-per-channel-field',
                    nxp_required='True',
                    )
                class nxf_angles(NXobject):
                    '''
                        Angular axis of the analyser data             which dimension the
                        axis applies to is defined             using the normal NXdata
                        methods.
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-angles-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_angles = SubSection(sub_section=nxf_angles.m_def,repeats=True,
                    nxp_name='angles',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-angles-field',
                    nxp_required='True',
                    )
                class nxf_energies(NXobject):
                    '''
                        Energy axis of the analyser data             which dimension the
                        axis applies to is defined             using the normal NXdata
                        methods.
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-energies-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxf_energies = SubSection(sub_section=nxf_energies.m_def,repeats=True,
                    nxp_name='energies',
                    nxp_type='NX_NUMBER',
                    nxp_units='NX_ENERGY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-energies-field',
                    nxp_required='True',
                    )
                class nxf_sensor_size(NXobject):
                    '''
number of raw active elements in each dimension
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-sensor-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_sensor_size = SubSection(sub_section=nxf_sensor_size.m_def,repeats=True,
                    nxp_name='sensor_size',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-sensor-size-field',
                    nxp_required='True',
                    )
                class nxf_region_origin(NXobject):
                    '''
origin of rectangular region selected for readout
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-region-origin-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_region_origin = SubSection(sub_section=nxf_region_origin.m_def,repeats=True,
                    nxp_name='region_origin',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-region-origin-field',
                    nxp_required='True',
                    )
                class nxf_region_size(NXobject):
                    '''
size of rectangular region selected for readout
                        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-region-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_region_size = SubSection(sub_section=nxf_region_size.m_def,repeats=True,
                    nxp_name='region_size',
                    nxp_type='NX_INT',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-region-size-field',
                    nxp_required='True',
                    )
            nxg_analyser = SubSection(sub_section=nxg_analyser.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='analyser',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-group',
                nxp_required='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_SAMPLE(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_type='NX_CHAR',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_temperature(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-temperature-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
                nxp_name='temperature',
                nxp_type='NX_NUMBER',
                nxp_units='NX_TEMPERATURE',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-temperature-field',
                nxp_required='True',
                )
        nxg_SAMPLE = SubSection(sub_section=nxg_SAMPLE.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-data-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-group',
        nxp_required='True',
        )

class NXdirecttof(NXtofraw):
    '''
This is an application definition for raw data from a generic TOF instrument
        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXdirecttof',
        nxp_extends='NXtofraw',
        nxp_type='group',
        nxp_category='application',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof',
        nxp_required='True',
        )
    class nxg_entry(NXobject):
        '''
            https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-title-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this file conforms   Obligatory value:
                ['NXdirecttof']

                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-definition-field',
            nxp_required='True',
            enumeration=['NXdirecttof'],
            )
        class nxg_INSTRUMENT(NXobject):
            '''
                We definitly want the rotation_speed and energy of the chopper. Thus
                either            a fermi_chopper or a disk_chopper group is required.
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_fermi_chopper(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXfermi_chopper.m_def,repeats=True)
                class nxf_rotation_speed(NXobject):
                    '''
chopper rotation speed
                        https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-rotation-speed-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_rotation_speed = SubSection(sub_section=nxf_rotation_speed.m_def,repeats=True,
                    nxp_name='rotation_speed',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_FREQUENCY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-rotation-speed-field',
                    nxp_required='True',
                    )
                class nxf_energy(NXobject):
                    '''
energy selected
                        https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                    nxp_name='energy',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ENERGY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-energy-field',
                    nxp_required='True',
                    )
            nxg_fermi_chopper = SubSection(sub_section=nxg_fermi_chopper.m_def,repeats=True,
                nxp_type='NXfermi_chopper',
                nxp_name='fermi_chopper',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-group',
                nxp_optional='True',
                )
            class nxg_disk_chopper(NXobject):
                '''
                    https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdisk_chopper.m_def,repeats=True)
                class nxf_rotation_speed(NXobject):
                    '''
chopper rotation speed
                        https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-rotation-speed-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_rotation_speed = SubSection(sub_section=nxf_rotation_speed.m_def,repeats=True,
                    nxp_name='rotation_speed',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_FREQUENCY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-rotation-speed-field',
                    nxp_required='True',
                    )
                class nxf_energy(NXobject):
                    '''
energy selected
                        https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                    nxp_name='energy',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ENERGY',
                    nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-energy-field',
                    nxp_required='True',
                    )
            nxg_disk_chopper = SubSection(sub_section=nxg_disk_chopper.m_def,repeats=True,
                nxp_type='NXdisk_chopper',
                nxp_name='disk_chopper',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-group',
                nxp_optional='True',
                )
        nxg_INSTRUMENT = SubSection(sub_section=nxg_INSTRUMENT.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-group',
            nxp_required='True',
            )
    nxg_entry = SubSection(sub_section=nxg_entry.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry',
        nxp_documentation='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-group',
        nxp_required='True',
        )

class NXspecdata(NXobject):
    '''
        DEPRECATED: This definition will be removed by 2022.  Not for new use.

        Data collected by SPEC control and data acquisition software

        SPEC [#]_ is software for instrument control       and data acquisition in X-ray
        diffraction experiments.              .. [#] SPEC: https://certif.com
        https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXspecdata',
        nxp_extends='NXobject',
        nxp_type='group',
        nxp_category='contributed',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            one scan from a SPEC data file, starts with a **#S** line
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxa_default(NXobject):
            '''
                .. index:: plotting
                Declares which :ref:`NXdata` group                          contains the
                data to be shown by default.                         It is needed to
                resolve ambiguity when more than one :ref:`NXdata` group exists.
                The value is the name of the default :ref:`NXdata` group.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-default-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
            nxp_name='default',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-default-attribute',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
Official NeXus NXDL schema to which this subentry conforms.  Obligatory
                value:    ['NXspecdata']

                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-definition-field',
            nxp_required='True',
            enumeration=['NXspecdata'],
            )
        class nxf_scan_number(NXobject):
            '''
                SPEC scan number
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-scan-number-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxf_scan_number = SubSection(sub_section=nxf_scan_number.m_def,repeats=True,
            nxp_name='scan_number',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-scan-number-field',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                SPEC scan number and command, from **#S** line                  SPEC data
                file line::                      #S 1  cscan en 690 750 60 0
                *title*::                      1  cscan en 690 750 60 0
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-title-field',
            nxp_required='True',
            )
        class nxf_command(NXobject):
            '''
                SPEC scan command, from **#S** line, after the scan number.
                :SPEC data file line: ``#S 1  cscan en 690 750 60 0``
                :command*:  ``cscan en 690 750 60 0``
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-command-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_command = SubSection(sub_section=nxf_command.m_def,repeats=True,
            nxp_name='command',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-command-field',
            nxp_required='True',
            )
        class nxf_date(NXobject):
            '''
                date from **#D** line in scan header, in ISO8601 format
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-date-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_date = SubSection(sub_section=nxf_date.m_def,repeats=True,
            nxp_name='date',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-date-field',
            nxp_required='True',
            )
        class nxf_comments(NXobject):
            '''
                Any **#C** lines in this scan, stored as one string with newlines between
                comments
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-comments-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_comments = SubSection(sub_section=nxf_comments.m_def,repeats=True,
            nxp_name='comments',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-comments-field',
            nxp_required='True',
            )
        class nxf_Q(NXobject):
            '''
                **#Q** -- :math:`Q` (:math:`hkl`) at start of scan                  array
                of [:math:`h` :math:`k` :math:`l`]
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-q-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxf_Q = SubSection(sub_section=nxf_Q.m_def,repeats=True,
            nxp_name='Q',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-q-field',
            nxp_required='True',
            )
        class nxf_TEMP_SP(NXobject):
            '''
                **#X** -- temperature set point
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-temp-sp-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxf_TEMP_SP = SubSection(sub_section=nxf_TEMP_SP.m_def,repeats=True,
            nxp_name='TEMP_SP',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-temp-sp-field',
            nxp_required='True',
            )
        class nxf_DEGC_SP(NXobject):
            '''
                **#X** -- temperature set point (C)
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-degc-sp-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxf_DEGC_SP = SubSection(sub_section=nxf_DEGC_SP.m_def,repeats=True,
            nxp_name='DEGC_SP',
            nxp_type='NX_NUMBER',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-degc-sp-field',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxa_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-description-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-description-attribute',
                nxp_required='True',
                )
            class nxf_mode(NXobject):
                '''
                    Count to a preset value based on either clock time            (timer)
                    or received monitor counts (monitor).           Possible values:
                    ['monitor','timer']

                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-mode-field',
                nxp_required='True',
                enumeration=['monitor','timer'],
                )
            class nxf_preset(NXobject):
                '''
                    preset value for time or monitor                      * **#M** --
                    counting against this constant monitor count (see #T)           *
                    **#T** -- counting against this constant number of seconds (see #M)
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-preset-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_units(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-preset-units-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                    nxp_name='units',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-preset-units-attribute',
                    nxp_required='True',
                    )
            nxf_preset = SubSection(sub_section=nxf_preset.m_def,repeats=True,
                nxp_name='preset',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-preset-field',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
                    array(s) of monitor data
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_NUMBER',
                nxp_nameType='any',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-data-field',
                nxp_required='True',
                )
            class nxf_count_time(NXobject):
                '''
                    array(s) of monitor data
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-count-time-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_count_time = SubSection(sub_section=nxf_count_time.m_def,repeats=True,
                nxp_name='count_time',
                nxp_type='NX_NUMBER',
                nxp_nameType='any',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-count-time-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-group',
            nxp_required='True',
            )
        class nxg_data(NXobject):
            '''
                detector (and MCA) data from this scan
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            class nxa_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-description-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-description-attribute',
                nxp_required='True',
                )
            class nxa_signal(NXobject):
                '''
                    name of the field with the plottable data, typically the last column
                    for 1-D scans                      This is the primary dependent axis,
                    such as two-theta detector.           This field must exist (or be
                    linked) in this :ref:`NXdata` group.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-signal-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
                nxp_name='signal',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-signal-attribute',
                nxp_required='True',
                )
            class nxa_axes(NXobject):
                '''
                    name(s) of the field(s) for plotting the data, typically the first
                    column for 1-D scans                      These are the independent
                    axes, such as positioners.  For 2-D or higher            dimension
                    data, there will be a field named for each dimension,
                    separated by ":" (preferred) or "," or " " (whitespace).
                    Such as for 2-D data plotted against *energy* and *th*::
                    @axes = ["energy", "th"]                      This(these) field(s)
                    must exist (or be linked) in this :ref:`NXdata` group.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-axes-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_axes = SubSection(sub_section=nxa_axes.m_def,repeats=True,
                nxp_name='axes',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-axes-attribute',
                nxp_required='True',
                )
            class nxa_AXISNAME_indices(NXobject):
                '''
                    For each field named in *@axes*, there will be an instance of this
                    attribute,           defining into which dimensions of the *@signal*
                    data this field applies.           The value of this attribute is a
                    list of index numbers using 0-based indexing           (first
                    dimension is 0, seconds i 1, ...).                      Such as for
                    2-D data plotted against *energy* and *th*::
                    @energy_indices = [0]               @th_indices = [1]
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-axisname-indices-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxa_AXISNAME_indices = SubSection(sub_section=nxa_AXISNAME_indices.m_def,repeats=True,
                nxp_name='AXISNAME_indices',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-axisname-indices-attribute',
                nxp_required='True',
                )
            class nxf_data(NXobject):
                '''
                    one column of data from the scan                      HDF5 requires
                    that each member of a group must have a unique name.
                    Pick the name of column from **#L** but make it unique which means if
                    the same           name is used in more than one column, append a
                    number to the extra instances           to make them unique yet
                    preserve their content, just in case they might be different.
                    Example: ``seconds seconds`` becomes ``seconds`` and ``seconda_1``.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                class nxa_spec_name(NXobject):
                    '''
                        name as specified in **#L** line, before it was made unique for
                        HDF5
                        https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-spec-name-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_spec_name = SubSection(sub_section=nxa_spec_name.m_def,repeats=True,
                    nxp_name='spec_name',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-spec-name-attribute',
                    nxp_required='True',
                    )
                class nxa_units(NXobject):
                    '''
                        Unless stated otherwise, units (not declared in the SPEC data
                        file)              are assumed to be *counts* for detectors and
                        "unknown" for              positioners or other scan columns.
                        https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-units-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                    nxp_name='units',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-units-attribute',
                    nxp_required='True',
                    )
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_nameType='any',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-field',
                nxp_required='True',
                )
            class nxf_intensity_factor(NXobject):
                '''
                    **#I** -- intensity normalizing factor
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-intensity-factor-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_intensity_factor = SubSection(sub_section=nxf_intensity_factor.m_def,repeats=True,
                nxp_name='intensity_factor',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-intensity-factor-field',
                nxp_required='True',
                )
            class nxf__mca_(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca--field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf__mca_ = SubSection(sub_section=nxf__mca_.m_def,repeats=True,
                nxp_name='_mca_',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca--field',
                nxp_required='True',
                )
            class nxf__mca_channel_(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca-channel--field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf__mca_channel_ = SubSection(sub_section=nxf__mca_channel_.m_def,repeats=True,
                nxp_name='_mca_channel_',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca-channel--field',
                nxp_required='True',
                )
            class nxf__mca1_(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca1--field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf__mca1_ = SubSection(sub_section=nxf__mca1_.m_def,repeats=True,
                nxp_name='_mca1_',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca1--field',
                nxp_required='True',
                )
            class nxf__mca1_channel_(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca1-channel--field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf__mca1_channel_ = SubSection(sub_section=nxf__mca1_channel_.m_def,repeats=True,
                nxp_name='_mca1_channel_',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca1-channel--field',
                nxp_required='True',
                )
        nxg_data = SubSection(sub_section=nxg_data.m_def,repeats=True,
            nxp_name='data',
            nxp_type='NXdata',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-group',
            nxp_required='True',
            )
        class nxg_counter_cross_reference(NXobject):
            '''
                associates values declared in **#J** and **#j** scan header lines
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            class nxa_comment(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-comment-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_comment = SubSection(sub_section=nxa_comment.m_def,repeats=True,
                nxp_name='comment',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-comment-attribute',
                nxp_required='True',
                )
            class nxa_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-description-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-description-attribute',
                nxp_required='True',
                )
        nxg_counter_cross_reference = SubSection(sub_section=nxg_counter_cross_reference.m_def,repeats=True,
            nxp_name='counter_cross_reference',
            nxp_type='NXnote',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-group',
            nxp_required='True',
            )
        class nxg_positioner_cross_reference(NXobject):
            '''
                associates values declared in **#O** and **#o** scan header lines
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            class nxa_comment(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-comment-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_comment = SubSection(sub_section=nxa_comment.m_def,repeats=True,
                nxp_name='comment',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-comment-attribute',
                nxp_required='True',
                )
            class nxa_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-description-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-description-attribute',
                nxp_required='True',
                )
        nxg_positioner_cross_reference = SubSection(sub_section=nxg_positioner_cross_reference.m_def,repeats=True,
            nxp_name='positioner_cross_reference',
            nxp_type='NXnote',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-group',
            nxp_required='True',
            )
        class nxg_spec(NXobject):
            '''
                various metadata from the SPEC scan header that have well-known NeXus base
                clases
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_UB(NXobject):
                '''
                    Orientation matrix of single crystal sample using Busing-Levy
                    convention
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-ub-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                class nxf_orientation_matrix(NXobject):
                    '''
                        **#G3** line in scan header
                        https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-ub-orientation-matrix-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_orientation_matrix = SubSection(sub_section=nxf_orientation_matrix.m_def,repeats=True,
                    nxp_name='orientation_matrix',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-ub-orientation-matrix-field',
                    nxp_required='True',
                    )
            nxg_UB = SubSection(sub_section=nxg_UB.m_def,repeats=True,
                nxp_name='UB',
                nxp_type='NXcrystal',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-ub-group',
                nxp_required='True',
                )
        nxg_spec = SubSection(sub_section=nxg_spec.m_def,repeats=True,
            nxp_name='spec',
            nxp_type='NXinstrument',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-group',
            nxp_required='True',
            )
        class nxg_G(NXobject):
            '''
                SPEC geometry variables for this diffractometer geometry (instrument
                specific)                  TODO: give interpreted name for each array
                value (need to figure out how to get the names)
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            class nxa_comment(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-comment-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_comment = SubSection(sub_section=nxa_comment.m_def,repeats=True,
                nxp_name='comment',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-comment-attribute',
                nxp_required='True',
                )
            class nxa_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-description-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-description-attribute',
                nxp_required='True',
                )
            class nxf_G0(NXobject):
                '''
geometry parameters from G[] array (geo mode, sector, etc)
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g0-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_G0 = SubSection(sub_section=nxf_G0.m_def,repeats=True,
                nxp_name='G0',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g0-field',
                nxp_required='True',
                )
            class nxf_G1(NXobject):
                '''
geometry parameters from U[] array (lattice constants, orientation
                    reflections)
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g1-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_G1 = SubSection(sub_section=nxf_G1.m_def,repeats=True,
                nxp_name='G1',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g1-field',
                nxp_required='True',
                )
            class nxf_G2(NXobject):
                '''
not used, although some files has a single zero value
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g2-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_G2 = SubSection(sub_section=nxf_G2.m_def,repeats=True,
                nxp_name='G2',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g2-field',
                nxp_required='True',
                )
            class nxf_G4(NXobject):
                '''
geometry parameters from Q[] array (lambda, frozen angles, cut points,
                    etc)
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g4-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_G4 = SubSection(sub_section=nxf_G4.m_def,repeats=True,
                nxp_name='G4',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g4-field',
                nxp_required='True',
                )
        nxg_G = SubSection(sub_section=nxg_G.m_def,repeats=True,
            nxp_name='G',
            nxp_type='NXnote',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-group',
            nxp_required='True',
            )
        class nxg_positioners(NXobject):
            '''
                names and values of all positioners (**#O** and **#P** lines) in scan
                header
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            class nxa_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-description-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-description-attribute',
                nxp_required='True',
                )
            class nxf_positioner(NXobject):
                '''
                    one positioner from the scan header                      HDF5 requires
                    that each member of a group must have a unique name.
                    SPEC assigns a unique name to each positioner, no extra work is
                    neccesary           to comply with the HDF5 rule for unique names in a
                    group.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-positioner-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_positioner = SubSection(sub_section=nxf_positioner.m_def,repeats=True,
                nxp_name='positioner',
                nxp_nameType='any',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-positioner-field',
                nxp_required='True',
                )
        nxg_positioners = SubSection(sub_section=nxg_positioners.m_def,repeats=True,
            nxp_name='positioners',
            nxp_type='NXnote',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-group',
            nxp_required='True',
            )
        class nxg_MCA(NXobject):
            '''
                **#@CALIB** -- coefficients to compute a scale based on the MCA channel
                number
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            class nxa_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-description-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-description-attribute',
                nxp_required='True',
                )
            class nxf_preset_time(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-preset-time-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_preset_time = SubSection(sub_section=nxf_preset_time.m_def,repeats=True,
                nxp_name='preset_time',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-preset-time-field',
                nxp_required='True',
                )
            class nxf_elapsed_live_time(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-elapsed-live-time-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_elapsed_live_time = SubSection(sub_section=nxf_elapsed_live_time.m_def,repeats=True,
                nxp_name='elapsed_live_time',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-elapsed-live-time-field',
                nxp_required='True',
                )
            class nxf_elapsed_real_time(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-elapsed-real-time-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_elapsed_real_time = SubSection(sub_section=nxf_elapsed_real_time.m_def,repeats=True,
                nxp_name='elapsed_real_time',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-elapsed-real-time-field',
                nxp_required='True',
                )
            class nxf_number_saved(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-number-saved-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_number_saved = SubSection(sub_section=nxf_number_saved.m_def,repeats=True,
                nxp_name='number_saved',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-number-saved-field',
                nxp_required='True',
                )
            class nxf_first_saved(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-first-saved-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_first_saved = SubSection(sub_section=nxf_first_saved.m_def,repeats=True,
                nxp_name='first_saved',
                nxp_type='NX_INT',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-first-saved-field',
                nxp_required='True',
                )
            class nxf_last_saved(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-last-saved-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxf_last_saved = SubSection(sub_section=nxf_last_saved.m_def,repeats=True,
                nxp_name='last_saved',
                nxp_type='NX_INT',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-last-saved-field',
                nxp_required='True',
                )
            class nxf_reduction_coef(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-reduction-coef-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_reduction_coef = SubSection(sub_section=nxf_reduction_coef.m_def,repeats=True,
                nxp_name='reduction_coef',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-reduction-coef-field',
                nxp_required='True',
                )
            class nxf_calib_a(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-a-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_calib_a = SubSection(sub_section=nxf_calib_a.m_def,repeats=True,
                nxp_name='calib_a',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-a-field',
                nxp_required='True',
                )
            class nxf_calib_b(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-b-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_calib_b = SubSection(sub_section=nxf_calib_b.m_def,repeats=True,
                nxp_name='calib_b',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-b-field',
                nxp_required='True',
                )
            class nxf_calib_c(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-c-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxf_calib_c = SubSection(sub_section=nxf_calib_c.m_def,repeats=True,
                nxp_name='calib_c',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-c-field',
                nxp_required='True',
                )
            class nxg_ROI(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
                class nxf_roiN(NXobject):
                    '''
                        numbered regions of interest, use an index number as part of the
                        name
                        https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    class nxa_description(NXobject):
                        '''
``first_channel, last_channel``
                            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-description-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
                        nxp_name='description',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-description-attribute',
                        nxp_required='True',
                        )
                    class nxa_first_channel(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-first-channel-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxa_first_channel = SubSection(sub_section=nxa_first_channel.m_def,repeats=True,
                        nxp_name='first_channel',
                        nxp_type='NX_INT',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-first-channel-attribute',
                        nxp_required='True',
                        )
                    class nxa_last_channel(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-last-channel-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxa_last_channel = SubSection(sub_section=nxa_last_channel.m_def,repeats=True,
                        nxp_name='last_channel',
                        nxp_type='NX_INT',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-last-channel-attribute',
                        nxp_required='True',
                        )
                nxf_roiN = SubSection(sub_section=nxf_roiN.m_def,repeats=True,
                    nxp_name='roiN',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-field',
                    nxp_required='True',
                    )
            nxg_ROI = SubSection(sub_section=nxg_ROI.m_def,repeats=True,
                nxp_name='ROI',
                nxp_type='NXnote',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-group',
                nxp_required='True',
                )
        nxg_MCA = SubSection(sub_section=nxg_MCA.m_def,repeats=True,
            nxp_name='MCA',
            nxp_type='NXnote',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-group',
            nxp_required='True',
            )
        class nxg_metadata(NXobject):
            '''
                SPEC metadata (UNICAT-style #H and #V lines)                  This is a
                block that may be unique to SPEC files acquired at certain         APS
                beam lines.  Other facilities or instruments may use this block
                for storing key:value pairs of data where the values have suitable
                attributes (such as units).
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-metadata-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            class nxa_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-metadata-description-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-metadata-description-attribute',
                nxp_required='True',
                )
        nxg_metadata = SubSection(sub_section=nxg_metadata.m_def,repeats=True,
            nxp_name='metadata',
            nxp_type='NXnote',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-metadata-group',
            nxp_required='True',
            )
        class nxg_SPEC_user(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-user-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            class nxf_SPEC_user(NXobject):
                '''
                    user name from first **#C** line in file header
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-user-spec-user-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SPEC_user = SubSection(sub_section=nxf_SPEC_user.m_def,repeats=True,
                nxp_name='SPEC_user',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-user-spec-user-field',
                nxp_required='True',
                )
        nxg_SPEC_user = SubSection(sub_section=nxg_SPEC_user.m_def,repeats=True,
            nxp_name='SPEC_user',
            nxp_type='NXuser',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-user-group',
            nxp_required='True',
            )
        class nxg__unrecognized(NXobject):
            '''
                Fallback for any SPEC data file control lines not otherwise placed
                into groups or fields elsewhere in this specification.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            class nxa_comment(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-comment-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_comment = SubSection(sub_section=nxa_comment.m_def,repeats=True,
                nxp_name='comment',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-comment-attribute',
                nxp_required='True',
                )
            class nxa_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-description-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxa_description = SubSection(sub_section=nxa_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-description-attribute',
                nxp_required='True',
                )
        nxg__unrecognized = SubSection(sub_section=nxg__unrecognized.m_def,repeats=True,
            nxp_name='_unrecognized',
            nxp_type='NXnote',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        deprecated=''' DEPRECATED:
        This definition will be removed by 2022.
        ''',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
        nxp_required='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting              Declares which :ref:`NXentry` group
            contains the data to be shown by default.       It is needed to resolve
            ambiguity when more than one :ref:`NXentry` group exists.        The value is
            the name of the default :ref:`NXentry` group.
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-default-attribute',
        nxp_required='True',
        )
    class nxa_HDF5_Version(NXobject):
        '''
            Version of HDF5 library used in writing the file (as specified in
            :ref:`NXroot`).              Note this attribute is spelled with uppercase
            "V",       different than other version attributes.
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-hdf5-version-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_HDF5_Version = SubSection(sub_section=nxa_HDF5_Version.m_def,repeats=True,
        nxp_name='HDF5_Version',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-hdf5-version-attribute',
        nxp_required='True',
        )
    class nxa_h5py_version(NXobject):
        '''
            version of h5py Python package used to write this HDF5 file
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-h5py-version-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_h5py_version = SubSection(sub_section=nxa_h5py_version.m_def,repeats=True,
        nxp_name='h5py_version',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-h5py-version-attribute',
        nxp_optional='True',
        )
    class nxa_SPEC_file(NXobject):
        '''
            original SPEC data file name from **#F** line in file header
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-file-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_SPEC_file = SubSection(sub_section=nxa_SPEC_file.m_def,repeats=True,
        nxp_name='SPEC_file',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-file-attribute',
        nxp_optional='True',
        )
    class nxa_SPEC_date(NXobject):
        '''
            date from **#D** line in file header, in ISO8601 format
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-date-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_SPEC_date = SubSection(sub_section=nxa_SPEC_date.m_def,repeats=True,
        nxp_name='SPEC_date',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-date-attribute',
        nxp_optional='True',
        )
    class nxa_SPEC_epoch(NXobject):
        '''
            UNIX time epoch from **#E** line in file header
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-epoch-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxa_SPEC_epoch = SubSection(sub_section=nxa_SPEC_epoch.m_def,repeats=True,
        nxp_name='SPEC_epoch',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-epoch-attribute',
        nxp_required='True',
        )
    class nxa_SPEC_comments(NXobject):
        '''
            any **#C** lines in file header, stored as one string with newlines between
            comments
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-comments-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_SPEC_comments = SubSection(sub_section=nxa_SPEC_comments.m_def,repeats=True,
        nxp_name='SPEC_comments',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-comments-attribute',
        nxp_optional='True',
        )
    class nxa_SPEC_num_headers(NXobject):
        '''
            Number of header sections found in the spec file
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-num-headers-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
    nxa_SPEC_num_headers = SubSection(sub_section=nxa_SPEC_num_headers.m_def,repeats=True,
        nxp_name='SPEC_num_headers',
        nxp_type='NX_INT',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-num-headers-attribute',
        nxp_optional='True',
        )

class NXsnshisto(NXobject):
    '''
This is a definition for histogram data from Spallation Neutron Source (SNS) at
        ORNL.
        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_type='group',
        nxp_name='NXsnshisto',
        nxp_category='contributed',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_collection_identifier(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-collection-identifier-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_collection_identifier = SubSection(sub_section=nxf_collection_identifier.m_def,repeats=True,
            nxp_name='collection_identifier',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-collection-identifier-field',
            nxp_required='True',
            )
        class nxf_collection_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-collection-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_collection_title = SubSection(sub_section=nxf_collection_title.m_def,repeats=True,
            nxp_name='collection_title',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-collection-title-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
                Official NXDL schema after this file goes to applications.
                Obligatory value:    ['NXsnshisto']

                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-definition-field',
            nxp_required='True',
            enumeration=['NXsnshisto'],
            )
        class nxf_duration(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-duration-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
            nxp_name='duration',
            nxp_type='NX_FLOAT',
            nxp_units='NX_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-duration-field',
            nxp_required='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-end-time-field',
            nxp_required='True',
            )
        class nxf_entry_identifier(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-entry-identifier-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_entry_identifier = SubSection(sub_section=nxf_entry_identifier.m_def,repeats=True,
            nxp_name='entry_identifier',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-entry-identifier-field',
            nxp_required='True',
            )
        class nxf_experiment_identifier(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-experiment-identifier-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_experiment_identifier = SubSection(sub_section=nxf_experiment_identifier.m_def,repeats=True,
            nxp_name='experiment_identifier',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-experiment-identifier-field',
            nxp_required='True',
            )
        class nxf_notes(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-notes-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_notes = SubSection(sub_section=nxf_notes.m_def,repeats=True,
            nxp_name='notes',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-notes-field',
            nxp_required='True',
            )
        class nxf_proton_charge(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-proton-charge-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_proton_charge = SubSection(sub_section=nxf_proton_charge.m_def,repeats=True,
            nxp_name='proton_charge',
            nxp_type='NX_FLOAT',
            nxp_units='NX_CHARGE',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-proton-charge-field',
            nxp_required='True',
            )
        class nxf_raw_frames(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-raw-frames-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxf_raw_frames = SubSection(sub_section=nxf_raw_frames.m_def,repeats=True,
            nxp_name='raw_frames',
            nxp_type='NX_INT',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-raw-frames-field',
            nxp_required='True',
            )
        class nxf_run_number(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-run-number-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_run_number = SubSection(sub_section=nxf_run_number.m_def,repeats=True,
            nxp_name='run_number',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-run-number-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-title-field',
            nxp_required='True',
            )
        class nxf_total_counts(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-total-counts-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
        nxf_total_counts = SubSection(sub_section=nxf_total_counts.m_def,repeats=True,
            nxp_name='total_counts',
            nxp_type='NX_UINT',
            nxp_units='NX_UNITLESS',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-total-counts-field',
            nxp_required='True',
            )
        class nxf_total_uncounted_counts(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-total-uncounted-counts-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
        nxf_total_uncounted_counts = SubSection(sub_section=nxf_total_uncounted_counts.m_def,repeats=True,
            nxp_name='total_uncounted_counts',
            nxp_type='NX_UINT',
            nxp_units='NX_UNITLESS',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-total-uncounted-counts-field',
            nxp_required='True',
            )
        class nxg_DASlogs(NXobject):
            '''
                Details of all logs, both from cvinfo file and from HistoTool (frequency
                and proton_charge).
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
            class nxg_LOG(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
                class nxf_average_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value = SubSection(sub_section=nxf_average_value.m_def,repeats=True,
                    nxp_name='average_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-field',
                    nxp_required='True',
                    )
                class nxf_average_value_error(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-error-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value_error = SubSection(sub_section=nxf_average_value_error.m_def,repeats=True,
                    nxp_name='average_value_error',
                    nxp_type='NX_FLOAT',
                    deprecated=''' DEPRECATED:
                    see https://github.com/nexusformat/definitions/issues/821
                    ''',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-error-field',
                    nxp_required='True',
                    )
                class nxf_average_value_errors(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-errors-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value_errors = SubSection(sub_section=nxf_average_value_errors.m_def,repeats=True,
                    nxp_name='average_value_errors',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-errors-field',
                    nxp_required='True',
                    )
                class nxf_description(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-description-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                    nxp_name='description',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-description-field',
                    nxp_required='True',
                    )
                class nxf_duration(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-duration-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
                    nxp_name='duration',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-duration-field',
                    nxp_required='True',
                    )
                class nxf_maximum_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-maximum-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_maximum_value = SubSection(sub_section=nxf_maximum_value.m_def,repeats=True,
                    nxp_name='maximum_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-maximum-value-field',
                    nxp_required='True',
                    )
                class nxf_minimum_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-minimum-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_minimum_value = SubSection(sub_section=nxf_minimum_value.m_def,repeats=True,
                    nxp_name='minimum_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-minimum-value-field',
                    nxp_required='True',
                    )
                class nxf_time(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-time-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time = SubSection(sub_section=nxf_time.m_def,repeats=True,
                    nxp_name='time',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-time-field',
                    nxp_required='True',
                    )
                class nxf_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
                    nxp_name='value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-value-field',
                    nxp_required='True',
                    )
            nxg_LOG = SubSection(sub_section=nxg_LOG.m_def,repeats=True,
                nxp_type='NXlog',
                nxp_minOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-group',
                nxp_required='True',
                )
            class nxg_POSITIONER(NXobject):
                '''
                    Motor logs from cvinfo file.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXpositioner.m_def,repeats=True)
                class nxf_average_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value = SubSection(sub_section=nxf_average_value.m_def,repeats=True,
                    nxp_name='average_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-field',
                    nxp_required='True',
                    )
                class nxf_average_value_error(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-error-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value_error = SubSection(sub_section=nxf_average_value_error.m_def,repeats=True,
                    nxp_name='average_value_error',
                    nxp_type='NX_FLOAT',
                    deprecated=''' DEPRECATED:
                    see https://github.com/nexusformat/definitions/issues/821
                    ''',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-error-field',
                    nxp_required='True',
                    )
                class nxf_average_value_errors(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-errors-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value_errors = SubSection(sub_section=nxf_average_value_errors.m_def,repeats=True,
                    nxp_name='average_value_errors',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-errors-field',
                    nxp_required='True',
                    )
                class nxf_description(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-description-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                    nxp_name='description',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-description-field',
                    nxp_required='True',
                    )
                class nxf_duration(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-duration-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
                    nxp_name='duration',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-duration-field',
                    nxp_required='True',
                    )
                class nxf_maximum_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-maximum-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_maximum_value = SubSection(sub_section=nxf_maximum_value.m_def,repeats=True,
                    nxp_name='maximum_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-maximum-value-field',
                    nxp_required='True',
                    )
                class nxf_minimum_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-minimum-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_minimum_value = SubSection(sub_section=nxf_minimum_value.m_def,repeats=True,
                    nxp_name='minimum_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-minimum-value-field',
                    nxp_required='True',
                    )
                class nxf_time(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-time-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time = SubSection(sub_section=nxf_time.m_def,repeats=True,
                    nxp_name='time',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-time-field',
                    nxp_required='True',
                    )
                class nxf_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
                    nxp_name='value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-value-field',
                    nxp_required='True',
                    )
            nxg_POSITIONER = SubSection(sub_section=nxg_POSITIONER.m_def,repeats=True,
                nxp_type='NXpositioner',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-group',
                nxp_optional='True',
                )
        nxg_DASlogs = SubSection(sub_section=nxg_DASlogs.m_def,repeats=True,
            nxp_type='NXcollection',
            nxp_name='DASlogs',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-group',
            nxp_required='True',
            )
        class nxg_SNSHistoTool(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            class nxf_SNSbanking_file_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-snsbanking-file-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SNSbanking_file_name = SubSection(sub_section=nxf_SNSbanking_file_name.m_def,repeats=True,
                nxp_name='SNSbanking_file_name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-snsbanking-file-name-field',
                nxp_required='True',
                )
            class nxf_SNSmapping_file_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-snsmapping-file-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SNSmapping_file_name = SubSection(sub_section=nxf_SNSmapping_file_name.m_def,repeats=True,
                nxp_name='SNSmapping_file_name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-snsmapping-file-name-field',
                nxp_required='True',
                )
            class nxf_author(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-author-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_author = SubSection(sub_section=nxf_author.m_def,repeats=True,
                nxp_name='author',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-author-field',
                nxp_required='True',
                )
            class nxf_command1(NXobject):
                '''
                    Command string for event2histo_nxl.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-command1-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_command1 = SubSection(sub_section=nxf_command1.m_def,repeats=True,
                nxp_name='command1',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-command1-field',
                nxp_required='True',
                )
            class nxf_date(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-date-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_date = SubSection(sub_section=nxf_date.m_def,repeats=True,
                nxp_name='date',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-date-field',
                nxp_required='True',
                )
            class nxf_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-description-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-description-field',
                nxp_required='True',
                )
            class nxf_version(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-version-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_version = SubSection(sub_section=nxf_version.m_def,repeats=True,
                nxp_name='version',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-version-field',
                nxp_required='True',
                )
        nxg_SNSHistoTool = SubSection(sub_section=nxg_SNSHistoTool.m_def,repeats=True,
            nxp_type='NXnote',
            nxp_name='SNSHistoTool',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_minOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-data-group',
            nxp_required='True',
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxf_SNSdetector_calibration_id(NXobject):
                '''
                    Detector calibration id from DAS.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snsdetector-calibration-id-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SNSdetector_calibration_id = SubSection(sub_section=nxf_SNSdetector_calibration_id.m_def,repeats=True,
                nxp_name='SNSdetector_calibration_id',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snsdetector-calibration-id-field',
                nxp_required='True',
                )
            class nxf_SNSgeometry_file_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snsgeometry-file-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SNSgeometry_file_name = SubSection(sub_section=nxf_SNSgeometry_file_name.m_def,repeats=True,
                nxp_name='SNSgeometry_file_name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snsgeometry-file-name-field',
                nxp_required='True',
                )
            class nxf_SNStranslation_service(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snstranslation-service-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SNStranslation_service = SubSection(sub_section=nxf_SNStranslation_service.m_def,repeats=True,
                nxp_name='SNStranslation_service',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snstranslation-service-field',
                nxp_required='True',
                )
            class nxf_beamline(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-beamline-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_beamline = SubSection(sub_section=nxf_beamline.m_def,repeats=True,
                nxp_name='beamline',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-beamline-field',
                nxp_required='True',
                )
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-name-field',
                nxp_required='True',
                )
            class nxg_SNS(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_frequency(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-frequency-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_frequency = SubSection(sub_section=nxf_frequency.m_def,repeats=True,
                    nxp_name='frequency',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_FREQUENCY',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-frequency-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-probe-field',
                    nxp_required='True',
                    )
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-type-field',
                    nxp_required='True',
                    )
            nxg_SNS = SubSection(sub_section=nxg_SNS.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_name='SNS',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-group',
                nxp_required='True',
                )
            class nxg_DETECTOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_azimuthal_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-azimuthal-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
                    nxp_name='azimuthal_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-azimuthal-angle-field',
                    nxp_required='True',
                    )
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_UINT',
                    nxp_signal='1',
                    nxp_axes='x_pixel_offset,y_pixel_offset,time_of_flight',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-field',
                    nxp_required='True',
                    )
                class nxf_data_x_time_of_flight(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-x-time-of-flight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_data_x_time_of_flight = SubSection(sub_section=nxf_data_x_time_of_flight.m_def,repeats=True,
                    nxp_name='data_x_time_of_flight',
                    nxp_type='NX_UINT',
                    nxp_signal='3',
                    nxp_axes='x_pixel_offset,time_of_flight',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-x-time-of-flight-field',
                    nxp_required='True',
                    )
                class nxf_data_x_y(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-x-y-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_data_x_y = SubSection(sub_section=nxf_data_x_y.m_def,repeats=True,
                    nxp_name='data_x_y',
                    nxp_type='NX_UINT',
                    nxp_signal='2',
                    nxp_axes='x_pixel_offset,y_pixel_offset',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-x-y-field',
                    nxp_required='True',
                    )
                class nxf_data_y_time_of_flight(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-y-time-of-flight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_data_y_time_of_flight = SubSection(sub_section=nxf_data_y_time_of_flight.m_def,repeats=True,
                    nxp_name='data_y_time_of_flight',
                    nxp_type='NX_UINT',
                    nxp_signal='4',
                    nxp_axes='y_pixel_offset,time_of_flight',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-y-time-of-flight-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-distance-field',
                    nxp_required='True',
                    )
                class nxf_pixel_id(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-pixel-id-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_pixel_id = SubSection(sub_section=nxf_pixel_id.m_def,repeats=True,
                    nxp_name='pixel_id',
                    nxp_type='NX_UINT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-pixel-id-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_time_of_flight(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-time-of-flight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                    nxp_name='time_of_flight',
                    nxp_type='NX_FLOAT',
                    nxp_axis='3',
                    nxp_primary='1',
                    nxp_units='NX_TIME_OF_FLIGHT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-time-of-flight-field',
                    nxp_required='True',
                    )
                class nxf_total_counts(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-total-counts-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_total_counts = SubSection(sub_section=nxf_total_counts.m_def,repeats=True,
                    nxp_name='total_counts',
                    nxp_type='NX_UINT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-total-counts-field',
                    nxp_required='True',
                    )
                class nxf_x_pixel_offset(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-x-pixel-offset-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_offset = SubSection(sub_section=nxf_x_pixel_offset.m_def,repeats=True,
                    nxp_name='x_pixel_offset',
                    nxp_type='NX_FLOAT',
                    nxp_axis='1',
                    nxp_primary='1',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-x-pixel-offset-field',
                    nxp_required='True',
                    )
                class nxf_y_pixel_offset(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-y-pixel-offset-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_pixel_offset = SubSection(sub_section=nxf_y_pixel_offset.m_def,repeats=True,
                    nxp_name='y_pixel_offset',
                    nxp_type='NX_FLOAT',
                    nxp_axis='2',
                    nxp_primary='1',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-y-pixel-offset-field',
                    nxp_required='True',
                    )
                class nxg_origin(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    class nxg_orientation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-orientation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        class nxf_value(NXobject):
                            '''
                                Six out of nine rotation parameters.
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-orientation-value-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
                            nxp_name='value',
                            nxp_type='NX_FLOAT',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-orientation-value-field',
                            nxp_required='True',
                            )
                    nxg_orientation = SubSection(sub_section=nxg_orientation.m_def,repeats=True,
                        nxp_type='NXorientation',
                        nxp_name='orientation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-orientation-group',
                        nxp_required='True',
                        )
                    class nxg_shape(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        class nxf_description(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-description-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                            nxp_name='description',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-description-field',
                            nxp_required='True',
                            )
                        class nxf_shape(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-shape-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_shape = SubSection(sub_section=nxf_shape.m_def,repeats=True,
                            nxp_name='shape',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-shape-field',
                            nxp_required='True',
                            )
                        class nxf_size(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-size-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_size = SubSection(sub_section=nxf_size.m_def,repeats=True,
                            nxp_name='size',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-size-field',
                            nxp_required='True',
                            )
                    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
                        nxp_type='NXshape',
                        nxp_name='shape',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-group',
                        nxp_required='True',
                        )
                    class nxg_translation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-translation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        class nxf_distance(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-translation-distance-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                            nxp_name='distance',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-translation-distance-field',
                            nxp_required='True',
                            )
                    nxg_translation = SubSection(sub_section=nxg_translation.m_def,repeats=True,
                        nxp_type='NXtranslation',
                        nxp_name='translation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-translation-group',
                        nxp_required='True',
                        )
                nxg_origin = SubSection(sub_section=nxg_origin.m_def,repeats=True,
                    nxp_type='NXgeometry',
                    nxp_name='origin',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-group',
                    nxp_required='True',
                    )
            nxg_DETECTOR = SubSection(sub_section=nxg_DETECTOR.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_minOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-group',
                nxp_required='True',
                )
            class nxg_DISK_CHOPPER(NXobject):
                '''
                    Original specification called for NXchopper,              which is not
                    a valid NeXus base class.             Select either NXdisk_chopper or
                    NXfermi_chopper, as appropriate.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-disk-chopper-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdisk_chopper.m_def,repeats=True)
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-disk-chopper-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-disk-chopper-distance-field',
                    nxp_required='True',
                    )
            nxg_DISK_CHOPPER = SubSection(sub_section=nxg_DISK_CHOPPER.m_def,repeats=True,
                nxp_type='NXdisk_chopper',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-disk-chopper-group',
                nxp_optional='True',
                )
            class nxg_FERMI_CHOPPER(NXobject):
                '''
                    Original specification called for NXchopper,              which is not
                    a valid NeXus base class.             Select either NXdisk_chopper or
                    NXfermi_chopper, as appropriate.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-fermi-chopper-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXfermi_chopper.m_def,repeats=True)
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-fermi-chopper-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-fermi-chopper-distance-field',
                    nxp_required='True',
                    )
            nxg_FERMI_CHOPPER = SubSection(sub_section=nxg_FERMI_CHOPPER.m_def,repeats=True,
                nxp_type='NXfermi_chopper',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-fermi-chopper-group',
                nxp_optional='True',
                )
            class nxg_moderator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmoderator.m_def,repeats=True)
                class nxf_coupling_material(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-coupling-material-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_coupling_material = SubSection(sub_section=nxf_coupling_material.m_def,repeats=True,
                    nxp_name='coupling_material',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-coupling-material-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-distance-field',
                    nxp_required='True',
                    )
                class nxf_temperature(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-temperature-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
                    nxp_name='temperature',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TEMPERATURE',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-temperature-field',
                    nxp_required='True',
                    )
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-type-field',
                    nxp_required='True',
                    )
            nxg_moderator = SubSection(sub_section=nxg_moderator.m_def,repeats=True,
                nxp_type='NXmoderator',
                nxp_name='moderator',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-group',
                nxp_required='True',
                )
            class nxg_APERTURE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXaperture.m_def,repeats=True)
                class nxf_x_pixel_offset(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-x-pixel-offset-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_offset = SubSection(sub_section=nxf_x_pixel_offset.m_def,repeats=True,
                    nxp_name='x_pixel_offset',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-x-pixel-offset-field',
                    nxp_required='True',
                    )
                class nxg_origin(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    class nxg_orientation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-orientation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        class nxf_value(NXobject):
                            '''
                                Six out of nine rotation parameters.
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-orientation-value-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
                            nxp_name='value',
                            nxp_type='NX_FLOAT',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-orientation-value-field',
                            nxp_required='True',
                            )
                    nxg_orientation = SubSection(sub_section=nxg_orientation.m_def,repeats=True,
                        nxp_type='NXorientation',
                        nxp_name='orientation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-orientation-group',
                        nxp_required='True',
                        )
                    class nxg_shape(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        class nxf_description(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-description-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                            nxp_name='description',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-description-field',
                            nxp_required='True',
                            )
                        class nxf_shape(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-shape-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_shape = SubSection(sub_section=nxf_shape.m_def,repeats=True,
                            nxp_name='shape',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-shape-field',
                            nxp_required='True',
                            )
                        class nxf_size(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-size-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_size = SubSection(sub_section=nxf_size.m_def,repeats=True,
                            nxp_name='size',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-size-field',
                            nxp_required='True',
                            )
                    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
                        nxp_type='NXshape',
                        nxp_name='shape',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-group',
                        nxp_required='True',
                        )
                    class nxg_translation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-translation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        class nxf_distance(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-translation-distance-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                            nxp_name='distance',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-translation-distance-field',
                            nxp_required='True',
                            )
                    nxg_translation = SubSection(sub_section=nxg_translation.m_def,repeats=True,
                        nxp_type='NXtranslation',
                        nxp_name='translation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-translation-group',
                        nxp_required='True',
                        )
                nxg_origin = SubSection(sub_section=nxg_origin.m_def,repeats=True,
                    nxp_type='NXgeometry',
                    nxp_name='origin',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-group',
                    nxp_required='True',
                    )
            nxg_APERTURE = SubSection(sub_section=nxg_APERTURE.m_def,repeats=True,
                nxp_type='NXaperture',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-group',
                nxp_optional='True',
                )
            class nxg_ATTENUATOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-attenuator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXattenuator.m_def,repeats=True)
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-attenuator-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-attenuator-distance-field',
                    nxp_required='True',
                    )
            nxg_ATTENUATOR = SubSection(sub_section=nxg_ATTENUATOR.m_def,repeats=True,
                nxp_type='NXattenuator',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-attenuator-group',
                nxp_optional='True',
                )
            class nxg_POLARIZER(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-polarizer-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXpolarizer.m_def,repeats=True)
            nxg_POLARIZER = SubSection(sub_section=nxg_POLARIZER.m_def,repeats=True,
                nxp_type='NXpolarizer',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-polarizer-group',
                nxp_optional='True',
                )
            class nxg_CRYSTAL(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-type-field',
                    nxp_required='True',
                    )
                class nxf_wavelength(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-wavelength-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
                    nxp_name='wavelength',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_WAVELENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-wavelength-field',
                    nxp_required='True',
                    )
                class nxg_origin(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    class nxf_description(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-description-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                        nxp_name='description',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-description-field',
                        nxp_required='True',
                        )
                    class nxg_orientation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-orientation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        class nxf_value(NXobject):
                            '''
                                Six out of nine rotation parameters.
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-orientation-value-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
                            nxp_name='value',
                            nxp_type='NX_FLOAT',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-orientation-value-field',
                            nxp_required='True',
                            )
                    nxg_orientation = SubSection(sub_section=nxg_orientation.m_def,repeats=True,
                        nxp_type='NXorientation',
                        nxp_name='orientation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-orientation-group',
                        nxp_required='True',
                        )
                    class nxg_shape(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        class nxf_description(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-description-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                            nxp_name='description',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-description-field',
                            nxp_required='True',
                            )
                        class nxf_shape(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-shape-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_shape = SubSection(sub_section=nxf_shape.m_def,repeats=True,
                            nxp_name='shape',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-shape-field',
                            nxp_required='True',
                            )
                        class nxf_size(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-size-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_size = SubSection(sub_section=nxf_size.m_def,repeats=True,
                            nxp_name='size',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-size-field',
                            nxp_required='True',
                            )
                    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
                        nxp_type='NXshape',
                        nxp_name='shape',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-group',
                        nxp_required='True',
                        )
                    class nxg_translation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-translation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        class nxf_distance(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-translation-distance-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                            nxp_name='distance',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-translation-distance-field',
                            nxp_required='True',
                            )
                    nxg_translation = SubSection(sub_section=nxg_translation.m_def,repeats=True,
                        nxp_type='NXtranslation',
                        nxp_name='translation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-translation-group',
                        nxp_required='True',
                        )
                nxg_origin = SubSection(sub_section=nxg_origin.m_def,repeats=True,
                    nxp_type='NXgeometry',
                    nxp_name='origin',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-group',
                    nxp_required='True',
                    )
            nxg_CRYSTAL = SubSection(sub_section=nxg_CRYSTAL.m_def,repeats=True,
                nxp_type='NXcrystal',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-group',
                nxp_optional='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_data(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_UINT',
                nxp_signal='1',
                nxp_axes='time_of_flight',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-data-field',
                nxp_required='True',
                )
            class nxf_distance(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-distance-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                nxp_name='distance',
                nxp_type='NX_FLOAT',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-distance-field',
                nxp_required='True',
                )
            class nxf_mode(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-mode-field',
                nxp_required='True',
                )
            class nxf_time_of_flight(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-time-of-flight-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                nxp_name='time_of_flight',
                nxp_type='NX_FLOAT',
                nxp_units='NX_TIME',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-time-of-flight-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_minOccurs='0',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-group',
            nxp_optional='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_changer_position(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-changer-position-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_changer_position = SubSection(sub_section=nxf_changer_position.m_def,repeats=True,
                nxp_name='changer_position',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-changer-position-field',
                nxp_required='True',
                )
            class nxf_holder(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-holder-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_holder = SubSection(sub_section=nxf_holder.m_def,repeats=True,
                nxp_name='holder',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-holder-field',
                nxp_required='True',
                )
            class nxf_identifier(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-identifier-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_identifier = SubSection(sub_section=nxf_identifier.m_def,repeats=True,
                nxp_name='identifier',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-identifier-field',
                nxp_required='True',
                )
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_nature(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-nature-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_nature = SubSection(sub_section=nxf_nature.m_def,repeats=True,
                nxp_name='nature',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-nature-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-group',
            nxp_required='True',
            )
        class nxg_USER(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            class nxf_facility_user_id(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-facility-user-id-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_facility_user_id = SubSection(sub_section=nxf_facility_user_id.m_def,repeats=True,
                nxp_name='facility_user_id',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-facility-user-id-field',
                nxp_required='True',
                )
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-name-field',
                nxp_required='True',
                )
            class nxf_role(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-role-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_role = SubSection(sub_section=nxf_role.m_def,repeats=True,
                nxp_name='role',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-role-field',
                nxp_required='True',
                )
        nxg_USER = SubSection(sub_section=nxg_USER.m_def,repeats=True,
            nxp_type='NXuser',
            nxp_minOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group',
        nxp_required='True',
        )

class NXcxi_ptycho(NXobject):
    '''
        Application definition for a ptychography experiment, compatible with CXI from
        version 1.6.

        This is compatible with CXI from version 1.6 if this application definition
        is put at the top "entry" level. Above this a "cxi_version" field should be
        defined. The CXI format is name based, rather than class based, and so it is
        important                 to pay attention to the naming convention to be CXI
        compatible. There are duplications due to the format merger. These should be
        achieved by linking,                  with hdf5 Virtual Dataset being used to
        restructure any data that needs to be remapped. To be fully CXI compatible, all
        units (including energy) must be in SI units.

        An example here is that CXI expects the data to always to have shape
        (npts_x*npts_y, frame_size_x, frame_size_y). For nexus this is only true for
        arbitrary scan paths                 with raster format scans taking shape
        (npts_x, npts_y, frame_size_x, frame_size_y).
        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_name='NXcxi_ptycho',
        nxp_category='contributed',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho',
        nxp_required='True',
        )
    class nxg_entry_1(NXobject):
        '''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_minOccurs='0',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-title-field',
            nxp_optional='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_minOccurs='0',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-start-time-field',
            nxp_optional='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_minOccurs='0',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-end-time-field',
            nxp_optional='True',
            )
        class nxf_definition(NXobject):
            '''
                Official NeXus NXDL schema to which this file conforms
                Obligatory value:    ['NXcxi_ptycho']

                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_type='NX_CHAR',
            nxp_minOccurs='1',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-definition-field',
            nxp_required='True',
            enumeration=['NXcxi_ptycho'],
            )
        class nxg_instrument_1(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxg_source_1(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_type='NX_CHAR',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-name-field',
                    nxp_required='True',
                    )
                class nxf_energy(NXobject):
                    '''
                        This is the energy of the machine, not the beamline.
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                    nxp_name='energy',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-energy-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-probe-field',
                    nxp_required='True',
                    )
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-type-field',
                    nxp_required='True',
                    )
            nxg_source_1 = SubSection(sub_section=nxg_source_1.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_minOccurs='1',
                nxp_maxOccurs='1',
                nxp_name='source_1',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-group',
                nxp_required='True',
                )
            class nxg_beam_1(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXbeam.m_def,repeats=True)
                class nxf_energy(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-energy-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-energy-units-attribute',
                        nxp_required='True',
                        )
                nxf_energy = SubSection(sub_section=nxf_energy.m_def,repeats=True,
                    nxp_name='energy',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-energy-field',
                    nxp_required='True',
                    )
                class nxf_extent(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-extent-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-extent-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-extent-units-attribute',
                        nxp_required='True',
                        )
                nxf_extent = SubSection(sub_section=nxf_extent.m_def,repeats=True,
                    nxp_name='extent',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-extent-field',
                    nxp_optional='True',
                    )
                class nxf_incident_beam_divergence(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-divergence-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-divergence-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-divergence-units-attribute',
                        nxp_required='True',
                        )
                nxf_incident_beam_divergence = SubSection(sub_section=nxf_incident_beam_divergence.m_def,repeats=True,
                    nxp_name='incident_beam_divergence',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-divergence-field',
                    nxp_optional='True',
                    )
                class nxf_incident_beam_energy(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-energy-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-energy-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-energy-units-attribute',
                        nxp_required='True',
                        )
                nxf_incident_beam_energy = SubSection(sub_section=nxf_incident_beam_energy.m_def,repeats=True,
                    nxp_name='incident_beam_energy',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-energy-field',
                    nxp_required='True',
                    )
                class nxf_incident_energy_spread(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-energy-spread-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-energy-spread-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-energy-spread-units-attribute',
                        nxp_required='True',
                        )
                nxf_incident_energy_spread = SubSection(sub_section=nxf_incident_energy_spread.m_def,repeats=True,
                    nxp_name='incident_energy_spread',
                    nxp_type='NX_FLOAT',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-energy-spread-field',
                    nxp_required='True',
                    )
            nxg_beam_1 = SubSection(sub_section=nxg_beam_1.m_def,repeats=True,
                nxp_type='NXbeam',
                nxp_name='beam_1',
                nxp_minOccurs='1',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-group',
                nxp_required='True',
                )
            class nxg_detector_1(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxa_axes(NXobject):
                    '''
                        should have value "[, data]"
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-axes-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_axes = SubSection(sub_section=nxa_axes.m_def,repeats=True,
                    nxp_name='axes',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-axes-attribute',
                    nxp_required='True',
                    )
                class nxa_signal(NXobject):
                    '''
                        should have value "data"
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-signal-attribute
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
                    nxp_name='signal',
                    nxp_type='NX_CHAR',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-signal-attribute',
                    nxp_required='True',
                    )
                class nxf_translation(NXobject):
                    '''
                        This is an array of shape (npts_x*npts_y, 3) and can be a Virtual
                        Dataset of x and y
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-units-attribute',
                        nxp_required='True',
                        )
                    class nxa_axes(NXobject):
                        '''
                            this should take the value
                            "translation:$slowaxisname:$fastaxisname"
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-axes-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_axes = SubSection(sub_section=nxa_axes.m_def,repeats=True,
                        nxp_name='axes',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-axes-attribute',
                        nxp_required='True',
                        )
                    class nxa_interpretation(NXobject):
                        '''
                            This should be "image"
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-interpretation-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_interpretation = SubSection(sub_section=nxa_interpretation.m_def,repeats=True,
                        nxp_name='interpretation',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-interpretation-attribute',
                        nxp_required='True',
                        )
                nxf_translation = SubSection(sub_section=nxf_translation.m_def,repeats=True,
                    nxp_name='translation',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-field',
                    nxp_required='True',
                    )
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_INT',
                    nxp_signal='1',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-data-field',
                    nxp_required='True',
                    )
                class nxf_x_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-x-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-x-pixel-size-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-x-pixel-size-units-attribute',
                        nxp_required='True',
                        )
                nxf_x_pixel_size = SubSection(sub_section=nxf_x_pixel_size.m_def,repeats=True,
                    nxp_name='x_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-x-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_y_pixel_size(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-y-pixel-size-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-y-pixel-size-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-y-pixel-size-units-attribute',
                        nxp_required='True',
                        )
                nxf_y_pixel_size = SubSection(sub_section=nxf_y_pixel_size.m_def,repeats=True,
                    nxp_name='y_pixel_size',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-y-pixel-size-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
                        The distance between the detector and the sample
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-distance-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-distance-units-attribute',
                        nxp_required='True',
                        )
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='1',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-distance-field',
                    nxp_required='True',
                    )
                class nxf_beam_center_x(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-x-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-x-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-x-units-attribute',
                        nxp_required='True',
                        )
                nxf_beam_center_x = SubSection(sub_section=nxf_beam_center_x.m_def,repeats=True,
                    nxp_name='beam_center_x',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-x-field',
                    nxp_optional='True',
                    )
                class nxf_beam_center_y(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-y-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    class nxa_units(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-y-units-attribute
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxa_units = SubSection(sub_section=nxa_units.m_def,repeats=True,
                        nxp_name='units',
                        nxp_type='NX_CHAR',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-y-units-attribute',
                        nxp_required='True',
                        )
                nxf_beam_center_y = SubSection(sub_section=nxf_beam_center_y.m_def,repeats=True,
                    nxp_name='beam_center_y',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_minOccurs='0',
                    nxp_maxOccurs='1',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-y-field',
                    nxp_optional='True',
                    )
                class nxg_transformations(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-transformations-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
                    class nxf_vector(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-transformations-vector-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxf_vector = SubSection(sub_section=nxf_vector.m_def,repeats=True,
                        nxp_name='vector',
                        nxp_type='NX_NUMBER',
                        nxp_minOccurs='1',
                        nxp_maxOccurs='1',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-transformations-vector-field',
                        nxp_required='True',
                        )
                nxg_transformations = SubSection(sub_section=nxg_transformations.m_def,repeats=True,
                    nxp_type='NXtransformations',
                    nxp_name='transformations',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-transformations-group',
                    nxp_required='True',
                    )
            nxg_detector_1 = SubSection(sub_section=nxg_detector_1.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_name='detector_1',
                nxp_minOccurs='1',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-group',
                nxp_required='True',
                )
            class nxg_MONITOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-monitor-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
                class nxf_data(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-monitor-data-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                    nxp_name='data',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-monitor-data-field',
                    nxp_required='True',
                    )
            nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
                nxp_type='NXmonitor',
                nxp_minOccurs='0',
                nxp_maxOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-monitor-group',
                nxp_optional='True',
                )
        nxg_instrument_1 = SubSection(sub_section=nxg_instrument_1.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument_1',
            nxp_minOccurs='1',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-group',
            nxp_required='True',
            )
    nxg_entry_1 = SubSection(sub_section=nxg_entry_1.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_name='entry_1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-group',
        nxp_required='True',
        )
    class nxg_DATA(NXobject):
        '''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        class nxa_axes(NXobject):
            '''
                This should be "[x,.]" for arbitrary scanning patterns, and "[x,.,.]" for
                raster
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-axes-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_axes = SubSection(sub_section=nxa_axes.m_def,repeats=True,
            nxp_name='axes',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-axes-attribute',
            nxp_required='True',
            )
        class nxa_signal(NXobject):
            '''
                This should be "data"
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-signal-attribute
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxa_signal = SubSection(sub_section=nxa_signal.m_def,repeats=True,
            nxp_name='signal',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-signal-attribute',
            nxp_required='True',
            )
        class nxf_x_indices(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-x-indices-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_x_indices = SubSection(sub_section=nxf_x_indices.m_def,repeats=True,
            nxp_name='x_indices',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-x-indices-field',
            nxp_required='True',
            )
        class nxf_y_indices(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-y-indices-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_y_indices = SubSection(sub_section=nxf_y_indices.m_def,repeats=True,
            nxp_name='y_indices',
            nxp_type='NX_CHAR',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-y-indices-field',
            nxp_required='True',
            )
    nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
        nxp_type='NXdata',
        nxp_minOccurs='1',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-group',
        nxp_required='True',
        )
    class nxg_data_1(NXobject):
        '''
            To ensure CXI compatibility the data in this group must always have shape that
            is                                 (npts_x*npts_y, frame_size_x,
            frame_size_y). For nexus-style raster scans it is proposed that
            hdf5 virtual dataset is used.
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-1-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
    nxg_data_1 = SubSection(sub_section=nxg_data_1.m_def,repeats=True,
        nxp_type='NXcollection',
        nxp_name='data_1',
        nxp_minOccurs='1',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-1-group',
        nxp_required='True',
        )
    class nxg_sample_1(NXobject):
        '''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
        class nxf_name(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-name-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
            nxp_name='name',
            nxp_type='NX_CHAR',
            nxp_minOccurs='0',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-name-field',
            nxp_optional='True',
            )
        class nxf_transformations(NXobject):
            '''
                This must contain two fields with the x and y motors that are linked via
                the                                          dependency tree according to
                the real-life motor layout dependency.
                For raster scans x and y will have shape (npts_x, npts_y)
                For arbitrary scans x and y will be (npts_x*npts_y,)
                An attribute with the units for each motor is required.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-transformations-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
            class nxa_vector(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-transformations-vector-attribute
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxa_vector = SubSection(sub_section=nxa_vector.m_def,repeats=True,
                nxp_name='vector',
                nxp_type='NX_NUMBER',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-transformations-vector-attribute',
                nxp_required='True',
                )
        nxf_transformations = SubSection(sub_section=nxf_transformations.m_def,repeats=True,
            nxp_name='transformations',
            nxp_type='NXtransformations',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-transformations-field',
            nxp_required='True',
            )
        class nxg_geometry_1(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-geometry-1-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
        nxg_geometry_1 = SubSection(sub_section=nxg_geometry_1.m_def,repeats=True,
            nxp_type='NXcollection',
            nxp_name='geometry_1',
            nxp_minOccurs='1',
            nxp_maxOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-geometry-1-group',
            nxp_required='True',
            )
    nxg_sample_1 = SubSection(sub_section=nxg_sample_1.m_def,repeats=True,
        nxp_type='NXsample',
        nxp_name='sample_1',
        nxp_minOccurs='1',
        nxp_maxOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-group',
        nxp_required='True',
        )

class NXsnsevent(NXobject):
    '''
This is a definition for event data from Spallation Neutron Source (SNS) at ORNL.
        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent
        .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_type='group',
        nxp_name='NXsnsevent',
        nxp_category='contributed',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent',
        nxp_required='True',
        )
    class nxg_ENTRY(NXobject):
        '''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        class nxf_collection_identifier(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-collection-identifier-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_collection_identifier = SubSection(sub_section=nxf_collection_identifier.m_def,repeats=True,
            nxp_name='collection_identifier',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-collection-identifier-field',
            nxp_required='True',
            )
        class nxf_collection_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-collection-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_collection_title = SubSection(sub_section=nxf_collection_title.m_def,repeats=True,
            nxp_name='collection_title',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-collection-title-field',
            nxp_required='True',
            )
        class nxf_definition(NXobject):
            '''
                Official NXDL schema after this file goes to applications.
                Obligatory value:    ['NXsnsevent']

                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-definition-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_definition = SubSection(sub_section=nxf_definition.m_def,repeats=True,
            nxp_name='definition',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-definition-field',
            nxp_required='True',
            enumeration=['NXsnsevent'],
            )
        class nxf_duration(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-duration-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
            nxp_name='duration',
            nxp_type='NX_FLOAT',
            nxp_units='NX_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-duration-field',
            nxp_required='True',
            )
        class nxf_end_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-end-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_end_time = SubSection(sub_section=nxf_end_time.m_def,repeats=True,
            nxp_name='end_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-end-time-field',
            nxp_required='True',
            )
        class nxf_entry_identifier(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-entry-identifier-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_entry_identifier = SubSection(sub_section=nxf_entry_identifier.m_def,repeats=True,
            nxp_name='entry_identifier',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-entry-identifier-field',
            nxp_required='True',
            )
        class nxf_experiment_identifier(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-experiment-identifier-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_experiment_identifier = SubSection(sub_section=nxf_experiment_identifier.m_def,repeats=True,
            nxp_name='experiment_identifier',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-experiment-identifier-field',
            nxp_required='True',
            )
        class nxf_notes(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-notes-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_notes = SubSection(sub_section=nxf_notes.m_def,repeats=True,
            nxp_name='notes',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-notes-field',
            nxp_required='True',
            )
        class nxf_proton_charge(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-proton-charge-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxf_proton_charge = SubSection(sub_section=nxf_proton_charge.m_def,repeats=True,
            nxp_name='proton_charge',
            nxp_type='NX_FLOAT',
            nxp_units='NX_CHARGE',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-proton-charge-field',
            nxp_required='True',
            )
        class nxf_raw_frames(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-raw-frames-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxf_raw_frames = SubSection(sub_section=nxf_raw_frames.m_def,repeats=True,
            nxp_name='raw_frames',
            nxp_type='NX_INT',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-raw-frames-field',
            nxp_required='True',
            )
        class nxf_run_number(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-run-number-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_run_number = SubSection(sub_section=nxf_run_number.m_def,repeats=True,
            nxp_name='run_number',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-run-number-field',
            nxp_required='True',
            )
        class nxf_start_time(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-start-time-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxf_start_time = SubSection(sub_section=nxf_start_time.m_def,repeats=True,
            nxp_name='start_time',
            nxp_type='NX_DATE_TIME',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-start-time-field',
            nxp_required='True',
            )
        class nxf_title(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-title-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxf_title = SubSection(sub_section=nxf_title.m_def,repeats=True,
            nxp_name='title',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-title-field',
            nxp_required='True',
            )
        class nxf_total_counts(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-total-counts-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
        nxf_total_counts = SubSection(sub_section=nxf_total_counts.m_def,repeats=True,
            nxp_name='total_counts',
            nxp_type='NX_UINT',
            nxp_units='NX_UNITLESS',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-total-counts-field',
            nxp_required='True',
            )
        class nxf_total_uncounted_counts(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-total-uncounted-counts-field
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
        nxf_total_uncounted_counts = SubSection(sub_section=nxf_total_uncounted_counts.m_def,repeats=True,
            nxp_name='total_uncounted_counts',
            nxp_type='NX_UINT',
            nxp_units='NX_UNITLESS',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-total-uncounted-counts-field',
            nxp_required='True',
            )
        class nxg_DASlogs(NXobject):
            '''
                Details of all logs, both from cvinfo file and from HistoTool (frequency
                and proton_charge).
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
            class nxg_LOG(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
                class nxf_average_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value = SubSection(sub_section=nxf_average_value.m_def,repeats=True,
                    nxp_name='average_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-field',
                    nxp_required='True',
                    )
                class nxf_average_value_error(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-error-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value_error = SubSection(sub_section=nxf_average_value_error.m_def,repeats=True,
                    nxp_name='average_value_error',
                    nxp_type='NX_FLOAT',
                    deprecated=''' DEPRECATED:
                    see https://github.com/nexusformat/definitions/issues/821
                    ''',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-error-field',
                    nxp_required='True',
                    )
                class nxf_average_value_errors(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-errors-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value_errors = SubSection(sub_section=nxf_average_value_errors.m_def,repeats=True,
                    nxp_name='average_value_errors',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-errors-field',
                    nxp_required='True',
                    )
                class nxf_description(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-description-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                    nxp_name='description',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-description-field',
                    nxp_required='True',
                    )
                class nxf_duration(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-duration-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
                    nxp_name='duration',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-duration-field',
                    nxp_required='True',
                    )
                class nxf_maximum_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-maximum-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_maximum_value = SubSection(sub_section=nxf_maximum_value.m_def,repeats=True,
                    nxp_name='maximum_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-maximum-value-field',
                    nxp_required='True',
                    )
                class nxf_minimum_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-minimum-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_minimum_value = SubSection(sub_section=nxf_minimum_value.m_def,repeats=True,
                    nxp_name='minimum_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-minimum-value-field',
                    nxp_required='True',
                    )
                class nxf_time(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-time-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time = SubSection(sub_section=nxf_time.m_def,repeats=True,
                    nxp_name='time',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-time-field',
                    nxp_required='True',
                    )
                class nxf_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
                    nxp_name='value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-value-field',
                    nxp_required='True',
                    )
            nxg_LOG = SubSection(sub_section=nxg_LOG.m_def,repeats=True,
                nxp_type='NXlog',
                nxp_minOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-group',
                nxp_required='True',
                )
            class nxg_POSITIONER(NXobject):
                '''
                    Motor logs from cvinfo file.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXpositioner.m_def,repeats=True)
                class nxf_average_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value = SubSection(sub_section=nxf_average_value.m_def,repeats=True,
                    nxp_name='average_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-field',
                    nxp_required='True',
                    )
                class nxf_average_value_error(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-error-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value_error = SubSection(sub_section=nxf_average_value_error.m_def,repeats=True,
                    nxp_name='average_value_error',
                    nxp_type='NX_FLOAT',
                    deprecated=''' DEPRECATED:
                    see https://github.com/nexusformat/definitions/issues/821
                    ''',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-error-field',
                    nxp_required='True',
                    )
                class nxf_average_value_errors(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-errors-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_average_value_errors = SubSection(sub_section=nxf_average_value_errors.m_def,repeats=True,
                    nxp_name='average_value_errors',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-errors-field',
                    nxp_required='True',
                    )
                class nxf_description(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-description-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                    nxp_name='description',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-description-field',
                    nxp_required='True',
                    )
                class nxf_duration(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-duration-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_duration = SubSection(sub_section=nxf_duration.m_def,repeats=True,
                    nxp_name='duration',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-duration-field',
                    nxp_required='True',
                    )
                class nxf_maximum_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-maximum-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_maximum_value = SubSection(sub_section=nxf_maximum_value.m_def,repeats=True,
                    nxp_name='maximum_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-maximum-value-field',
                    nxp_required='True',
                    )
                class nxf_minimum_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-minimum-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_minimum_value = SubSection(sub_section=nxf_minimum_value.m_def,repeats=True,
                    nxp_name='minimum_value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-minimum-value-field',
                    nxp_required='True',
                    )
                class nxf_time(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-time-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_time = SubSection(sub_section=nxf_time.m_def,repeats=True,
                    nxp_name='time',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-time-field',
                    nxp_required='True',
                    )
                class nxf_value(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-value-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
                    nxp_name='value',
                    nxp_type='NX_FLOAT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-value-field',
                    nxp_required='True',
                    )
            nxg_POSITIONER = SubSection(sub_section=nxg_POSITIONER.m_def,repeats=True,
                nxp_type='NXpositioner',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-group',
                nxp_optional='True',
                )
        nxg_DASlogs = SubSection(sub_section=nxg_DASlogs.m_def,repeats=True,
            nxp_type='NXcollection',
            nxp_name='DASlogs',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-group',
            nxp_required='True',
            )
        class nxg_SNSHistoTool(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            class nxf_SNSbanking_file_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-snsbanking-file-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SNSbanking_file_name = SubSection(sub_section=nxf_SNSbanking_file_name.m_def,repeats=True,
                nxp_name='SNSbanking_file_name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-snsbanking-file-name-field',
                nxp_required='True',
                )
            class nxf_SNSmapping_file_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-snsmapping-file-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SNSmapping_file_name = SubSection(sub_section=nxf_SNSmapping_file_name.m_def,repeats=True,
                nxp_name='SNSmapping_file_name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-snsmapping-file-name-field',
                nxp_required='True',
                )
            class nxf_author(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-author-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_author = SubSection(sub_section=nxf_author.m_def,repeats=True,
                nxp_name='author',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-author-field',
                nxp_required='True',
                )
            class nxf_command1(NXobject):
                '''
                    Command string for event2nxl.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-command1-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_command1 = SubSection(sub_section=nxf_command1.m_def,repeats=True,
                nxp_name='command1',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-command1-field',
                nxp_required='True',
                )
            class nxf_date(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-date-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_date = SubSection(sub_section=nxf_date.m_def,repeats=True,
                nxp_name='date',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-date-field',
                nxp_required='True',
                )
            class nxf_description(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-description-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                nxp_name='description',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-description-field',
                nxp_required='True',
                )
            class nxf_version(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-version-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_version = SubSection(sub_section=nxf_version.m_def,repeats=True,
                nxp_name='version',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-version-field',
                nxp_required='True',
                )
        nxg_SNSHistoTool = SubSection(sub_section=nxg_SNSHistoTool.m_def,repeats=True,
            nxp_type='NXnote',
            nxp_name='SNSHistoTool',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-group',
            nxp_required='True',
            )
        class nxg_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxg_DATA = SubSection(sub_section=nxg_DATA.m_def,repeats=True,
            nxp_type='NXdata',
            nxp_minOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-data-group',
            nxp_required='True',
            )
        class nxg_EVENT_DATA(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-event-data-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXevent_data.m_def,repeats=True)
        nxg_EVENT_DATA = SubSection(sub_section=nxg_EVENT_DATA.m_def,repeats=True,
            nxp_type='NXevent_data',
            nxp_minOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-event-data-group',
            nxp_required='True',
            )
        class nxg_instrument(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            class nxf_SNSdetector_calibration_id(NXobject):
                '''
                    Detector calibration id from DAS.
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snsdetector-calibration-id-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SNSdetector_calibration_id = SubSection(sub_section=nxf_SNSdetector_calibration_id.m_def,repeats=True,
                nxp_name='SNSdetector_calibration_id',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snsdetector-calibration-id-field',
                nxp_required='True',
                )
            class nxf_SNSgeometry_file_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snsgeometry-file-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SNSgeometry_file_name = SubSection(sub_section=nxf_SNSgeometry_file_name.m_def,repeats=True,
                nxp_name='SNSgeometry_file_name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snsgeometry-file-name-field',
                nxp_required='True',
                )
            class nxf_SNStranslation_service(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snstranslation-service-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_SNStranslation_service = SubSection(sub_section=nxf_SNStranslation_service.m_def,repeats=True,
                nxp_name='SNStranslation_service',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snstranslation-service-field',
                nxp_required='True',
                )
            class nxf_beamline(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-beamline-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_beamline = SubSection(sub_section=nxf_beamline.m_def,repeats=True,
                nxp_name='beamline',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-beamline-field',
                nxp_required='True',
                )
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-name-field',
                nxp_required='True',
                )
            class nxg_SNS(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                class nxf_frequency(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-frequency-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_frequency = SubSection(sub_section=nxf_frequency.m_def,repeats=True,
                    nxp_name='frequency',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_FREQUENCY',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-frequency-field',
                    nxp_required='True',
                    )
                class nxf_name(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-name-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                    nxp_name='name',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-name-field',
                    nxp_required='True',
                    )
                class nxf_probe(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-probe-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_probe = SubSection(sub_section=nxf_probe.m_def,repeats=True,
                    nxp_name='probe',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-probe-field',
                    nxp_required='True',
                    )
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-type-field',
                    nxp_required='True',
                    )
            nxg_SNS = SubSection(sub_section=nxg_SNS.m_def,repeats=True,
                nxp_type='NXsource',
                nxp_name='SNS',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-group',
                nxp_required='True',
                )
            class nxg_DETECTOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                class nxf_azimuthal_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-azimuthal-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_azimuthal_angle = SubSection(sub_section=nxf_azimuthal_angle.m_def,repeats=True,
                    nxp_name='azimuthal_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-azimuthal-angle-field',
                    nxp_required='True',
                    )
                class nxf_data_x_y(NXobject):
                    '''
expect  ``signal=2 axes="x_pixel_offset,y_pixel_offset``"
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-data-x-y-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_data_x_y = SubSection(sub_section=nxf_data_x_y.m_def,repeats=True,
                    nxp_name='data_x_y',
                    nxp_type='NX_UINT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-data-x-y-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-distance-field',
                    nxp_required='True',
                    )
                class nxf_event_index(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-index-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_event_index = SubSection(sub_section=nxf_event_index.m_def,repeats=True,
                    nxp_name='event_index',
                    nxp_type='NX_UINT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-index-field',
                    nxp_required='True',
                    )
                class nxf_event_pixel_id(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-pixel-id-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_event_pixel_id = SubSection(sub_section=nxf_event_pixel_id.m_def,repeats=True,
                    nxp_name='event_pixel_id',
                    nxp_type='NX_UINT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-pixel-id-field',
                    nxp_required='True',
                    )
                class nxf_event_time_of_flight(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-time-of-flight-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_event_time_of_flight = SubSection(sub_section=nxf_event_time_of_flight.m_def,repeats=True,
                    nxp_name='event_time_of_flight',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TIME_OF_FLIGHT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-time-of-flight-field',
                    nxp_required='True',
                    )
                class nxf_pixel_id(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-pixel-id-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_pixel_id = SubSection(sub_section=nxf_pixel_id.m_def,repeats=True,
                    nxp_name='pixel_id',
                    nxp_type='NX_UINT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-pixel-id-field',
                    nxp_required='True',
                    )
                class nxf_polar_angle(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-polar-angle-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_polar_angle = SubSection(sub_section=nxf_polar_angle.m_def,repeats=True,
                    nxp_name='polar_angle',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_ANGLE',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-polar-angle-field',
                    nxp_required='True',
                    )
                class nxf_pulse_time(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-pulse-time-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_pulse_time = SubSection(sub_section=nxf_pulse_time.m_def,repeats=True,
                    nxp_name='pulse_time',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TIME',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-pulse-time-field',
                    nxp_required='True',
                    )
                class nxf_total_counts(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-total-counts-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxf_total_counts = SubSection(sub_section=nxf_total_counts.m_def,repeats=True,
                    nxp_name='total_counts',
                    nxp_type='NX_UINT',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-total-counts-field',
                    nxp_required='True',
                    )
                class nxf_x_pixel_offset(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-x-pixel-offset-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_offset = SubSection(sub_section=nxf_x_pixel_offset.m_def,repeats=True,
                    nxp_name='x_pixel_offset',
                    nxp_type='NX_FLOAT',
                    nxp_axis='1',
                    nxp_primary='1',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-x-pixel-offset-field',
                    nxp_required='True',
                    )
                class nxf_y_pixel_offset(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-y-pixel-offset-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_y_pixel_offset = SubSection(sub_section=nxf_y_pixel_offset.m_def,repeats=True,
                    nxp_name='y_pixel_offset',
                    nxp_type='NX_FLOAT',
                    nxp_axis='2',
                    nxp_primary='1',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-y-pixel-offset-field',
                    nxp_required='True',
                    )
                class nxg_origin(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    class nxg_orientation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-orientation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        class nxf_value(NXobject):
                            '''
                                Six out of nine rotation parameters.
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-orientation-value-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
                            nxp_name='value',
                            nxp_type='NX_FLOAT',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-orientation-value-field',
                            nxp_required='True',
                            )
                    nxg_orientation = SubSection(sub_section=nxg_orientation.m_def,repeats=True,
                        nxp_type='NXorientation',
                        nxp_name='orientation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-orientation-group',
                        nxp_required='True',
                        )
                    class nxg_shape(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        class nxf_description(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-description-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                            nxp_name='description',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-description-field',
                            nxp_required='True',
                            )
                        class nxf_shape(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-shape-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_shape = SubSection(sub_section=nxf_shape.m_def,repeats=True,
                            nxp_name='shape',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-shape-field',
                            nxp_required='True',
                            )
                        class nxf_size(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-size-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_size = SubSection(sub_section=nxf_size.m_def,repeats=True,
                            nxp_name='size',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-size-field',
                            nxp_required='True',
                            )
                    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
                        nxp_type='NXshape',
                        nxp_name='shape',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-group',
                        nxp_required='True',
                        )
                    class nxg_translation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-translation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        class nxf_distance(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-translation-distance-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                            nxp_name='distance',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-translation-distance-field',
                            nxp_required='True',
                            )
                    nxg_translation = SubSection(sub_section=nxg_translation.m_def,repeats=True,
                        nxp_type='NXtranslation',
                        nxp_name='translation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-translation-group',
                        nxp_required='True',
                        )
                nxg_origin = SubSection(sub_section=nxg_origin.m_def,repeats=True,
                    nxp_type='NXgeometry',
                    nxp_name='origin',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-group',
                    nxp_required='True',
                    )
            nxg_DETECTOR = SubSection(sub_section=nxg_DETECTOR.m_def,repeats=True,
                nxp_type='NXdetector',
                nxp_minOccurs='1',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-group',
                nxp_required='True',
                )
            class nxg_DISK_CHOPPER(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-disk-chopper-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXdisk_chopper.m_def,repeats=True)
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-disk-chopper-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-disk-chopper-distance-field',
                    nxp_required='True',
                    )
            nxg_DISK_CHOPPER = SubSection(sub_section=nxg_DISK_CHOPPER.m_def,repeats=True,
                nxp_type='NXdisk_chopper',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-disk-chopper-group',
                nxp_optional='True',
                )
            class nxg_moderator(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXmoderator.m_def,repeats=True)
                class nxf_coupling_material(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-coupling-material-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_coupling_material = SubSection(sub_section=nxf_coupling_material.m_def,repeats=True,
                    nxp_name='coupling_material',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-coupling-material-field',
                    nxp_required='True',
                    )
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-distance-field',
                    nxp_required='True',
                    )
                class nxf_temperature(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-temperature-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_temperature = SubSection(sub_section=nxf_temperature.m_def,repeats=True,
                    nxp_name='temperature',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_TEMPERATURE',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-temperature-field',
                    nxp_required='True',
                    )
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-type-field',
                    nxp_required='True',
                    )
            nxg_moderator = SubSection(sub_section=nxg_moderator.m_def,repeats=True,
                nxp_type='NXmoderator',
                nxp_name='moderator',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-group',
                nxp_required='True',
                )
            class nxg_APERTURE(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXaperture.m_def,repeats=True)
                class nxf_x_pixel_offset(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-x-pixel-offset-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_x_pixel_offset = SubSection(sub_section=nxf_x_pixel_offset.m_def,repeats=True,
                    nxp_name='x_pixel_offset',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-x-pixel-offset-field',
                    nxp_required='True',
                    )
                class nxg_origin(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    class nxg_orientation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-orientation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        class nxf_value(NXobject):
                            '''
                                Six out of nine rotation parameters.
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-orientation-value-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
                            nxp_name='value',
                            nxp_type='NX_FLOAT',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-orientation-value-field',
                            nxp_required='True',
                            )
                    nxg_orientation = SubSection(sub_section=nxg_orientation.m_def,repeats=True,
                        nxp_type='NXorientation',
                        nxp_name='orientation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-orientation-group',
                        nxp_required='True',
                        )
                    class nxg_shape(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        class nxf_description(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-description-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                            nxp_name='description',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-description-field',
                            nxp_required='True',
                            )
                        class nxf_shape(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-shape-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_shape = SubSection(sub_section=nxf_shape.m_def,repeats=True,
                            nxp_name='shape',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-shape-field',
                            nxp_required='True',
                            )
                        class nxf_size(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-size-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_size = SubSection(sub_section=nxf_size.m_def,repeats=True,
                            nxp_name='size',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-size-field',
                            nxp_required='True',
                            )
                    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
                        nxp_type='NXshape',
                        nxp_name='shape',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-group',
                        nxp_required='True',
                        )
                    class nxg_translation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-translation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        class nxf_distance(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-translation-distance-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                            nxp_name='distance',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-translation-distance-field',
                            nxp_required='True',
                            )
                    nxg_translation = SubSection(sub_section=nxg_translation.m_def,repeats=True,
                        nxp_type='NXtranslation',
                        nxp_name='translation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-translation-group',
                        nxp_required='True',
                        )
                nxg_origin = SubSection(sub_section=nxg_origin.m_def,repeats=True,
                    nxp_type='NXgeometry',
                    nxp_name='origin',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-group',
                    nxp_required='True',
                    )
            nxg_APERTURE = SubSection(sub_section=nxg_APERTURE.m_def,repeats=True,
                nxp_type='NXaperture',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-group',
                nxp_optional='True',
                )
            class nxg_ATTENUATOR(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-attenuator-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXattenuator.m_def,repeats=True)
                class nxf_distance(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-attenuator-distance-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                    nxp_name='distance',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_LENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-attenuator-distance-field',
                    nxp_required='True',
                    )
            nxg_ATTENUATOR = SubSection(sub_section=nxg_ATTENUATOR.m_def,repeats=True,
                nxp_type='NXattenuator',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-attenuator-group',
                nxp_optional='True',
                )
            class nxg_POLARIZER(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-polarizer-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXpolarizer.m_def,repeats=True)
            nxg_POLARIZER = SubSection(sub_section=nxg_POLARIZER.m_def,repeats=True,
                nxp_type='NXpolarizer',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-polarizer-group',
                nxp_optional='True',
                )
            class nxg_CRYSTAL(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-group
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                class nxf_type(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-type-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxf_type = SubSection(sub_section=nxf_type.m_def,repeats=True,
                    nxp_name='type',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-type-field',
                    nxp_required='True',
                    )
                class nxf_wavelength(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-wavelength-field
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxf_wavelength = SubSection(sub_section=nxf_wavelength.m_def,repeats=True,
                    nxp_name='wavelength',
                    nxp_type='NX_FLOAT',
                    nxp_units='NX_WAVELENGTH',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-wavelength-field',
                    nxp_required='True',
                    )
                class nxg_origin(NXobject):
                    '''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-group
                        .
                    '''
                    m_def = Section(validate=False,
                        )
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    class nxf_description(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-description-field
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                        nxp_name='description',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-description-field',
                        nxp_required='True',
                        )
                    class nxg_orientation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-orientation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        class nxf_value(NXobject):
                            '''
                                Six out of nine rotation parameters.
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-orientation-value-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_value = SubSection(sub_section=nxf_value.m_def,repeats=True,
                            nxp_name='value',
                            nxp_type='NX_FLOAT',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-orientation-value-field',
                            nxp_required='True',
                            )
                    nxg_orientation = SubSection(sub_section=nxg_orientation.m_def,repeats=True,
                        nxp_type='NXorientation',
                        nxp_name='orientation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-orientation-group',
                        nxp_required='True',
                        )
                    class nxg_shape(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        class nxf_description(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-description-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_description = SubSection(sub_section=nxf_description.m_def,repeats=True,
                            nxp_name='description',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-description-field',
                            nxp_required='True',
                            )
                        class nxf_shape(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-shape-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxf_shape = SubSection(sub_section=nxf_shape.m_def,repeats=True,
                            nxp_name='shape',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-shape-field',
                            nxp_required='True',
                            )
                        class nxf_size(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-size-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_size = SubSection(sub_section=nxf_size.m_def,repeats=True,
                            nxp_name='size',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-size-field',
                            nxp_required='True',
                            )
                    nxg_shape = SubSection(sub_section=nxg_shape.m_def,repeats=True,
                        nxp_type='NXshape',
                        nxp_name='shape',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-group',
                        nxp_required='True',
                        )
                    class nxg_translation(NXobject):
                        '''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-translation-group
                            .
                        '''
                        m_def = Section(validate=False,
                            )
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        class nxf_distance(NXobject):
                            '''
                                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-translation-distance-field
                                .
                            '''
                            m_def = Section(validate=False,
                                )
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                        nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                            nxp_name='distance',
                            nxp_type='NX_FLOAT',
                            nxp_units='NX_LENGTH',
                            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-translation-distance-field',
                            nxp_required='True',
                            )
                    nxg_translation = SubSection(sub_section=nxg_translation.m_def,repeats=True,
                        nxp_type='NXtranslation',
                        nxp_name='translation',
                        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-translation-group',
                        nxp_required='True',
                        )
                nxg_origin = SubSection(sub_section=nxg_origin.m_def,repeats=True,
                    nxp_type='NXgeometry',
                    nxp_name='origin',
                    nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-group',
                    nxp_required='True',
                    )
            nxg_CRYSTAL = SubSection(sub_section=nxg_CRYSTAL.m_def,repeats=True,
                nxp_type='NXcrystal',
                nxp_minOccurs='0',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-group',
                nxp_optional='True',
                )
        nxg_instrument = SubSection(sub_section=nxg_instrument.m_def,repeats=True,
            nxp_type='NXinstrument',
            nxp_name='instrument',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group',
            nxp_required='True',
            )
        class nxg_MONITOR(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            class nxf_data(NXobject):
                '''
expect  ``signal=1 axes="time_of_flight"``
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-data-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
            nxf_data = SubSection(sub_section=nxf_data.m_def,repeats=True,
                nxp_name='data',
                nxp_type='NX_UINT',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-data-field',
                nxp_required='True',
                )
            class nxf_distance(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-distance-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_distance = SubSection(sub_section=nxf_distance.m_def,repeats=True,
                nxp_name='distance',
                nxp_type='NX_FLOAT',
                nxp_units='NX_LENGTH',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-distance-field',
                nxp_required='True',
                )
            class nxf_mode(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-mode-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_mode = SubSection(sub_section=nxf_mode.m_def,repeats=True,
                nxp_name='mode',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-mode-field',
                nxp_required='True',
                )
            class nxf_time_of_flight(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-time-of-flight-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxf_time_of_flight = SubSection(sub_section=nxf_time_of_flight.m_def,repeats=True,
                nxp_name='time_of_flight',
                nxp_type='NX_FLOAT',
                nxp_units='NX_TIME',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-time-of-flight-field',
                nxp_required='True',
                )
        nxg_MONITOR = SubSection(sub_section=nxg_MONITOR.m_def,repeats=True,
            nxp_type='NXmonitor',
            nxp_minOccurs='0',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-group',
            nxp_optional='True',
            )
        class nxg_sample(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            class nxf_changer_position(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-changer-position-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_changer_position = SubSection(sub_section=nxf_changer_position.m_def,repeats=True,
                nxp_name='changer_position',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-changer-position-field',
                nxp_required='True',
                )
            class nxf_holder(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-holder-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_holder = SubSection(sub_section=nxf_holder.m_def,repeats=True,
                nxp_name='holder',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-holder-field',
                nxp_required='True',
                )
            class nxf_identifier(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-identifier-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_identifier = SubSection(sub_section=nxf_identifier.m_def,repeats=True,
                nxp_name='identifier',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-identifier-field',
                nxp_required='True',
                )
            class nxf_name(NXobject):
                '''
Descriptive name of sample
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-name-field',
                nxp_required='True',
                )
            class nxf_nature(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-nature-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_nature = SubSection(sub_section=nxf_nature.m_def,repeats=True,
                nxp_name='nature',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-nature-field',
                nxp_required='True',
                )
        nxg_sample = SubSection(sub_section=nxg_sample.m_def,repeats=True,
            nxp_type='NXsample',
            nxp_name='sample',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-group',
            nxp_required='True',
            )
        class nxg_USER(NXobject):
            '''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-group
                .
            '''
            m_def = Section(validate=False,
                )
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            class nxf_facility_user_id(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-facility-user-id-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_facility_user_id = SubSection(sub_section=nxf_facility_user_id.m_def,repeats=True,
                nxp_name='facility_user_id',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-facility-user-id-field',
                nxp_required='True',
                )
            class nxf_name(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-name-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_name = SubSection(sub_section=nxf_name.m_def,repeats=True,
                nxp_name='name',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-name-field',
                nxp_required='True',
                )
            class nxf_role(NXobject):
                '''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-role-field
                    .
                '''
                m_def = Section(validate=False,
                    )
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxf_role = SubSection(sub_section=nxf_role.m_def,repeats=True,
                nxp_name='role',
                nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-role-field',
                nxp_required='True',
                )
        nxg_USER = SubSection(sub_section=nxg_USER.m_def,repeats=True,
            nxp_type='NXuser',
            nxp_minOccurs='1',
            nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-group',
            nxp_required='True',
            )
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group',
        nxp_required='True',
        )

class NXroot(NXobject):
    '''
Definition of the root NeXus group.
        https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot .
    '''
    m_def = Section(
        validate=False,
        extends_base_section=True,
        nxp_category='base',
        nxp_name='NXroot',
        nxp_type='group',
        nxp_extends='NXobject',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot',
        nxp_optional='True',
        )
    class nxg_ENTRY(NXobject):
        '''
entries
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-entry-group
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
    nxg_ENTRY = SubSection(sub_section=nxg_ENTRY.m_def,repeats=True,
        nxp_type='NXentry',
        nxp_minOccurs='1',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-entry-group',
        nxp_required='True',
        )
    class nxa_NX_class(NXobject):
        '''
            The root of any NeXus data file is an ``NXroot`` class              (no other
            choice is allowed for a valid NeXus data file).               This attribute
            cements that definition.           Obligatory value:    ['NXroot']

            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-nx-class-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_NX_class = SubSection(sub_section=nxa_NX_class.m_def,repeats=True,
        nxp_name='NX_class',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-nx-class-attribute',
        nxp_optional='True',
        enumeration=['NXroot'],
        )
    class nxa_file_time(NXobject):
        '''
Date and time file was originally created
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-time-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxa_file_time = SubSection(sub_section=nxa_file_time.m_def,repeats=True,
        nxp_name='file_time',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-time-attribute',
        nxp_optional='True',
        )
    class nxa_file_name(NXobject):
        '''
File name of original NeXus file
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-name-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_file_name = SubSection(sub_section=nxa_file_name.m_def,repeats=True,
        nxp_name='file_name',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-name-attribute',
        nxp_optional='True',
        )
    class nxa_file_update_time(NXobject):
        '''
Date and time of last file change at close
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-update-time-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
    nxa_file_update_time = SubSection(sub_section=nxa_file_update_time.m_def,repeats=True,
        nxp_name='file_update_time',
        nxp_type='NX_DATE_TIME',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-update-time-attribute',
        nxp_optional='True',
        )
    class nxa_NeXus_version(NXobject):
        '''
            Version of NeXus API used in writing the file.                          Only
            used when the NAPI has written the file.             Note that this is
            different from the version of the             base class or application
            definition version number.
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-nexus-version-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_NeXus_version = SubSection(sub_section=nxa_NeXus_version.m_def,repeats=True,
        nxp_name='NeXus_version',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-nexus-version-attribute',
        nxp_optional='True',
        )
    class nxa_HDF_version(NXobject):
        '''
Version of HDF (version 4) library used in writing the file
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-hdf-version-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_HDF_version = SubSection(sub_section=nxa_HDF_version.m_def,repeats=True,
        nxp_name='HDF_version',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-hdf-version-attribute',
        nxp_optional='True',
        )
    class nxa_HDF5_Version(NXobject):
        '''
            Version of HDF5 library used in writing the file.
            Note this attribute is spelled with uppercase "V",             different than
            other version attributes.
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-hdf5-version-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_HDF5_Version = SubSection(sub_section=nxa_HDF5_Version.m_def,repeats=True,
        nxp_name='HDF5_Version',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-hdf5-version-attribute',
        nxp_optional='True',
        )
    class nxa_XML_version(NXobject):
        '''
Version of XML support library used in writing the XML file
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-xml-version-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_XML_version = SubSection(sub_section=nxa_XML_version.m_def,repeats=True,
        nxp_name='XML_version',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-xml-version-attribute',
        nxp_optional='True',
        )
    class nxa_h5py_version(NXobject):
        '''
Version of h5py Python package used in writing the file
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-h5py-version-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_h5py_version = SubSection(sub_section=nxa_h5py_version.m_def,repeats=True,
        nxp_name='h5py_version',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-h5py-version-attribute',
        nxp_optional='True',
        )
    class nxa_creator(NXobject):
        '''
facility or program where file originated
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-creator-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_creator = SubSection(sub_section=nxa_creator.m_def,repeats=True,
        nxp_name='creator',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-creator-attribute',
        nxp_optional='True',
        )
    class nxa_creator_version(NXobject):
        '''
Version of facility or program used in writing the file
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-creator-version-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_creator_version = SubSection(sub_section=nxa_creator_version.m_def,repeats=True,
        nxp_name='creator_version',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-creator-version-attribute',
        nxp_optional='True',
        )
    class nxa_default(NXobject):
        '''
            .. index:: plotting                          Declares which :ref:`NXentry`
            group contains              the data to be shown by default.             It is
            needed to resolve ambiguity when              more than one :ref:`NXentry`
            group exists.              The value is the name of the default :ref:`NXentry`
            group.                          It is recommended (as of NIAC2014) to use this
            attribute             to help define the path to the default dataset to be
            plotted.             See
            https://www.nexusformat.org/2014_How_to_find_default_data.html             for
            a summary of the discussion.
            https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-default-attribute
            .
        '''
        m_def = Section(validate=False,
            )
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
    nxa_default = SubSection(sub_section=nxa_default.m_def,repeats=True,
        nxp_name='default',
        nxp_documentation='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-default-attribute',
        nxp_optional='True',
        )


m_package.__init_metainfo__()
#None