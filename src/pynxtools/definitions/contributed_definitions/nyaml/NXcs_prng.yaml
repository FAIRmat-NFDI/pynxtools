category: base
doc: |
  Computer science description of pseudo-random number generator.
  
  The purpose of this base class is to identify if exactly the same sequence
  can be reproduced, like for a PRNG or not (for a true physically random source).
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
type: group
NXcs_prng(NXobject):
  type(NX_CHAR):
    doc: |
      Physical approach or algorithm whereby random numbers are generated.
      
      Different approaches for generating random numbers with a computer exists.
      Some use a dedicated physical device whose the state is unpredictable
      (physically). Some use a strategy of mangling information from the system
      clock. Also in this case the sequence is not reproducible without having
      additional pieces of information.
      
      In most cases though so-called pseudo-random number generator (PRNG)
      algorithms are used. These yield a deterministic sequence of practically
      randomly appearing numbers. These algorithms differ in their quality in
      how close the resulting sequences are random, i.e. sequentially
      uncorrelated. Nowadays one of the most commonly used algorithm is the
      MersenneTwister (mt19937).
    enumeration: [physical, system_clock, mt19937, other]
  (NXprogram):
    doc: |
      Name of the PRNG implementation and version. If such information is not
      available or if the PRNG type was set to other the DOI to the publication
      or the source code should be given.
  seed(NX_INT):
    doc: |
      Parameter of the PRNG controlling its initialization
      and thus controlling the specific sequence generated.
    unit: NX_UNITLESS
  warmup(NX_UINT):
    doc: |
      Number of initial draws from the PRNG after its initialized with the seed.
      These initial draws are typically discarded in an effort to equilibrate the
      sequence. If no warmup was performed or if warmup procedures are unclear,
      users should set the value to zero.
    unit: NX_UNITLESS
  # one could add spectral properties but this is usually well documented in the PRNG literature
  # one could also think about making reference to the NIST PRNG test suite to qualify the PRNG
