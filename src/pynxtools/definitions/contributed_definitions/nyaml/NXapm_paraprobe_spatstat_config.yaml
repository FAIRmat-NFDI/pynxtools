category: application
doc: |
  Application definition for a configuration file of the paraprobe-spatstat tool.
  
  This tool is part of the paraprobe-toolbox. Inspect :ref:`NXapm_paraprobe_tool_config` for details.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  n_ivec_max: |
    Maximum number of atoms per molecular ion. Should be 32 for paraprobe.
  n_ion_source: |
    Number of different source iontypes to distinguish.
  n_ion_target: |
    Number of different target iontypes to distinguish.
type: group
NXapm_paraprobe_spatstat_config(NXobject):
  (NXentry):
    exists: [min, 1, max, 1]
    definition(NX_CHAR):
      \@version(NX_CHAR):
      enumeration: [NXapm_paraprobe_spatstat_config]
    number_of_tasks(NX_UINT):
      doc: |
        How many spatial_statistics tasks should the tool execute.
      unit: NX_UNITLESS
    spatial_statisticsID(NXapm_paraprobe_tool_config):
      exists: [min, 1, max, infty]
      (NXidentifier):
        exists: optional
      analysis_identifier(NX_UINT):
        exists: recommended
      reconstruction(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        position(NX_CHAR):
        mass_to_charge(NX_CHAR):
      ranging(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        ranging_definitions(NX_CHAR):
      surface_distance(NXserialized):
        exists: optional
        doc: |
          Distance between each ion and triangulated surface mesh.
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        distance(NX_CHAR):
        edge_distance(NX_FLOAT):
          doc: |
            Threshold to define how far an ion has to lay at least from the edge
            of the dataset so that the ion can act as a source. This means that
            an ROI is placed at the location of the ion and its neighbors are
            analyzed how they contribute to the computed statistics.
            
            The edge_distance threshold can be combined with the feature_distance threshold. This threshold defines defines up to which distance to a
            microstructural feature an ROI is placed.
            
            The threshold is useful to process the dataset such that ROIs do
            not protrude out of the dataset as this would add bias.
          unit: NX_LENGTH
      feature_distance(NXserialized):
        exists: optional
        doc: |
          Distance between each ion and triangulated mesh of microstructural features.
          In addition to spatial filtering and considering how far ions lie to the
          edge of the dataset, it is possible to restrict the analyses to a sub-set of
          ions within a distance not farther away to a feature than the feature_distance
          threshold value.
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        distance(NX_CHAR):
          doc: |
            Absolute path in the (HDF5) file which points to the distance of each
            ion to the closest feature.
        feature_distance(NX_FLOAT):
          doc: |
            Threshold to define how close an ion has to lay to a feature so that
            the ion can at all qualify as a source, i.e. that an ROI is placed
            at the location of the ion and its neighbors are then analyzed
            how they contribute to the computed statistics.
            
            Recall that this feature_distance threshold is used in combination
            with the edge_distance threshold when placing ROI about source ions.
          unit: NX_LENGTH
      spatial_filter(NXspatial_filter):
        windowing_method(NX_CHAR):
        hexahedron_set(NXcg_hexahedron_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          hexahedra(NXcg_face_list_data_structure):
            vertices(NX_UINT):
        cylinder_set(NXcg_cylinder_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          center(NX_NUMBER):
          height(NX_NUMBER):
          radii(NX_NUMBER):
        ellipsoid_set(NXcg_ellipsoid_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          center(NX_NUMBER):
          half_axes_radii(NX_NUMBER):
          orientation(NX_NUMBER):
        polyhedron_set(NXcg_polyhedron_set):
          exists: optional
          # TODO
        bitmask(NXcs_filter_boolean_mask):
          exists: optional
          number_of_objects(NX_UINT):
          bitdepth(NX_UINT):
          mask(NX_UINT):
          # leave open if scalar or matrix
          #   dim: (i,)
          # identifier(NX_UINT):
      evaporation_id_filter(NXsubsampling_filter):
        exists: optional
        min_incr_max(NX_INT):
      iontype_filter(NXmatch_filter):
        exists: optional
        method(NX_CHAR):
        match(NX_NUMBER):
      hit_multiplicity_filter(NXmatch_filter):
        exists: optional
        method(NX_CHAR):
        match(NX_NUMBER):
      # config
      randomize_iontypes(NX_BOOLEAN):
        doc: |
          Specifies, if the iontypes are randomized for the point cloud or not.
          Internally, paraprobe uses a sequentially executed deterministic MT19987
          (MersenneTwister) pseudo-random number generator to shuffle the
          iontypes randomly across the entire set of ions. That is the total
          number of ions of either type remain the same but the information about
          their location is randomized.
      random_number_generator(NXcs_prng):
        exists: recommended
        type(NX_CHAR):
        seed(NX_NUMBER):
        warmup(NX_NUMBER):
      ion_query_type_source(NX_CHAR):
        doc: |
          How should the iontype be interpreted on the source-side, i.e.
          all these ion positions where a regions-of-interest (ROI) around
          so-called source ions will be placed. Different options exist
          how iontypes are interpreted given an iontype represents
          in general a (molecular) ion with different isotopes that have
          individually different multiplicity.
            
          The value resolve_all will set an ion active in the analysis regardless
          of which iontype it is. Each active ion is accounted for once.
          
          The value resolve_unknown will set an ion active when the ion is
          of the UNKNOWNTYPE type. Each active ion is accounted for once.
          
          The value resolve_ion will set an ion active if it is of the specific
          iontype, irregardless of its elemental or isotopic details.
          Each active ion is counted once.
          
          The value resolve_element will set an ion active, and most importantly,
          account for each as many times as the (molecular) ion contains
          atoms of elements in the whitelist ion_query_isotope_vector.
          
          The value resolve_isotope will set an ion active, and most importantly,
          account for each as many times as the (molecular) ion contains
          isotopes in the whitelist ion_query_isotope_vector.
          
          In effect, ion_query_isotope_vector acts as a whitelist to filter
          which ions are considered as source ions of the correlation statistics
          and how the multiplicity of each ion will be factorized, i.e. how
          often it is accounted for.
        enumeration: [resolve_all, resolve_unknown, resolve_ion, resolve_element, resolve_isotope]
      ion_query_nuclide_source(NX_UINT):
        doc: |
          Matrix of isotope vectors, as many as rows as different candidates
          for iontypes should be distinguished as possible source iontypes.
          In the simplest case, the matrix contains only the proton number
          of the element in the row, all other values set to zero.
          Combined with ion_query_type_source set to resolve_element this will
          recover usual spatial correlation statistics like the 1NN C-C
          spatial statistics.
        dim: (n_ion_source, n_ivec_max)
        unit: NX_UNITLESS
      ion_query_type_target(NX_CHAR):
        doc: |
          Similarly as ion_query_type_source how should iontypes be interpreted
          on the target-side, i.e. how many counts will be bookkept for ions
          which are neighbors of source ions within or on the surface of each
          inspection/ROI about each source ion.
          Source ion in the center of the ROI are not accounted for during
          counting the summary statistics.
          For details about the resolve values consider the explanations in
          ion_query_type_source. These account for ion_query_type_target as well.
        enumeration: [resolve_all, resolve_unknown, resolve_ion, resolve_element, resolve_isotope]
        # NEW ISSUE: conditionally required only when resolve_isotope
      ion_query_nuclide_target(NX_UINT):
        doc: |
          Matrix of isotope vectors, as many as rows as different candidates for
          iontypes to distinguish as possible targets. See additional comments
          under ion_query_isotope_vector_source.
        dim: (n_ion_target, n_ivec_max)
        unit: NX_UNITLESS
      statistics(NXprocess):
        doc: |
          Specifies which spatial statistics to compute.
        knn(NXprocess):
          exists: [min, 0, max, 1]
          doc: |
            Compute k-th nearest neighbour statistics.
          kth(NX_UINT):
            doc: |
              Order k.
            unit: NX_UNITLESS
          min_incr_max(NX_FLOAT):
            doc: |
              Minimum value, increment, and maximum value of the histogram binning.
            unit: NX_LENGTH
            # \@units: nm
            dim: (3,)
        rdf(NXprocess):
          exists: [min, 0, max, 1]
          doc: |
            Compute radial distribution function.
          min_incr_max(NX_FLOAT):
            doc: |
              Minimum value, increment, and maximum value of the histogram binning.
            unit: NX_LENGTH
            # \@units: nm
            dim: (3,)
        # NEW ISSUE: ripleyk(NXcollection):
        # NEW ISSUE: two_point(NXcollection):
    common(NXapm_paraprobe_tool_common): 
      status(NX_CHAR):
      programID(NXprogram):
        exists: [min, 1, max, infty]
        program(NX_CHAR):
          \@version(NX_CHAR):
      profiling(NXcs_profiling):
        exists: recommended
        start_time(NX_DATE_TIME):
        end_time(NX_DATE_TIME):
        total_elapsed_time(NX_FLOAT):
        current_working_directory(NX_CHAR):
