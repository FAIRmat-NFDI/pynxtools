category: base
doc: |
  Computational geometry description of a grid of Wigner-Seitz cells in Euclidean space.
  
  Three-dimensional grids with cubic cells are if not the most frequently used
  example of such grids. Examples of numerical methods where grids are used
  are spectral-solver based crystal plasticity or other stencil methods like
  phase-field or cellular automata.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  d: |
    The dimensionality of the grid.
  c: |
    The cardinality or total number of cells aka grid points.
  n_b: |
    Number of boundaries of the bounding box or primitive housing the grid.
type: group
NXcg_grid(NXcg_primitive_set):
  origin(NX_NUMBER):
    doc: |
      Location of the origin of the grid.
      
      Use the depends_on field that is inherited from the :ref:`NXcg_primitive_set`
      class to specify the coordinate system in which the origin location is defined.
    unit: NX_ANY
    dim: (d,)
  symmetry(NX_CHAR):
    doc: |
      The symmetry of the lattice defining the shape of the unit cell.
    enumeration: [cubic]  # enumerate all other possible tilings of R^d
  cell_dimensions(NX_NUMBER):
    doc: |
      The unit cell dimensions using crystallographic notation.
    unit: NX_LENGTH
    dim: (d,)
  extent(NX_INT):
    doc: |
      Number of unit cells along each of the d unit vectors.
      
      The total number of cells or grid points has to be the cardinality.
      If the grid has an irregular number of grid positions in each direction,
      as it could be for instance the case of a grid where all grid points
      outside some masking primitive are removed, this extent field should
      not be used. Instead, use the coordinate field.
    unit: NX_UNITLESS
    dim: (d,)  
  # number_of_cells(NX_UINT): maybe already too trivial quantities
  # should constraints on the grid be place here or not
  position(NX_NUMBER):
    doc: |
      Position of each cell in Euclidean space.
    unit: NX_ANY
    dim: (c, d)
  coordinate(NX_INT):
    doc: |
      Coordinate of each cell with respect to the discrete grid.
    unit: NX_DIMENSIONLESS
    dim: (c, d)  
  # this should be a ROI
  bounding_box(NXcg_polyhedron_set):
    doc: |
      A tight bounding box about the grid.
    # does it have to be a tight bounding box?
  # a good example for a general bounding box description for such a grids of triclinic cells
  # https://docs.lammps.org/Howto_triclinic.html NXcg_polyhedron because a parallelepiped
  number_of_boundaries(NX_INT):
    doc: |
      Number of boundaries distinguished
      
      Most grids discretize a cubic or cuboidal region. In this case
      six sides can be distinguished, each making an own boundary.
    unit: NX_UNITLESS
  boundaries(NX_CHAR):
    doc: |
      Name of domain boundaries of the simulation box/ROI
      e.g. left, right, front, back, bottom, top.
    dim: (n_b,)
  boundary_conditions(NX_INT):
    unit: NX_UNITLESS
    doc: |
      The boundary conditions for each boundary:
      
      0 - undefined
      1 - open
      2 - periodic
      3 - mirror
      4 - von Neumann
      5 - Dirichlet
    dim: (n_b,)
