category: application
doc: |
  Application definition for results files of the paraprobe-surfacer tool.
  
  This tool is part of the paraprobe-toolbox. Inspect the base class :ref:`NXapm_paraprobe_tool_results`.
  The purpose and need of the paraprobe-surfacer tool is the generation of meshed
  representation of the surface of the the reconstructed volume (or a portion) of it
  using different algorithms from the computational geometry community.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  n_ions: |
    The total number of ions in the reconstruction.
  n_v_tri: |
    The number of vertices of the alpha complex.
  n_f_tri: |
    The number of faces of the alpha complex.
  n_f_tri_xdmf: |
    The total number of XDMF values to represent all faces of triangles via XDMF.
  n_f_tet_xdmf: |
    The total number of XDMF values to represent all faces of tetrahedra via XDMF.
type: group
NXapm_paraprobe_surfacer_results(NXobject):
  (NXentry):
    exists: [min, 1, max, 1]
    definition(NX_CHAR):
      \@version(NX_CHAR):
      enumeration: [NXapm_paraprobe_surfacer_results]
    # tasks
    point_set_wrapping(NXapm_paraprobe_tool_results):
      doc: |
        Paraprobe-surfacer can be used to load a ROI that is the entire or a
        sub-set of the ion point cloud. In the point_cloud_wrapping process
        the tool computes a triangulated surface mesh which encloses the
        ROI/point cloud. This mesh can be seen as a model for the edge of
        the dataset.
        
        Different algorithms can be used with paraprobe-surfacer to create
        this mesh such as convex hulls, alpha-shapes as their generalization,
        or alpha wrappings.
        
        Ideally, the resulting mesh should be a watertight polyhedron.
        This polyhedron is not necessarily convex. For some algorithms there
        is no guarantee that the resulting mesh yields a watertight mesh.
      # config
      window(NXcs_filter_boolean_mask):
        number_of_ions(NX_UINT):
        bitdepth(NX_UINT):
        mask(NX_UINT):
      # results
      alpha_complexID(NXcg_alpha_complex):
        exists: [min, 0, max, infty]
        # (NXcg_grid): currently we do not store the underlying grid
        # for eventually performed preprocessing
        window(NXcs_filter_boolean_mask):
          doc: |
            A bitmask which identifies exactly all those ions whose positions
            were considered when defining the filtered point set from which
            that alpha_complex instance was computed.
            
            This window can be different to the window of the *point_set_wrapping*
            parent group because irrelevant ions might have been filtered out in addition
            to the window defined in *point_set_wrapping* to reduce e.g. computational
            costs of the alpha complex computation.
          # filtered in addition to the ROI or again the entire dataset
          number_of_ions(NX_UINT):
            doc: |
              Number of ions covered by the mask.
            unit: NX_UNITLESS
          bitdepth(NX_UINT):
            doc: |
              Number of bits assumed matching on a default datatype.
            unit: NX_UNITLESS
          mask(NX_UINT):
            doc: |
              The bitfield of the mask. See :ref:`NXcs_filter_boolean_mask` for
              how this bitfield is to be interpreted.
            unit: NX_UNITLESS
            dim: (n_ions,)
        dimensionality(NX_UINT):
          enumeration: [2, 3]
          unit: NX_UNITLESS
        type(NX_CHAR):
          enumeration: [convex_hull, alpha_shape, alpha_wrapping, other, undefined]
        mode(NX_CHAR):
           enumeration: [general, regularized]
        alpha(NX_NUMBER):
          unit: NX_ANY
        offset(NX_NUMBER):
          exists: optional
          unit: NX_LENGTH
        triangle_set(NXcg_triangle_set):
          exists: optional
          doc: |
            The set of triangles in the coordinate system paraprobe
            which discretizes the exterior surface of the alpha complex.
          identifier_offset(NX_INT):
          triangles(NXcg_face_list_data_structure):
            dimensionality(NX_POSINT):
            number_of_vertices(NX_POSINT):
            number_of_faces(NX_POSINT):
            vertex_identifier_offset(NX_INT):
            face_identifier_offset(NX_INT):
            vertices(NX_FLOAT):
              unit: NX_LENGTH
              dim: (n_v_tri, 3)
            faces(NX_UINT):
              unit: NX_UNITLESS
              dim: (n_f_tri, 3)
            xdmf_topology(NX_UINT):
              doc: |
                A list of as many tuples of XDMF topology key, XDMF number
                of vertices and a triple of vertex indices specifying each
                triangle. The total number of entries is n_f_tri * (1+1+3).
              unit: NX_UNITLESS
              dim: (n_f_tri_xdmf,)
            is_watertight(NX_BOOLEAN):
              exists: optional
              doc: |
                Do the triangles define a triangulated surface mesh that is watertight?
            volume(NX_FLOAT):
              exists: optional
              doc: |
                The volume which the triangulated surface mesh
                encloses if that mesh is watertight.
              unit: NX_VOLUME

        interior_tetrahedra(NXcg_tetrahedron_set):
          exists: optional
          doc: |
            The set of tetrahedra which represent the interior volume
            of the complex if that is a closed two-manifold.
          identifier_offset(NX_INT):
              unit: NX_UNITLESS
          volume(NX_FLOAT):
            exists: optional
            doc: |
                The accumulated volume of all interior tetrahedra.
            unit: NX_VOLUME
          tetrahedra(NXcg_face_list_data_structure):
            exists: optional
            number_of_vertices(NX_POSINT):
            number_of_faces(NX_POSINT):
            vertex_identifier_offset(NX_INT):
            face_identifier_offset(NX_INT):
            vertices(NX_FLOAT):
              unit: NX_LENGTH
              dim: (n_v_tet, 3)
            xdmf_topology(NX_UINT):
              doc: |
                A list of as many tuples of XDMF topology key, XDMF number
                of vertices and a triple of vertex indices specifying each
                triangle. The total number of entries is n_f_tet * (1+1+4).
              unit: NX_UNITLESS
              dim: (n_f_tet_xdmf,)
      # TRIANGLE_SET_WRAPPING(NXprocess):
      # For the future as we may wish to wrap primitives other like triangles or polylines.
    common(NXapm_paraprobe_tool_common): 
      status(NX_CHAR):
      analysis_identifier(NX_UINT):
      config(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
      programID(NXprogram):
        exists: [min, 1, max, infty]
        program(NX_CHAR):
          \@version(NX_CHAR):
      profiling(NXcs_profiling):
        exists: recommended
        start_time(NX_DATE_TIME):
        end_time(NX_DATE_TIME):
        total_elapsed_time(NX_FLOAT):
        current_working_directory(NX_CHAR):
        number_of_processes(NX_POSINT):
        number_of_threads(NX_POSINT):
        number_of_gpus(NX_POSINT):
      userID(NXuser):
        exists: [min, 0, max, infty]
        doc: |
          If used, metadata of at least the person who performed this analysis.
        name(NX_CHAR):
      coordinate_system_set(NXcoordinate_system_set):
        exists: [min, 1, max, 1]
        paraprobe(NXcoordinate_system):
          type(NX_CHAR):
          handedness(NX_CHAR):
          x(NX_NUMBER):
            unit: NX_LENGTH
            dim: (3,)
          y(NX_NUMBER):
            unit: NX_LENGTH
            dim: (3,)
          z(NX_NUMBER):
            unit: NX_LENGTH
            dim: (3,)
