category: application
doc: |
  Application definition for storing results of the SCORE cellular automaton.
  
  The SCORE cellular automaton model for primary recrystallization is an
  example of typical materials engineering applications used within the field
  of so-called Integral Computational Materials Engineering (ICME) whereby
  one can simulate the evolution of microstructures.
  
  Specifically the SCORE model can be used to simulate the growth of static
  recrystallization nuclei. The model is described in the literature:
  
  * `M. KÃ¼hbach et al. <https://doi.org/10.1016/j.actamat.2016.01.068>`_
  * `C. Haase et al. <https://doi.org/10.1016/j.actamat.2015.08.057>`_
  * `M. Diehl et al. <https://doi.org/10.1088/1361-651X/ab51bd>`_
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  n_b: |
    Number of boundaries of the bounding box or primitive to domain.
  n_p: |
    Number of parameter required for chosen orientation parameterization.
  n_tex: |
    Number of texture components identified.
  d: |
    Dimensionality.
  c: |
    Cardinality.
  n_front: |
    Number of active cells in the (recrystallization) front.
  n_grains: |
    Number of grains in the computer simulation.

# inspect comments behind NXms
type: group
NXms_score_results(NXobject):
  (NXentry):
    definition(NX_CHAR):
      \@version(NX_CHAR):
      enumeration: [NXms_score_results]
    analysis_identifier:
      doc: |
        Ideally, a (globally) unique persistent identifier
        for referring to this computer simulation.
        
        The identifier is usually defined/issued by the facility, laboratory,
        or the principle investigator. The identifier enables to link
        experiments to e.g. proposals.
    analysis_description:
      exists: optional
      doc: |
        Free-text description about the workflow (analysis/simulation).
        
        Users are strongly advised to detail the sample history in the
        respective field and fill rather as completely as possible the fields
        of this application definition rather than write details about the
        experiment into this free-text description field.
    start_time(NX_DATE_TIME):
      doc: |
        ISO 8601 time code with local time zone offset to UTC information
        included when the characterization started.
    end_time(NX_DATE_TIME):
      doc: |
        ISO 8601 time code with local time zone offset to UTC included
        when the characterization ended.
    PROGRAM(NXprogram):
      exists: ['min', '1', 'max', 'unbounded']
      program_name:
        \@version:
    experiment_or_simulation:
      doc: |
        Specify if the (characterization) results/data of this instance of an
        application definition are based on the results of a simulation or the
        results of a post-processing of measured data to describe a microstructure.
        The term microstructure is used to describe the spatial arrangement of
        crystal defects inside a sample/specimen without demanding necessarily
        that this structure is mainly at the micron length scale.
        Nanostructure and macrostructure are close synonyms.
        Material architecture is a narrow synonym.
      enumeration: [experiment, simulation]
    
    # always a simulation!
    config_filename:
      doc: |
        The path and name of the config file for this analysis.
      \@version:
        doc: |
          At least SHA256 strong hash of the specific config_file for
          tracking provenance.
    results_path:
      exists: optional
      doc: |
        Path to the directory where the tool should store NeXus/HDF5 results
        of this analysis. If not specified results will be stored in the
        current working directory.
    status:
      doc: |
        A statement whether the SCORE executable managed to
        process the analysis or failed prematurely.
        
        This status is written to the results file after the end_time
        at which point the executable must not compute any analysis.
        Only when this status message is present and shows `success`, the
        user should consider the results. In all other cases it might be
        that the executable has terminated prematurely or another error
        occurred.
      enumeration: [success, failure]
    USER(NXuser):
      exists: ['min', '0', 'max', 'unbounded']
      doc: |
        Contact information and eventually details of at least one person
        involved in creating this result. This can be the principle investigator
        who performed this experiment. Adding multiple users if relevant is recommended.
      name:
        doc: |
          Given (first) name and surname of the user.
      affiliation:
        exists: recommended
        doc: |
          Name of the affiliation of the user at the point in time
          when the experiment was performed.
      address:
        exists: recommended
        doc: |
          Postal address of the affiliation.
      email:
        exists: recommended
        doc: |
          Email address of the user at the point in time when the experiment
          was performed. Writing the most permanently used email is recommended.
      orcid:
        exists: recommended
        doc: |
          Globally unique identifier of the user as offered by services
          like ORCID or ResearcherID. If this field is field the specific service
          should also be written in orcid_platform
      orcid_platform:
        exists: recommended
        doc: |
          Name of the OrcID or ResearcherID where the account
          under orcid is registered.
      telephone_number:
        exists: optional
        doc: |
          (Business) (tele)phone number of the user at the point
          in time when the experiment was performed.
      role:
        exists: recommended
        doc: |
          Which role does the user have in the place and at the point
          in time when the experiment was performed? Technician operating
          the microscope. Student, postdoc, principle investigator, guest
          are common examples.
      social_media_name:
        exists: optional
        doc: |
          Account name that is associated with the user in social media platforms.
      social_media_platform:
        exists: optional
        doc: |
          Name of the social media platform where the account
          under social_media_name is registered.
    specimen(NXsample):
      
      # NEW ISSUE: inject the conclusion from the discussion with Andrea
      # according to SAMPLE.yaml 0f8df14 2022/06/15
      name:
        doc: |
          Descriptive name or ideally (globally) unique persistent identifier.
    
    # sample_history:
    # doc: |
    # Ideally, a reference to the location of or a (globally) unique
    # persistent identifier of e.g. another file which should document
    # ideally as many details as possible of the material, its
    # microstructure, and its thermo-chemo-mechanical processing/
    # preparation history.
    # preparation_date(NX_DATE_TIME):
    # doc: |
    # ISO 8601 time code with local time zone offset to UTC information
    # when the specimen was prepared.
    (NXdata):
      exists: optional
      doc: |
        Hard link to a location in the hierarchy of the NeXus file
        where the data for default plotting are stored.
    (NXcoordinate_system_set):
      doc: |
        Container to hold different coordinate systems conventions.
        A least a right-handed Cartesian coordinate system with base vectors
        named x, y, and z has to be specified. Each base vector of the
        coordinate system should be described with an NXtransformations instance.
      TRANSFORMATIONS(NXtransformations):
        exists: ['min', '3', 'max', 'unbounded']
    conventions(NXem_conventions):
      rotation_conventions(NXprocess):
        three_dimensional_rotation_handedness:
        rotation_convention:
        euler_angle_convention:
        axis_angle_convention:
        orientation_parameterization_sign_convention:
      processing_reference_frame(NXprocess):
        reference_frame_type:
        xaxis_direction:
        xaxis_alias:
        yaxis_direction:
        yaxis_alias:
        zaxis_direction:
        zaxis_alias:
        origin:
      sample_reference_frame(NXprocess):
        reference_frame_type:
        xaxis_direction:
        yaxis_direction:
        zaxis_direction:
        origin:
    ROI_SET(NXcg_roi_set):
      exists: ['min', '1', 'max', 'unbounded']
      
      # however for solitary unit models aka volume element ensemble, replica methods we may need more than one domain
      # the volume element is not called representative because for what we consider the volume element to be representative
      # for is a matter of interpretation (fundamentally this is an assumption) and can differ for different descriptors
      doc: |
        The simulated or characterized material volume element aka domain.
        At least one instance of geometry required either NXcg_grid,
        NXcg_polyhedron_set, or NXcg_point_set. This geometry group needs
        to contain details about the boundary conditions.
      grid(NXcg_grid):
        dimensionality(NX_POSINT):
        cardinality(NX_POSINT):
        origin(NX_NUMBER):
        symmetry:
        cell_dimensions(NX_NUMBER):
        extent(NX_POSINT):
        identifier_offset(NX_INT):
      boundary(NXcg_polyhedron_set):
        doc: |
          A tight bounding box or sphere or bounding primitive about the grid.
        
        # a good example for a general bounding box description for such a grids of triclinic cells
        # https://docs.lammps.org/Howto_triclinic.html NXcg_polyhedron because a parallelepiped
        number_of_boundaries(NX_POSINT):
          unit: NX_UNITLESS
          doc: |
            How many distinct boundaries are distinguished?
            Most grids discretize a cubic or cuboidal region. In this case
            six sides can be distinguished, each making an own boundary.
        boundaries:
          exists: ['min', '0']
          doc: |
            Name of the boundaries. E.g. left, right, front, back, bottom, top,
            The field must have as many entries as there are number_of_boundaries.
        boundary_conditions(NX_INT):
          unit: NX_UNITLESS
          doc: |
            The boundary conditions for each boundary:
            
            0 - undefined
            1 - open
            2 - periodic
            3 - mirror
            4 - von Neumann
            5 - Dirichlet
          dimensions:
            rank: 1
            dim: [[1, n_b]]
      snapshot_set(NXms_snapshot_set):
        doc: |
          Collection of microstructural data observed/simulated.
        identifier_offset(NX_UINT):
          unit: NX_UNITLESS
          doc: |
            Integer which specifies the first index to be used for distinguishing
            snapshots. Identifiers are defined either implicitly or explicitly.
            For implicit indexing the identifiers are defined on the
            interval :math:`[identifier\_offset, identifier\_offset + c - 1]`.
            For explicit indexing the identifier array has to be defined.
            
            The identifier_offset field can for example be used to communicate
            if the identifiers are expected to start from 1 (referred to as
            Fortran-/Matlab-) or from 0 (referred to as C-, Python-style index
            notation) respectively.
        
        # essentially NXmonitor instances for evolution of ensemble summary statistics
        evolution(NXprocess):
          exists: optional
          doc: |
            Summary quantities which are the result of some post-processing of
            the snapshot data (averaging, integrating, interpolating).
            Frequently used descriptors from continuum mechanics and thermodynamics
            can be used here. A few examples are given. Each descriptor is currently
            modelled as an instance of an NXprocess because it is relevant to
            understand how the descriptors are computed.
          time(NXprocess):
            exists: optional
            doc: |
              Evolution of the physical time.
          temperature(NXprocess):
            exists: optional
            doc: |
              Evolution of the simulated temperature over time.
          
          # pressure(NXprocess):
          # exists: optional
          # stress(NXprocess):
          # exists: optional
          # strain(NXprocess):
          # exists: optional
          # deformation_gradient(NXprocess):
          # exists: optional
          # magnetic_field(NXprocess):
          # exists: optional
          # electric_field(NXprocess):
          # exists: optional
          kinetics(NXprocess):
            exists: optional
            doc: |
              Evolution of the recrystallized volume fraction over time.
        
        # recrystallization_front(NXprocess):
        # exists: optional
        # time-resolved results for individual snapshots
        # virtually all computer simulations and all experiments always probe
        # snapshots
        MS_SNAPSHOT(NXms_snapshot):
          time(NX_NUMBER):
            unit: NX_TIME
            doc: |
              Measured or simulated physical time stamp for this snapshot.
              Not to be confused with wall-clock timing or profiling data.
          temperature(NX_NUMBER):
            unit: NX_TEMPERATURE
            doc: |
              Simulated temperature.
          iteration(NX_UINT):
            unit: NX_UNITLESS
            doc: |
              Iteration or increment counter.
          
          # optional places to store the grid for instance if it changes
          grid(NXcg_grid):
            exists: recommended
            grain_identifier(NX_UINT):
              exists: recommended
              unit: NX_UNITLESS
              doc: |
                Grain identifier for each cell.
              dimensions:
                rank: 3
                dim: [[1, n_x], [2, n_y], [3, n_z]]
            thread_identifier(NX_UINT):
              exists: optional
              unit: NX_UNITLESS
              doc: |
                Identifier of the OpenMP thread which processed this part of the grid.
              dimensions:
                rank: 3
                dim: [[1, n_x], [2, n_y], [3, n_z]]
          
          # check comments behind NXms
          recrystallization_front(NXprocess):
            exists: recommended
            doc: |
              Details about those cells which in this time step represent
              the discretized recrystallization front.
            halo_region(NX_UINT):
              exists: optional
              unit: NX_UNITLESS
              doc: |
                Which cells are currently in a halo region of threads.
              dimensions:
                rank: 1
                dim: [[1, n_front]]
            mobility_weight(NX_NUMBER):
              exists: recommended
              unit: NX_UNITLESS
              doc: |
                So-called mobility weight which is a scaling factor to
                control the mobility of the grain boundary which is assumed
                to sweep currently this volume.
              dimensions:
                rank: 1
                dim: [[1, n_front]]
            coordinate(NX_NUMBER):
              exists: recommended
              unit: NX_LENGTH
              doc: |
                Grid coordinates of each cell in the recrystallization front.
              dimensions:
                rank: 2
                dim: [[1, n_front], [2, 3]]
            deformed_grain_identifier(NX_UINT):
              exists: recommended
              unit: NX_UNITLESS
              doc: |
                Grain identifier assigned to each cell in the recrystallization front.
              dimensions:
                rank: 1
                dim: [[1, n_front]]
            recrystallized_grain_identifier(NX_UINT):
              exists: recommended
              unit: NX_UNITLESS
              doc: |
                Grain identifier assigned to each nucleus which affected that cell in the
                recrystallization front.
              dimensions:
                rank: 1
                dim: [[1, n_front]]
            recrystallized_volume_fraction(NX_NUMBER):
              exists: recommended
              unit: NX_DIMENSIONLESS
              doc: |
                Relative volume transformed as a measure of infection progress.
              dimensions:
                rank: 1
                dim: [[1, n_front]]
            thread_identifier(NX_UINT):
              exists: optional
              unit: NX_UNITLESS
              doc: |
                Identifier of the OpenMP thread processing each cell in the recrystallization
                front.
              dimensions:
                rank: 1
                dim: [[1, n_front]]
            infection_direction(NX_UINT):
              exists: optional
              unit: NX_UNITLESS
              doc: |
                Hint about the direction from which the cell was infected.
              dimensions:
                rank: 1
                dim: [[1, n_front]]
          grain_ensemble(NXprocess):
            exists: recommended
            doc: |
              Current grain-related quantities.
            euler(NX_NUMBER):
              exists: optional
              unit: NX_ANGLE
              doc: |
                Bunge-Euler angle triplets for each grain.
              dimensions:
                rank: 2
                dim: [[1, n_grains], [2, 3]]
            volume(NX_NUMBER):
              unit: NX_VOLUME
              doc: |
                Discrete volume of each grain accounting also for partially
                transformed cells.
              dimensions:
                rank: 1
                dim: [[1, n_grains]]
            dislocation_density(NX_NUMBER):
              exists: recommended
              unit: NX_ANY
              doc: |
                Current value for the dislocation density as a measure of
                the remaining stored energy in assumed crystal defects inside
                each grain. The difference between these values scales the
                driving force of grain boundary migration.
              dimensions:
                rank: 1
                dim: [[1, n_grains]]
            is_deformed(NX_BOOLEAN):
              exists: recommended
              doc: |
                Is the grain deformed.
              dimensions:
                rank: 1
                dim: [[1, n_grains]]
            is_recrystallized(NX_BOOLEAN):
              exists: recommended
              doc: |
                Is the grain recrystallized.
              dimensions:
                rank: 1
                dim: [[1, n_grains]]
          recrystallized_kinetics(NXprocess):
            doc: |
              Current recrystallized volume fraction.
            value(NX_NUMBER):
              unit: NX_DIMENSIONLESS
              doc: |
                Currently evaluated actual recrystallized volume fraction.
                This takes into account partially recrystallized cells.
            target(NX_NUMBER):
              unit: NX_DIMENSIONLESS
              doc: |
                Currently desired target recrystallized volume fraction at
                which the user requested to log a snapshot.
          
          # pressure(NXprocess):
          # exists: optional
          stress(NXprocess):
            exists: optional
            value(NX_NUMBER):
              unit: NX_ANY
              doc: |
                Currently assumed globally applied Cauchy stress tensor on the ROI.
              dimensions:
                rank: 2
                dim: [[1, 3], [2, 3]]
          strain(NXprocess):
            exists: optional
            value(NX_NUMBER):
              unit: NX_UNITLESS
              doc: |
                Currently assumed globally applied Cauchy strain tensor on the ROI.
              dimensions:
                rank: 2
                dim: [[1, 3], [2, 3]]
    
    # deformation_gradient(NXprocess):
    # exists: optional
    # magnetic_field(NXprocess):
    # exists: optional
    # electric_field(NXprocess):
    # exists: optional
    performance(NXcs_profiling):
      current_working_directory:
      command_line_call:
        exists: optional
      start_time(NX_DATE_TIME):
        exists: recommended
      end_time(NX_DATE_TIME):
        exists: recommended
      total_elapsed_time(NX_NUMBER):
      number_of_processes(NX_POSINT):
      number_of_threads(NX_POSINT):
      number_of_gpus(NX_POSINT):
      (NXcs_computer):
        exists: recommended
        name:
          exists: recommended
        operating_system:
          \@version:
        uuid:
          exists: optional
        (NXcs_cpu):
          exists: ['min', '0', 'max', 'unbounded']
          name:
            exists: optional
          (NXfabrication):
            exists: recommended
            identifier:
              exists: optional
            capabilities:
              exists: optional
        (NXcs_gpu):
          exists: ['min', '0', 'max', 'unbounded']
          name:
            exists: optional
          (NXfabrication):
            exists: recommended
            identifier:
              exists: optional
            capabilities:
              exists: optional
        (NXcs_mm_sys):
          exists: ['min', '0', 'max', '1']
          total_physical_memory(NX_NUMBER):
        (NXcs_io_sys):
          exists: ['min', '0', 'max', '1']
          (NXcs_io_obj):
            exists: ['min', '1', 'max', 'unbounded']
            technology:
            max_physical_capacity(NX_NUMBER):
            name:
              exists: optional
            (NXfabrication):
              exists: recommended
              identifier:
                exists: optional
              capabilities:
                exists: optional
        (NXcs_profiling_event):
          start_time(NX_DATE_TIME):
            exists: optional
          end_time(NX_DATE_TIME):
            exists: optional
          description:
          elapsed_time(NX_NUMBER):
          number_of_processes(NX_POSINT):
            
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_processes
              in the NXcs_profiling super class.
          number_of_threads(NX_POSINT):
            
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_threads
              in the NXcs_profiling super class.
          number_of_gpus(NX_POSINT):
            
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_threads
              in the NXcs_profiling super class.
          max_virtual_memory_snapshot(NX_NUMBER):
            exists: recommended
          max_resident_memory_snapshot(NX_NUMBER):
            exists: recommended
