category: application
doc: |
  Application definition for results files of the paraprobe-spatstat tool.
  
  This tool is part of the paraprobe-toolbox. Inspect the base class :ref:`NXapm_paraprobe_tool_results`.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  n_ions: |
    The total number of ions in the reconstruction.
  n_feat: |
    Number of clusters found.
type: group
NXapm_paraprobe_clusterer_results(NXobject):
  (NXentry):
    exists: [min, 1, max, 1]
    definition(NX_CHAR):
      \@version(NX_CHAR):
      enumeration: [NXapm_paraprobe_clusterer_results]
    # tasks
    cameca_to_nexus(NXapm_paraprobe_tool_results):
      exists: optional
    cluster_analysisID(NXapm_paraprobe_tool_results):
      exists: [min, 0, max, infty]
      analysis_identifier(NX_UINT):
      config(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
      window(NXcs_filter_boolean_mask):
        number_of_ions(NX_UINT):
        bitdepth(NX_UINT):
        mask(NX_UINT):
      # results
      dbscanID(NXsimilarity_grouping):
        exists: [min, 0, max, infty]
        doc: |
          Results of a DBScan clustering analysis.
        eps(NX_FLOAT):
          doc: |
            The epsilon (eps) parameter used.
          unit: NX_LENGTH
        min_pts(NX_UINT):
          doc: |
            The minimum points (min_pts) parameter used.
          unit: NX_UNITLESS
        cardinality(NX_UINT):
           doc: |
             Number of members in the set which is partitioned into features.
             Specifically, this is the total number of targets filtered from the
             dataset, i.e. typically the number of clusters which is usually not and
             for sure not necessarily the total number of ions in the dataset.
           unit: NX_UNITLESS
        identifier_offset(NX_INT):
          doc: |
            Which identifier is the first to be used to label a cluster.
            
            The value should be chosen in such a way that special values can be resolved:
            * identifier_offset - 1 indicates an object belongs to no cluster.
            * identifier_offset - 2 indicates an object belongs to the noise category.
            
            Setting for instance identifier_offset to 1 recovers the commonly used
            case that objects of the noise category get the value of -1 and points of the
            unassigned category get the value 0.
        targets(NX_UINT):
          doc: |
            The evaporation (sequence) identifier (aka evaporation_id) to figure out
            which ions from the reconstruction were considered targets. The length
            of this array is not necessarily n_ions.
            Instead, it is the value of cardinality.
          unit: NX_UNITLESS
          dim: (i,)
        # quantities for debugging purposes
        number_of_solutions(NX_UINT):
          exists: optional
          doc: |
            The number of solutions found for each target. Typically,
            this value is 1 in which case the field can be omitted.
            Otherwise, this array is the concatenated set of values of solution
            tuples for each target that can be used to decode model_labels,
            core_sample_indices, and weight.
          unit: NX_UNITLESS
          dim: (i,)
        model_labels(NX_INT):
          exists: optional
          doc: |
            The raw labels from the DBScan clustering backend process.
            The length of this array is not necessarily n_ions.
            Instead, it is typically the value of cardinality provided that each
            target has only one associated cluster. If targets are assigned to
            multiple cluster this array is as long as the total number of solutions
            found and 
          unit: NX_UNITLESS
          dim: (k,)
        core_sample_indices(NX_INT):
          exists: optional
          doc: |
            The raw array of core sample indices which specify which of the
            targets are core points.
          unit: NX_UNITLESS
          dim: (k,)
        numerical_labels(NX_UINT):
          doc: |
            Numerical label for each target (member in the set) aka cluster identifier.
          unit: NX_UNITLESS
          dim: (k,)
        categorical_labels(NX_CHAR):
          exists: optional
          doc: |
            Categorical label(s) for each target (member in the set) aka cluster name(s).
          dim: (k,)
        weights(NX_NUMBER):
          exists: optional
          doc: |
            Weights for each target that specifies how probable the target is assigned to
            a specific cluster.
            
            For the DBScan algorithm and atom probe tomography this value is the
            multiplicity of each ion with respect to the cluster. That is how many times
            should the position of the ion be accounted for because the ion is e.g. a
            molecular ion with several elements or nuclides of requested type.
          unit: NX_UNITLESS
          dim: (k,)
        is_noise(NX_BOOLEAN):  # NXcs_filter_boolean_mask):
          #  number_of_objects(NX_UINT):
          #  bitdepth(NX_UINT):
          #  mask(NX_UINT):
          exists: optional
          doc: |
            Are targets assigned to the noise category or not.
          dim: (k,)
        is_core(NX_BOOLEAN):  # NXcs_filter_boolean_mask):
          #  number_of_objects(NX_UINT):
          #  bitdepth(NX_UINT):
          #  mask(NX_UINT):
          exists: optional
          doc: |
            Are targets assumed a core point.
          dim: (k,)
        statistics(NXprocess):
          exists: recommended
          doc: |
            In addition to the detailed storage which members were grouped to which
            feature here summary statistics are stored that communicate e.g. how many
            cluster were found.
          # at the level of the set of targets
          number_of_targets(NX_UINT):
            doc: |
              Total number of targets in the set, i.e. ions that were filtered
              and considered in this cluster analysis.
          number_of_noise(NX_UINT):
            doc: |
              Total number of members in the set which are categorized as noise.
            unit: NX_UNITLESS
          number_of_core(NX_UINT):
            doc: |
              Total number of members in the set which are categorized as a core point.
            unit: NX_UNITLESS
          number_of_features(NX_UINT):
            doc: |
              Total number of clusters (excluding noise and unassigned).
            unit: NX_UNITLESS
          # at the level of the feature set
          feature_identifier(NX_UINT):
            doc: |
              Numerical identifier of each feature aka cluster_identifier.
            unit: NX_UNITLESS
            dim: (n_feat,)
          feature_member_count(NX_UINT):
            doc: |
              Number of members for each feature.
            unit: NX_UNITLESS
            dim: (n_feat,)
          # ADD FURTHER RESULTS along the same pattern for e.g. OPTICS and HDBSCAN

    common(NXapm_paraprobe_tool_common): 
      status(NX_CHAR):
      programID(NXprogram):
        exists: [min, 1, max, infty]
        program(NX_CHAR):
          \@version(NX_CHAR):
      profiling(NXcs_profiling):
        exists: recommended
        start_time(NX_DATE_TIME):
        end_time(NX_DATE_TIME):
        total_elapsed_time(NX_FLOAT):
        current_working_directory(NX_CHAR):
        number_of_processes(NX_POSINT):
        number_of_threads(NX_POSINT):
        number_of_gpus(NX_POSINT):
      userID(NXuser):
        exists: [min, 0, max, infty]
        doc: |
          If used, metadata of at least the person who performed this analysis.
        name(NX_CHAR):
      coordinate_system_set(NXcoordinate_system_set):
        exists: [min, 1, max, 1]
        paraprobe(NXcoordinate_system):
          type(NX_CHAR):
          handedness(NX_CHAR):
          x(NX_NUMBER):
            unit: NX_LENGTH
            dim: (3,)
          y(NX_NUMBER):
            unit: NX_LENGTH
            dim: (3,)
          z(NX_NUMBER):
            unit: NX_LENGTH
            dim: (3,)
