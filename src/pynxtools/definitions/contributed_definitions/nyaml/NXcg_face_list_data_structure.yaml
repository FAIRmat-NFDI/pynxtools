category: base
doc: |
  Computational geometry of primitives via a face-and-edge-list data structure.
  
  Primitives must neither be degenerated nor self-intersect but can differ in
  their properties. A face-and-edge-list-based description of primitives is
  frequently used for triangles and polyhedra to store them on disk for
  visualization purposes (see OFF, PLY, VTK, or STL file formats).
  
  Although this description is storage efficient it is not well suited for
  topological analyses though. In this case, scientists may need a different
  view on the primitives which is better represented with e.g. a
  half_edge_data_structure.
  
  Having an own base class for the data structure how primitives are stored is
  useful to embrace both users with small or very detailed specification demands.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  d: |
    The dimensionality, which has to be at least 2.
  n_v: |
    The number of vertices.
  n_e: |
    The number of edges.
  n_f: |
    The number of faces.
  n_total: |
    The total number of vertices of all faces. Faces are polygons.
  n_weinberg: |
    The total number of Weinberg vector values of all faces.
# duplicate of an NXoff_geometry ?
type: group
NXcg_face_list_data_structure(NXobject):
  \@depends_on(NX_CHAR):
    doc: |
      Hint to help resolve in which Euclidean coordinate system
      field values vertices are defined.
  dimensionality(NX_POSINT):
    doc: |
      Dimensionality of the primitives described.
    unit: NX_UNITLESS
  # resulting in a design similar to that of NXoff_geometry and the XDMF mixed primitive topology
  number_of_vertices(NX_INT):
    doc: |
      Number of vertices for each face.
      
      Each entry represents the total number of vertices for that face,
      irrespectively whether vertices are shared among faces or not.
    unit: NX_UNITLESS
    dim: (n_f,)
  number_of_edges(NX_INT):
    doc: |
      Number of edges for each face.
      
      Each entry represents the total number of edges for that face,
      irrespectively whether edges are shared across faces or not.
    unit: NX_UNITLESS
    dim: (n_e,)
  number_of_faces(NX_INT):
    doc: |
      Number of faces of the primitives.
    unit: NX_UNITLESS
  vertex_identifier_offset(NX_INT):
    doc: |
      Integer offset whereby the identifier of the first member
      of the vertices differs from zero.
      
      Identifier can be defined explicitly or implicitly.
      Inspect the definition of NXcg_primitive_set for further details.
    unit: NX_UNITLESS
  edge_identifier_offset(NX_INT):
    doc: |
      Integer offset whereby the identifier of the first member
      of the edges differs from zero.
      
      Identifier can be defined explicitly or implicitly.
      Inspect the definition of NXcg_primitive_set for further details.
    unit: NX_UNITLESS
  face_identifier_offset(NX_INT):
    doc: |
      Integer offset whereby the identifier of the first member
      of the faces differs from zero.
      
      Identifier can be defined explicitly or implicitly.
      Inspect the definition of NXcg_primitive_set for further details.
    unit: NX_UNITLESS
  vertex_identifier(NX_INT):
    unit: NX_UNITLESS
    doc: |
      Integer identifier to distinguish all vertices explicitly.
    dim: (n_v,)
  edge_identifier(NX_INT):
    doc: |
      Integer used to distinguish all edges explicitly.
    unit: NX_UNITLESS
    dim: (n_e,)
  face_identifier(NX_INT):
    doc: |
      Integer used to distinguish all faces explicitly.
    unit: NX_UNITLESS
    dim: (n_f,)
  vertices(NX_NUMBER):
    doc: |
      Positions of the vertices.
      
      Users are encouraged to reduce the vertices to a unique set as this may
      result in a more efficient storage of the geometry data.
      It is also possible though to store the vertex positions naively in which
      case vertices_are_unique is likely False. Naively here means that each
      vertex is stored even though many share the same positions.
    unit: NX_ANY
    dim: (n_v, d)
  edges(NX_INT):
    doc: |
      The edges are stored as pairs of vertex identifier.
    unit: NX_UNITLESS
    dim: (n_e, 2)
  faces(NX_INT):
    doc: |
      The faces are stored as a concatenated array of vertex identifier tuples.
      
      The first entry is the identifier of the start vertex of the first face,
      followed by the second vertex of the first face, until the last vertex
      of the first face. Thereafter, the start vertex of the second face, the
      second vertex of the second face, and so on and so forth.
      
      Therefore, summating over the number_of_vertices, allows to extract
      the vertex identifiers for the i-th face on the following index interval
      of the faces array: :math:`[\sum_{i = 0}^{i = n-1}, \sum_{i=0}^{i = n}]`.
    unit: NX_UNITLESS
    dim: (n_total,)
  # properties
  vertices_are_unique(NX_BOOLEAN):
    doc: |
      If true, indicates that the vertices are all placed at different positions
      and have different identifiers, i.e. no points overlap or are counted more
      than once.
  edges_are_unique(NX_BOOLEAN):
    doc: |
      If true, indicates that no edge is stored more than once.
      
      Users are encouraged to consider using a half_edge_data_structure instead.
  faces_are_unique(NX_BOOLEAN):
    doc: |
      If true, indicates that no face is stored more than once.
  winding_order(NX_INT):
    doc: |
      Specifies for each face which winding order was used if any:
      
      * 0 - undefined
      * 1 - counter-clockwise (CCW)
      * 2 - clock-wise (CW)
    unit: NX_UNITLESS
    dim: (n_f,)
