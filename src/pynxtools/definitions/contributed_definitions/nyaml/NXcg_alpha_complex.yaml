category: base
doc: |
  Computational geometry of alpha shapes or alpha wrappings about primitives.
  
  For details see:
  
  * https://dx.doi.org/10.1109/TIT.1983.1056714 for 2D,
  * https://dx.doi.org/10.1145/174462.156635 for 3D,
  * https://dl.acm.org/doi/10.5555/871114 for weighted, and
  * https://doc.cgal.org/latest/Alpha_shapes_3 for 3D implementation
  * https://doc.cgal.org/latest/Manual/packages.html#PkgAlphaWrap3 for 3D wrappings
  
  in CGAL, the Computational Geometry Algorithms Library.
  As a starting point, we follow the conventions of the CGAL library.
# The so-called spectrum or sets of (weighted) alpha shapes includes the convex hull of a point set.
type: group
NXcg_alpha_complex(NXcg_primitive_set):
  type:
    doc: |
      Type of alpha complex following the terminology used by CGAL for now.
      
      Basic means (unweighted) alpha shapes. Alpha_wrapping means meshes
      created using the alpha_wrapping algorithm.
    enumeration: [convex_hull, alpha_shape, alpha_wrapping]
  regularize_alpha_complex(NX_BOOLEAN):
    doc: |
      Are singular faces removed, i.e. has the alpha complex
      been regularized or not.
  # R+0 means positive real number including zero which is a super set of NX_FLOAT and a sub-set of NX_NUMBER
  alpha(NX_NUMBER):
    doc: |
      The alpha parameter, i.e. the radius of the alpha-sphere that
      is used when computing the alpha complex.
    unit: NX_LENGTH
    # the dim: argument can be omitted to indicate that a scalar is expected
    # means a length quantity, i.e. m, km, or nm is possible i.e. has to be length but no further constraints
    # stating meter is a stronger constraint while m is the strongest constraint, meaning literally the value is m.
  offset(NX_NUMBER):
    doc: |
      The offset distance parameter used when computing alpha_wrappings.
    unit: NX_LENGTH
  # check again carefully the CGAL documentation talks about, for 3D, the square of the radius!
  point_setID(NXcg_point_set):
    # basically just constraints that if you use one or more instances of NXcg_point_set
    # inside an instance of NXcg_alpha_complex, name that group with the prefix "point_set"
    doc: |
      Point cloud for which the alpha shape or wrapping has been computed.
  # this could also just be implemented as a link but how would this be possible
  # unfold the NXcg_point_set and add a
  # weight(NX_NUMBER):
  # doc: Weights for each point
  # In general, an alpha complex is a disconnected and non-pure complex,
  # meaning in particular that the alpha complex may have singular faces.
  # so the number of cells, faces and edges depends on how a specific alpha complex,
  # i.e. an alpha-shape of S for alpha, is filtrated with respect to k < d-dimensional
  # simplices. Here we assume that number_of_cells, number_of_faces, number_of_edges
  # are reported assuming one filtrates these simplices according to type.
  # also using the assumption the base class reports the unique vertices
  # of the specifically filtrated alpha complex.
  triangle_setID(NXcg_triangle_set):
    doc: |
      Triangle soup for which the alpha wrapping has been computed.
  triangle_meshID(NXcg_triangle_set): # should be a mesh
    doc: |
      Triangle mesh representing the alpha complex.
  # add for each triangle if desirable a notation of whether the simplex is
  # exterior, regular, singular, or interior with respect to the alpha complex
  # a triangulation is more than a triangle (soup)/set because there it has connectivity
  # customize the NXcg_triangle_set base class members such that connectivity can be contained naturally
  # we need to find also a better name for this, what people intutive understand
  # as the interior, may not even exist for a given alpha value
  # more specifically it is the set of filtrated cells acknowledging mode
  # e.g. the interior cells of the regularized alpha complex
  interior_cellsID(NXcg_tetrahedron_set):
    doc: |
      Set of tetrahedra representing the volume inside the alpha complex.
  # document the alpha status
  # https://doc.cgal.org/latest/Alpha_shapes_3/classCGAL_1_1Alpha__status.html
