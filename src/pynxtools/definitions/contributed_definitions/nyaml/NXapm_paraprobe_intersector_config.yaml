category: application
doc: |
  Application definition for a configuration file of the paraprobe-intersector tool.
  
  This tool is part of the paraprobe-toolbox. Inspect :ref:`NXapm_paraprobe_tool_config` for details.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
type: group
NXapm_paraprobe_intersector_config(NXobject):
  (NXentry):
    exists: [min, 1, max, 1]
    definition(NX_CHAR):
      \@version(NX_CHAR):
      enumeration: [NXapm_paraprobe_intersector_config]
    number_of_tasks(NX_UINT):
      doc: |
        How many v_v_spatial_correlation tasks should the tool execute.
      unit: NX_UNITLESS
    v_v_spatial_correlationID(NXapm_paraprobe_tool_config):
      exists: [min, 1, max, infty]
      doc: |
        Tracking volume_volume_spatial_correlations (v_v) is the process of building logical
        relations between objects, their proximity and eventual volumetric intersections.
        Here, objects are assumed to be represented as a set of triangulated surface meshes.
        
        Volumetric overlap and proximity of volumetric features is identified for members of
        sets of features to members of other sets of volumetric features. Specifically, for each time
        step :math:`k` pairs of sets are compared:
        Members of a so-called current_set to members of a so-called next_set.
        Members can be different types of volumetric features. 
      # config
      intersection_detection_method(NX_CHAR):
        doc: |
          Specifies the method whereby to decide if two objects intersect volumetrically.
          For reasons which are detailed in the supplementary material of `M. K端hbach et al. <https://arxiv.org/abs/2205.13510>`_,
          it is assumed by default that two objects intersect if they share at least one ion with the same evaporation ID (shared_ion).
          
          Alternatively, with specifying tetrahedra_intersections, the tool can perform an intersection analysis which attempts to
          tetrahedralize first each polyhedron. If successful, the tool then checks for at least one pair of intersecting tetrahedra
          to identify if two objects intersect or not. However, we found that these geometrical analyses can result in corner
          cases which the tetrahedralization library used in the tests (TetGen) was not unable to tetrahedralize successfully.
          These cases were virtually always associated with complicated non-convex polyhedra which had portions
          of the mesh that were connected by almost point like tubes of triangles. 
          
          Finding more robust methods for computing intersections between not necessarily convex polyhedra might improve
          the situation in the future. For practical reasons we have thus deactivated the functionality of tetrahedra-tetrahedron
          intersections in paraprobe-intersector.
        enumeration: [shared_ion]
      analyze_intersection(NX_BOOLEAN):
        doc: |
          Specifies if the tool evaluates if objects intersect volumetrically.
      analyze_proximity(NX_BOOLEAN):
        doc: |
          Specifies if the tool evaluates if objects lay closer to one another than threshold_proximity.
      analyze_coprecipitation(NX_BOOLEAN):
        doc: |
          Specifies if the tool evaluates, provided that all (preprocessing tasks were successful), how intersecting
          or proximity related objects build sub-graphs. This is the feature that was used in `M. K端hbach et al. <https://arxiv.org/abs/2205.13510>`_
          for the high-throughput analyses of how many objects are coprecipitates in the sense that they are single,
          duplet, triplet, or high-order local groups.
        # For these analyses to work has_object_volume needs to be true.
      threshold_proximity(NX_FLOAT):
        doc: |
          The maximum Euclidean distance between two objects below which they are considered within proximity.
        unit: NX_LENGTH
      has_current_to_next_links(NX_BOOLEAN):
        doc: |
          Specifies if the tool stores the so-called forward relations between nodes representing members of the
          current_set to nodes representing members of the next_set.
      has_next_to_current_links(NX_BOOLEAN):
        doc: |
          Specifies if the tool stores the so-called backward relations between nodes representing members of the
          next_set to nodes representing members of the current_set.
      current_set(NXobject):
        doc: |
          Current set stores a set of members, meshes of volumetric features,
          which will be checked for proximity and/or volumetric intersection,
          to members of the current_set.
          The meshes were generated as a result of some other meshing process.
        set_identifier(NX_UINT):
          doc: |
            This identifier can be used to label the current set. The label effectively can be interpreted as the time/iteration (i.e. :math:`k`)
            step when the current set was taken (see `M. K端hbach et al. 2022 <https://arxiv.org/abs/2205.13510>`_).
          unit: NX_ANY
        # number_of_objects(NX_UINT) for now a support field to tell the tool how many objects to load.
        number_of_feature_types(NX_UINT):
          doc: |
            The total number of distinguished feature sets featureID.
            It is assumed that the members within all these featureID sets
            are representing a set together. As an example this set might represent
            all volumetric_features. However, users might have formed
            a subset of this set where individuals were regrouped.
            For paraprobe-nanochem this is the case for objects and proxies.
            Specifically, objects are distinguished further into those far
            from and those close to the edge of the dataset.
            Similarly, proxies are distinguished further into those far
            from and those close to the edge of the dataset.
            So while these four sub-sets contain different so-called types of
            features, key is that they were all generated for one set, here the
            current_set.
          unit: NX_UNITLESS
        featureID(NXserialized):
          exists: [min, 1, max, 4]
          doc: |
            Name of the (NeXus)/HDF5 file which contains triangulated surface meshes of the
            members of the set as instances of NXcg_polyhedron_set.
          feature_type(NX_CHAR):
            doc: |
              Descriptive category explaining what these features are.
            enumeration: [objects_far_from_edge, objects_close_to_edge, proxies_far_from_edge, proxies_close_to_edge, other]
          type(NX_CHAR):
          path(NX_CHAR):
          checksum(NX_CHAR):
          algorithm(NX_CHAR):
          geometry(NX_CHAR):
            doc: |
              Absolute path to the group with geometry data in the HDF5 file referred to by path.
          # currently groupname_geometry_prefix/object<ID>/polyhedron.
          feature_identifier(NX_UINT):
            doc: |
              Array of identifier whereby the path to the geometry data can be interferred automatically.
            unit: NX_UNITLESS
            dim: (i,)
      next_set(NXobject):
        doc: |
          Next set stores a set of members, meshes of volumetric features,
          which will be checked for proximity and/or volumetric intersection,
          to members of the next_set.
          The meshes were generated as a result of some other meshing process.
        set_identifier(NX_UINT):
          doc: |
            This identifier can be used to label the current set. The label effectively can be interpreted as the time/iteration (i.e. :math:`k + 1`)
            step when the current set was taken (see `M. K端hbach et al. 2022 <https://arxiv.org/abs/2205.13510>`_).
          unit: NX_ANY
        # number_of_objects(NX_UINT) for now a support field to tell the tool how many objects to load.
        number_of_feature_types(NX_UINT):
          unit: NX_UNITLESS
          doc: |
            The total number of distinguished feature sets featureID.
            It is assumed that the members within all these featureID sets
            are representing a set together. As an example this set might represent
            all volumetric_features. However, users might have formed
            a subset of this set where individuals were regrouped.
            For paraprobe-nanochem this is the case for objects and proxies.
            Specifically, objects are distinguished further into those far
            from and those close to the edge of the dataset.
            Similarly, proxies are distinguished further into those far
            from and those close to the edge of the dataset.
            So while these four sub-sets contain different so-called types of
            features key is that they were all generated for one set, here the
            next_set.
        featureID(NXserialized):
          exists: [min, 1, max, 4]
          feature_type(NX_CHAR):
            doc: |
              Descriptive category explaining what these features are.
            enumeration: [objects_far_from_edge, objects_close_to_edge, proxies_far_from_edge, proxies_close_to_edge]
          type(NX_CHAR):
          path(NX_CHAR):
          checksum(NX_CHAR):
          algorithm(NX_CHAR):
          geometry(NX_CHAR):
            doc: |
              Absolute path to the group with geometry data in the HDF5 file referred to by path.
          # currently groupname_geometry_prefix/object<ID>/polyhedron.
          feature_identifier(NX_UINT):
            doc: |
              Array of identifier whereby the path to the geometry data can be interferred automatically.
            unit: NX_UNITLESS
            dim: (i,)
      ##MK::tetrahedra volume intersection and tessellation and Nef polyhedra intersection are considered guru features
      # and therefore currently supported only via modifying the C/C++ source code directly as one should know exactly
      # what one is doing here before using these functionalities
    common(NXapm_paraprobe_tool_common): 
      status(NX_CHAR):
      programID(NXprogram):
        exists: [min, 1, max, infty]
        program(NX_CHAR):
          \@version(NX_CHAR):
      profiling(NXcs_profiling):
        exists: recommended
        start_time(NX_DATE_TIME):
        end_time(NX_DATE_TIME):
        total_elapsed_time(NX_FLOAT):
        current_working_directory(NX_CHAR):
