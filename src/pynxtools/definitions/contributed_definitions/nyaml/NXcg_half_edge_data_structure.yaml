category: base
doc: |
  Computational geeometry description of a half-edge data structure.
  
  Such a data structure can be used to efficiently circulate around faces
  and iterate over vertices of a planar graph.
# holes in the polygon mesh can be handled
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  d: |
    The dimensionality, which has to be at least 2.
  n_v: |
    The number of vertices.
  n_f: |
    The number of faces.
  n_he: |
    The number of half-edges.
type: group
NXcg_half_edge_data_structure(NXobject):
  \@depends_on(NX_CHAR):
    doc: |
      Hint to help resolve in which Euclidean coordinate system
      field values vertices are defined.
  dimensionality(NX_POSINT):
    doc: |
      Dimensionality of the primitives described.
    unit: NX_UNITLESS
  # resulting in a design similar to that of NXoff_geometry and the XDMF mixed primitive topology
  number_of_vertices(NX_INT):
    doc: |
      Number of vertices for each face.
      
      Each entry represents the total number of vertices for that face,
      irrespectively whether vertices are shared among faces or not.
    unit: NX_UNITLESS
    dim: (n_f,)
  number_of_edges(NX_INT):
    doc: |
      Number of edges for each face.
      
      Each entry represents the total number of edges for that face,
      irrespectively whether edges are shared across faces or not.
    unit: NX_UNITLESS
    dim: (n_e,)
  number_of_faces(NX_INT):
    doc: |
      Number of faces of the primitives.
    unit: NX_UNITLESS
  vertex_identifier_offset(NX_INT):
    doc: |
      Integer offset whereby the identifier of the first member
      of the vertices differs from zero.
      
      Identifier can be defined explicitly or implicitly.
      Inspect the definition of :ref:`NXcg_primitive_set` for further details.
    unit: NX_UNITLESS
  edge_identifier_offset(NX_INT):
    doc: |
      Integer offset whereby the identifier of the first member
      of the edges differs from zero.
      
      Identifier can be defined explicitly or implicitly.
      Inspect the definition of :ref:`NXcg_primitive_set` for further details.
    unit: NX_UNITLESS
  face_identifier_offset(NX_INT):
    doc: |
      Integer offset whereby the identifier of the first member
      of the faces differs from zero.
      
      Identifier can be defined explicitly or implicitly.
      Inspect the definition of :ref:`NXcg_primitive_set` for further details.
  # therefore, vertex_-, face_-, half_edge_-identifier are implicit
  position(NX_NUMBER):
    doc: |
      The position of the vertices.
    unit: NX_ANY
    dim: (n_v, d)
  vertex_incident_half_edge(NX_INT):
    doc: |
      Identifier of the incident half-edge.
    unit: NX_UNITLESS
    dim: (n_v,)
  face_half_edge(NX_INT):
    doc: |
      Identifier of the (starting)/associated half-edge of the face.
    unit: NX_UNITLESS
    dim: (n_f,)
  half_edge_vertex_origin(NX_INT):
    doc: |
      The identifier of the vertex from which this half-edge is outwards pointing.
    unit: NX_UNITLESS
    dim: (n_he,)
  half_edge_twin(NX_INT):
    doc: |
      Identifier of the associated oppositely pointing half-edge.
    unit: NX_UNITLESS
    dim: (n_he,)
  half_edge_incident_face(NX_INT):
    doc: |
      If the half-edge is a boundary half-edge the
      incident face identifier is NULL, i.e. 0.
    unit: NX_UNITLESS
    dim: (n_he,)
  half_edge_next(NX_INT):
    doc: |
      Identifier of the next half-edge.
    unit: NX_UNITLESS
    dim: (n_he,)
  half_edge_prev(NX_INT):
    doc: |
      Identifier of the previous half-edge.
    unit: NX_UNITLESS
    dim: (n_he,)
  weinberg_vector:
    doc: |
      Users are referred to the literature for the background of L. Weinberg's
      work about topological characterization of planar graphs:
      
      * `L. Weinberg 1966a, <https://dx.doi.org/10.1109/TCT.1964.1082216>`_
      * `L. Weinberg, 1966b, <https://dx.doi.org/10.1137/0114062>`_
      * `E. A. Lazar et al. <https://doi.org/10.1103/PhysRevLett.109.095505>`_
      
      and how this work can e.g. be applied in space-filling tessellations
      of microstructural objects like crystals/grains.
  
  # eventually store the Weinberg vector as an integer array
  # which could be more efficient
  # see https://jerryyin.info/geometry-processing-algorithms/half-edge/
  # for an illustrative example of half-edge data structures
