category: application
doc: |
  Application definition for a configuration file of the paraprobe-surfacer tool.
  
  This tool is part of the paraprobe-toolbox. Inspect :ref:`NXapm_paraprobe_tool_config` for details.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  n_alpha_values: |
    Number of alpha values (and offset values) to probe.
  n_values: |
    How many different match values does the filter specify.
type: group
NXapm_paraprobe_surfacer_config(NXobject):
  (NXentry):
    exists: [min, 1, max, 1]
    definition(NX_CHAR):
      \@version(NX_CHAR):
      enumeration: [NXapm_paraprobe_surfacer_config]
    surface_meshing(NXapm_paraprobe_tool_config):
      exists: [min, 1, max, 1]
      (NXidentifier):
        exists: optional
      analysis_identifier(NX_UINT):
        exists: recommended
      reconstruction(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        position(NX_CHAR):
        mass_to_charge(NX_CHAR):
      ranging(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        ranging_definitions(NX_CHAR):
      # filter that are here tool-specific parameter
      spatial_filter(NXspatial_filter):
        windowing_method(NX_CHAR):
        hexahedron_set(NXcg_hexahedron_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          hexahedra(NXcg_face_list_data_structure):
            vertices(NX_UINT):
        cylinder_set(NXcg_cylinder_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          center(NX_NUMBER):
          height(NX_NUMBER):
          radii(NX_NUMBER):
        ellipsoid_set(NXcg_ellipsoid_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          center(NX_NUMBER):
          half_axes_radii(NX_NUMBER):
          orientation(NX_NUMBER):
        polyhedron_set(NXcg_polyhedron_set):
          exists: optional
          # TODO
        bitmask(NXcs_filter_boolean_mask):
          exists: optional
          number_of_objects(NX_UINT):
          bitdepth(NX_UINT):
          mask(NX_UINT):
          # leave open if scalar or matrix
          #   dim: (i,)
          identifier(NX_UINT):
      evaporation_id_filter(NXsubsampling_filter):
        exists: optional
        min_incr_max(NX_INT):
      iontype_filter(NXmatch_filter):
        exists: optional
        method(NX_CHAR):
        match(NX_NUMBER):
      hit_multiplicity_filter(NXmatch_filter):
        exists: optional
        method(NX_CHAR):
        match(NX_NUMBER):
      # config
      preprocessing(NXprocess):
        method(NX_CHAR):
          doc: |
            Specifies the method that is used to preprocess the point cloud
            prior to the alpha-shape computation. 
            
            The option *default* specifies that no such filtering is applied.
            The option *kuehbach* specifies that a Hoshen-Kopelman
            percolation analysis is used to identify points that lie closer
            to the edge of the dataset. Details about the methods are reported
            in `M. KÃ¼hbach et al. <https://doi.org/10.1038/s41524-020-00486-1>`_.
          enumeration: [default, kuehbach]
        kernel_width(NX_UINT):
          doc: |
            When using the kuehbach preprocessing, this is the width of the
            kernel for identifying which ions are in voxels close to the
            edge of the point cloud.
          unit: NX_UNITLESS
      alpha_value_choice(NX_CHAR):
        doc: |
          Specifies which method to use to define the alpha value.
          
          The value *convex_hull_naive* is the default. The setting instructs
          the tool to use a fast specialized algorithm for computing only
          the convex hull. The resulting triangles can be skinny.
          
          The value *convex_hull_refine* instructs to tool to refine the
          quality of the mesh resulting from *convex_hull_naive*
          via triangle flipping and splitting.
          
          The value *smallest_solid* instructs the CGAL library to choose a
          value which realizes an alpha-shape that is the smallest solid.
          
          The value *cgal_optimal* instructs the CGAL library to choose a
          value which the library considers as to be an optimal value.
          Details are defined in the respective section of the CGAL library
          on 3D alpha shapes.
          
          The value *set_of_values* instructs the tool to compute a list
          collection of alpha-shapes for the specified alpha-values.
          
          The value *set_of_alpha_wrappings* instructs the tool to generate
          a set of so-called alpha wrappings. These are similar to alpha-shapes
          but provide additional guarantees (such as watertightness and
          proximity constraints) on the resulting wrapping.
        enumeration: [convex_hull_naive, convex_hull_refine, smallest_solid, cgal_optimal, set_of_values, set_of_alpha_wrappings]
      alpha_values(NX_FLOAT):
        doc: |
          Array of alpha values to use when alpha_value_choice is 
          set_of_values or when alpha_value_choice is set_of_alpha_wrappings.
        unit: NX_ANY
        # \@units: nm^2
        dim: (n_alpha_values,)
      offset_values(NX_FLOAT):
        doc: |
          Array of offset values to use when alpha_value_choice is set_of_alpha_wrappings.
          The array of alpha_values and offset_values define a sequence of (alpha and offset value).
        unit: NX_LENGTH
        # \@units: nm
        dim: (n_alpha_values,)
      has_exterior_facets(NX_BOOLEAN):
        doc: |
          Specifies if the tool should compute the set of exterior triangle facets
          for each alpha complex (for convex hull, alpha shapes, and wrappings).
      has_closure(NX_BOOLEAN):
        doc: |
          Specifies if the tool should check if the alpha complex of
          exterior triangular facets is a closed polyhedron.
      has_interior_tetrahedra(NX_BOOLEAN):
        doc: |
          Specifies if the tool should compute all interior tetrahedra
          of the alpha complex (currently only for alpha shapes).
      # NEW ISSUE: has_facet_appearance(NX_BOOLEAN):
    common(NXapm_paraprobe_tool_common): 
      status(NX_CHAR):
      programID(NXprogram):
        exists: [min, 1, max, infty]
        program(NX_CHAR):
          \@version(NX_CHAR):
      profiling(NXcs_profiling):
        exists: recommended
        start_time(NX_DATE_TIME):
        end_time(NX_DATE_TIME):
        total_elapsed_time(NX_FLOAT):
        current_working_directory(NX_CHAR):
