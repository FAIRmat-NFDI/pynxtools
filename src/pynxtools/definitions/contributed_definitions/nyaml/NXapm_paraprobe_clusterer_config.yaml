category: application
doc: |
  Application definition for a configuration file of the paraprobe-clusterer tool.
  
  This tool is part of the paraprobe-toolbox. Inspect :ref:`NXapm_paraprobe_tool_config` for details.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  # n_positions: Number of position values.
  # n_disjoint_clusters: Number of disjoint cluster.
  n_ivec_max: |
    Maximum number of atoms per molecular ion. Should be 32 for paraprobe.
  n_clust_algos: |
    Number of clustering algorithms used.
  n_ions: |
    Number of different iontypes to distinguish during clustering.
type: group
NXapm_paraprobe_clusterer_config(NXobject):
  (NXentry):
    exists: [min, 1, max, 1]
    definition(NX_CHAR):
      \@version(NX_CHAR):
      enumeration: [NXapm_paraprobe_clusterer_config]
    number_of_tasks(NX_UINT):
      doc: |
        How many cluster_analysis tasks should the tool execute.
      unit: NX_UNITLESS
    cameca_to_nexus(NXapm_paraprobe_tool_config):
      exists: [min, 0, max, 1]
      doc: |
        This process maps results from a cluster analysis made with IVAS / AP Suite
        into an interoperable representation. IVAS / AP Suite usually exports such results
        as a list of reconstructed ion positions with one cluster label per position. 
        These labels are reported via the mass-to-charge-state-ratio column of what is effectively
        a binary file that is formatted like a POS file but cluster labels written out using floating
        point numbers.
      reconstruction(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        position(NX_CHAR):
        mass_to_charge(NX_CHAR):
      results(NXserialized):
        doc: |
            File with the results of the cluster analyses that was computed with IVAS / AP suite
            (e.g. maximum-separation method clustering algorithm `J. Hyde et al. <https://doi.org/10.1557/PROC-650-R6.6>`_).
            The information is stored in an improper (.indexed.) POS file as a matrix of floating
            point quadruplets, one quadruplet for each ion. The first three values of each
            quadruplet encode the position of the ion. The fourth value is the integer identifier
            of the cluster encoded as a floating point number.
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
      recover_evaporation_id(NX_BOOLEAN):
        doc: |
          Specifies if paraprobe-clusterer should use the evaporation_ids from reconstruction
          for recovering for each position in the :ref:`NXserialized` results the closest matching position
          (within floating point accuracy). This can be useful when users wish to recover the 
          original evaporation_id, which IVAS /AP Suite drops when writing their *.indexed.* cluster
          results POS files that is referred to results.
      # recover_bitmask(NX_BOOLEAN):
      # doc: |
      #   Specifies if the tool should try to recover, after a recovery of the
      #   evaporation IDs a bitmask which identifies which of the positions
      #   in dataset/dataset/dataset_name_reconstruction where covered
      #   by the IVAS/APSuite cluster analysis. This can be useful to recover
      #    the region of interest.
    cluster_analysisID(NXapm_paraprobe_tool_config):
      exists: [min, 0, max, infty]
      doc: |
        This process performs a cluster analysis on a
        reconstructed dataset or a ROI within it.
      reconstruction(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        position(NX_CHAR):
        mass_to_charge(NX_CHAR):
      ranging(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        ranging_definitions(NX_CHAR):
      surface_distance(NXserialized):
        exists: optional
        doc: |
          Distance between each ion and triangulated surface mesh.
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        distance(NX_CHAR):
      spatial_filter(NXspatial_filter):
        windowing_method(NX_CHAR):
        hexahedron_set(NXcg_hexahedron_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          hexahedra(NXcg_face_list_data_structure):
            vertices(NX_UINT):
        cylinder_set(NXcg_cylinder_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          center(NX_NUMBER):
          height(NX_NUMBER):
          radii(NX_NUMBER):
        ellipsoid_set(NXcg_ellipsoid_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          center(NX_NUMBER):
          half_axes_radii(NX_NUMBER):
          orientation(NX_NUMBER):
        polyhedron_set(NXcg_polyhedron_set):
          exists: optional
          # TODO
        bitmask(NXcs_filter_boolean_mask):
          exists: optional
          number_of_objects(NX_UINT):
          bitdepth(NX_UINT):
          mask(NX_UINT):
          # leave open if scalar or matrix
          #   dim: (i,)
          # identifier(NX_UINT):
      evaporation_id_filter(NXsubsampling_filter):
        exists: optional
        min_incr_max(NX_INT):
      iontype_filter(NXmatch_filter):
        exists: optional
        method(NX_CHAR):
        match(NX_NUMBER):
      hit_multiplicity_filter(NXmatch_filter):
        exists: optional
        method(NX_CHAR):
        match(NX_NUMBER):
      # config
      ion_type_filter(NX_CHAR):
        doc: |
          How should iontypes be considered during the cluster analysis.
          
          The value resolve_all will set an ion active
          in the analysis regardless of which iontype it is.
          
          The value resolve_unknown will set an ion active
          when it is of the UNKNOWNTYPE.
          
          The value resolve_ion will set an ion active
          if it is of the specific iontype, irregardless of its nuclide structure.
          
          The value resolve_element will set an ion active and account as many times
          for it, as the (molecular) ion contains atoms of elements in the whitelist
          ion_query_nuclide_vector.
          
          The value resolve_isotope will set an ion active and account as many times
          for it, as the (molecular) ion contains nuclides in the whitelist
          ion_query_nuclide_vector.
          
          In effect, ion_query_nuclide_vector acts as a whitelist to filter which ions are
          considered as source ions of the correlation statistics and how the multiplicity
          of each ion will be factorized.
          
          This is relevant as in atom probe we have the situation that an ion of a molecular
          ion with more than one nuclide, say Ti O for example is counted potentially several
          times because at that position (reconstructed) position it has been assumed  that
          there was a Ti and an O atom. This multiplicity affects the size of the feature and its
          chemical composition.
        # enumeration: [resolve_all, resolve_unknown, resolve_ion, resolve_element, resolve_isotope]
        enumeration: [resolve_element]
      ion_query_nuclide_vector(NX_UINT):
        doc: |
          Matrix of nuclide vectors, as many as rows as different candidates
          for iontypes should be distinguished as possible source iontypes.
          In the simplest case, the matrix contains only the proton number
          of the element in the row, all other values set to zero.
        unit: NX_UNITLESS
        dim: (n_ions, n_ivec_max)
      # which clustering algorithms to execute?
      dbscan(NXprocess):
        doc: |
          Settings for DBScan clustering algorithm. For original details about the
          algorithm and (performance-relevant) details consider:
          
          * `M. Ester et al. <https://dx.doi.org/10.5555/3001460.3001507>`_
          * `M. Götz et al. <https://dx.doi.org/10.1145/2834892.2834894>`_
          
          For details about how the DBScan algorithms is the key behind the
          specific modification known as the maximum-separation method in the
          atom probe community consider `E. Jägle et al. <https://dx.doi.org/10.1017/S1431927614013294>`_
        high_throughput_method(NX_CHAR):
          doc: |
            Strategy how a set of cluster analyses with different parameter is executed:
            
            * For tuple as many runs are performed as parameter values have been defined.
            * For combinatorics individual parameter arrays are looped over.
            
            As an example we may provide ten entries for eps and three entries for min_pts.
            If high_throughput_method is set to tuple, the analysis is invalid because we have
            an insufficient number of min_pts values to pair them with our ten eps values.
            By contrast, if high_throughput_method is set to combinatorics, the tool will run three
            individual min_pts runs for each eps value, resulting in a total of 30 analyses.
            
            A typical example from the literature `M. Kühbach et al. <https://dx.doi.org/10.1038/s41524-020-00486-1>`_
            can be instructed via setting eps to an array of values np.linspace(0.2, 5.0, nums=241, endpoint=True),
            one min_pts value that is equal to 1, and high_throughput_method set to combinatorics.
          enumeration: [tuple, combinatorics]
        eps(NX_FLOAT):
          doc: |
            Array of epsilon (eps) parameter values.
          unit: NX_LENGTH
          dim: (i,)
        min_pts(NX_UINT):
          doc: |
            Array of minimum points (min_pts) parameter values.
          unit: NX_UNITLESS
          dim: (j,)
      # THE IDEA BEHIND paraprobe-clusterer is that users can run a number of cluster analyses
      # on their dataset on exactly the same point cloud and under the same conditions
      # optics(NXprocess):
      #   doc: |
      #     Settings for the OPTICS clustering algorithm.
      #     
      #     * `M. Ankerest et al. <https://dx.doi.org/10.1145/304181.304187>`_
      #   high_throughput_method(NX_CHAR):
      #     doc: |
      #       Strategy how runs with different parameter values are composed,
      #       following the explanation for higih_throughput_method of dbscan.
      #     enumeration: [tuple, combinatorics]
      #   min_pts(NX_UINT):
      #     doc: |
      #       Array of minimum points (min_pts) parameter values.
      #     unit: NX_UNITLESS
      #     dim: (i,)
      #   max_eps(NX_FLOAT):
      #     doc: |
      #       Array of maximum epsilon (eps) parameter values.
      #     unit: NX_LENGTH
      #     dim: (j,)
      hdbscan(NXprocess):
        doc: |
          Settings for the HPDBScan clustering algorithm.
          
          * L. McInnes et al. <https://dx.doi.org/10.21105/joss.00205>`_
          * scikit-learn hdbscan library `<https://hdbscan.readthedocs.io/en/latest/how_hdbscan_works.html>`_
          
          See also this documentation for details about the parameter.
          Here we use the terminology of the hdbscan documentation.
        high_throughput_method(NX_CHAR):
          doc: |
            Strategy how runs with different parameter values are composed,
            following the explanation for higih_throughput_method of dbscan.
          enumeration: [tuple, combinatorics]
        min_cluster_size(NX_NUMBER):
          doc: |
            Array of min_cluster_size parameter values.
          unit: NX_ANY
          dim: (i,)
        min_samples(NX_NUMBER):
          doc: |
            Array of min_samples parameter values.
          unit: NX_ANY
          dim: (j,)
        cluster_selection_epsilon(NX_NUMBER):
          doc: |
            Array of cluster_selection parameter values.
          unit: NX_ANY
          dim: (k,)
        alpha(NX_NUMBER):
          doc: |
            Array of alpha parameter values.
          unit: NX_ANY
          dim: (m,)
      # ADD FURTHER ALGORITHMS, see L. Stephenson for further details
      # e.g. https://doi.org/10.1017/S1431927607070900
    common(NXapm_paraprobe_tool_common): 
      status(NX_CHAR):
      programID(NXprogram):
        exists: [min, 1, max, infty]
        program(NX_CHAR):
          \@version(NX_CHAR):
      profiling(NXcs_profiling):
        exists: recommended
        start_time(NX_DATE_TIME):
        end_time(NX_DATE_TIME):
        total_elapsed_time(NX_FLOAT):
        current_working_directory(NX_CHAR):
