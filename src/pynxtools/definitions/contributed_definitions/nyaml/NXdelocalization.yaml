category: base
doc: |
  Base class of the configuration and results of a delocalization algorithm.
  
  Delocalization is used to distribute point-like objects on a grid to obtain
  e.g. smoother count, composition, or concentration values of scalar fields
  and compute gradients of these fields.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  n_p: |
    Number of points/objects.
  n_m: |
    Number of mark data per point/object.
  n_atoms: |
    Number of atoms in the whitelist.
  n_nuclides: |
    Number of isotopes in the whitelist.
type: group
NXdelocalization(NXobject):
  grid(NXcg_grid):
    doc: |
      Details about the grid on which the delocalization is applied.
  # grid(NX_CHAR):
  #   doc: |
  #     Reference or link to the grid on which the delocalization is applied.
  # objects(NX_CHAR):
  #   doc: |
  #    Reference or link to the points which are delocalized on the grid.
  
  # for APM the speciality is nothing but:
  # each point marks the location of an ion (object) in the tomographic reconstruction
  # there is a boolean mask which filters which ions, i.e. points are considered
  # plus there is a weight interpretation model, specifically in atom probe
  # if a (molecular) ion is decomposed into its atoms or isotopes
  # plus, given there is such a weight interpretation model, there is a weight
  # associated, specifically an integer >= 1 with each considered ion and 0 for
  # all ions which are not considered,
  # this weight is the multiplicity with respect to the interpretation model
  # i.e. a C:2 molecular ion has a multiplicity of 2 if the ion is considered
  # and the interpretation model that to consider carbon atoms or carbon ions
  weighting_model(NXmatch_filter):
    doc: |
      The weighting model specifies how mark data are mapped to a weight per point/object.
    weighting_method(NX_CHAR):
      doc: |
        As an example from the research field of atom probe points/objects are (molecular) ions.
        Different methods are used for weighting ions:
        
        * default, points get all the same weight 1., which for atom probe is equivalent
           to (molecular) iontype-based delocalization.
        * element, points get as much weight as they have atoms representing a nuclide
          with a proton number that is matching to a respective entry in whitelist.
          In atom probe jargon, this means atomic_decomposition.
        * isotope, points get as much weight as they have atoms representing a nuclides
          from a respective entry in whitelist.
          In atom probe jargon, this means isotope_decomposition.
      enumeration: [default, element, isotope]
    # method is specialized from NXmatch_filter
    method(NX_CHAR):
      enumeration: [whitelist]
    match(NX_UINT):
      doc: |
        A list of nuclides based on which to evaluate the weight. Nuclides need to exist in the nuclide table.
        Values are nuclide (isotope) hash values using the following hashing rule :math:`H = Z + N \cdot 256`
        with :math:`Z` the number of protons and :math:`N` the number of neutrons of the nuclide.
        For elements set :math:`N` to zero.
      unit: NX_UNITLESS
      dim: (n_nuclides,)
    mark(NX_NUMBER):
      doc: |
        Attribute data for each member of the point cloud. For APM these are the
        iontypes generated via ranging. The number of mark data per point is 1
        in the case for atom probe.
      unit: NX_UNITLESS
      dim: (n_p, n_m)
    weight(NX_NUMBER):
      doc: |
        Weighting factor with which the integrated intensity per grid cell is
        multiplied specifically for each point/object. For APM the weight are
        positive integer values, specifically the multiplicity of the ion,
        according to the details of the weighting_method.
      unit: NX_UNITLESS
      dim: (n_p,)