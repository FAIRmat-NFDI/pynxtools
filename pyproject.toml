[build-system]
requires = ["setuptools>=64.0.1", "setuptools-scm[toml]>=6.2"]
backend-path = ["pynxtools"]
build-backend = "_build_wrapper"

[project]
name = "pynxtools"
dynamic = ["version"]
authors = [
    { name = "The NOMAD Authors" },
]
description = "Extend NeXus for experiments and characterization in Materials Science and Materials Engineering and serve as a NOMAD parser implementation for NeXus."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
dependencies = [
    "click>=7.1.2",
    "h5py>=3.6.0",
    "xarray>=0.20.2",
    "PyYAML>=6.0",
    "numpy>=1.21.2",
    "pandas>=1.3.2",
    "ase>=3.19.0",
    "flatdict>=4.0.1",
    "hyperspy>=1.7.4",
    "ifes_apt_tc_data_modeling<0.2,>=0.0.9",
    "gitpython>=3.1.24",
    "pytz>=2021.1",
    "kikuchipy>=0.8.2",
    "pyxem>=0.14.2",
    "zipfile37==0.1.3",
    "nionswift>=0.16.8",
    "tzlocal<=4.3",
    "scipy>=1.7.1",
    "mergedeep",
    "importlib-metadata",
]

[project.urls]
"Homepage" = "https://github.com/FAIRmat-NFDI/pynxtools"
"Bug Tracker" = "https://github.com/FAIRmat-NFDI/pynxtools/issues"

[project.optional-dependencies]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-material-extensions",
    "mkdocs-macros-plugin",
]
dev = [
    "mypy",
    "ruff",
    "pytest",
    "pytest-timeout",
    "pytest-cov",
    "structlog",
    "types-pyyaml",
    "types-pytz",
    "types-requests",
    "pip-tools",
    "pre-commit",
]
convert = [
    "pynxtools[mpes,xps,stm]",
]
mpes = [
    "pynxtools-mpes",
]
xps = [
    "pynxtools-xps",
]
stm = [
    "pynxtools-stm",
]

[project.scripts]
read_nexus = "pynxtools.nexus.nexus:main"
dataconverter = "pynxtools.dataconverter.convert:convert_cli"
generate_eln = "pynxtools.eln_mapper.eln_mapper:get_eln"

[tool.setuptools.package-data]
pynxtools = ["definitions/**/*.xml", "definitions/**/*.xsd"]
"pynxtools.dataconverter.readers.xps" = ["*.json"]
"pynxtools.dataconverter.readers.hall" = ["enum_map.json"]
"pynxtools.dataconverter.readers.rii_database.formula_parser" = ["dispersion_function_grammar.lark"]

[tool.setuptools.packages.find]
exclude = ["pynxtools/definitions*"]

[tool.setuptools_scm]
version_scheme = "no-guess-dev"
local_scheme = "node-and-date"

[tool.ruff]
include = ["pynxtools/*.py", "tests/*.py"]
lint.select = [
    "E", # pycodestyle
    "W", # pycodestyle
    "PL", # pylint
]
lint.ignore = [
    "E501", # Line too long ({width} > {limit} characters)
    "E701", # Multiple statements on one line (colon)
    "E731", # Do not assign a lambda expression, use a def
    "E402",  # Module level import not at top of file
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used instead of constant
    "PLW0603", # Using the global statement
    "PLW2901", # redefined-loop-name
    "PLR1714", # consider-using-in
    "PLR5501", # else-if-used
]
lint.fixable = ["ALL"]
exclude = ["pynxtools/definitions/*"]

[tool.mypy]
strict = false
ignore_missing_imports = true
follow_imports = "silent"
no_strict_optional = true
disable_error_code = "import, annotation-unchecked"
exclude = ["pynxtools/definitions/*"]
